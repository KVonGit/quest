!library
!deprecated
!asl-version <311>
!name <MaDbRiT's Type Library>
!version <1.009 06-Sep-2003>
!author <MaDbRiT (Al Bampton)>
!help <typelib.pdf>
! This library adds a whole set of types, with related actions and properties to Quest.
! It is easy to use from Q.D.K. but be sure to read the manual before you start. 


'=====================================================
'== This is MaDbRiT's QUEST Types Library @06-09-03 ==
'== It will only work with Quest 3.11 build 137 or  == 
'== later This version is specifically designed to  ==
'== be easily usable from Q.D.K.                    ==
'=====================================================
'==        !!!! PLEASE READ THE MANUAL !!!!         ==
'==        !!!! NEVER CHANGE THIS FILE !!!!         ==
'=====================================================

'======================================
'== Add these lines to the gameblock ==
'======================================

!addto game
   command <look at #TLSdObj#; look #TLSdObj#; l #TLSdObj#> do <TLPlook>
   command <examine #TLSdObj#; inspect #TLSdObj#; x #TLSdObj#> do <TLPexamine>
   command <open #TLSdObj#> do <TLPopen>
   command <close #TLSdObj#; shut #TLSdObj#> do <TLPclose>   
   command <take #TLSdObj# from #TLSiObj#> do <TLPtake>
   command <take #TLSdObj# off> do <TLPunWear>
   command <take #TLSdObj#> do <TLPtake>
   command <drop #TLSdObj# into #TLSiObj#> do <TLPputIn>
   command <drop #TLSdObj# on> do <TLPwear>   
   command <drop #TLSdObj# down; drop down #TLSdObj#; drop #TLSdObj#> do <TLPdrop>   
   command <give #TLSdObj# to #TLSiObj#;give #TLSiObj# the #TLSdObj#> do <TLPgive>
   command <read #TLSdObj#> do <TLPread>   
   command <wear #TLSdObj#> do <TLPwear>
   command <unwear #TLSdObj#> do <TLPunWear>
   description {
      do <TLProomDescription>
   }
   startscript do <TLPstartup>
'   nodebug
!end

'===========================================
'== Add some synonyms used in the library ==
'===========================================

!addto synonyms
   back; back from; out of =from
   inside; in to; in =into
   look into = examine   
   put =drop
   don; drop on = wear
   take off; remove = unwear
   shut = close
   talk = speak
!end

'==================================================
'== A couple of dummy rooms, used by the library ==
'==================================================

define room <TLRcontainers>

end define

define room <TLRcontents>

end define

'================
'== PROCEDURES ==
'================

'===========================================================
'== Configure the library for use - called in startscript ==
'===========================================================

define procedure <TLPstartup>

   set string <TLSplayerRoom;>
   set string <TLScontentList;>
   set string <TLStemp;>
   set string <TLSrealName;>
   set string <TLSlist;>
   set string <TLStempName;>
   set string <TLMnotOpenable;Try as you might, you find that __
              is just not possible.>
   set string <TLMnotClosable;Try as you might, you find that __
              is just not possible.>
   set string <TLMtaken;Taken.>
   set string <TLMalreadyTaken;You have already got>
   set string <TLMdontHaveDObj;You don't seem to have that.>
   set string <TLMnoNeed;You realise there is no need __
               to do that and change your mind.>
   set string <TLSthisObj;>
   set string <TLSobjAlias;>
   set string <TLSindescription;>
   set string <TLSalias;>
   set string <TLSobjList;>
   set string <TLScharList;>
   set numeric <TLNcomma;0>
   set numeric <TLNcount;0>
   set numeric <TLNlength;0>
   set numeric <TLNsizeLimit;0>
   set numeric <TLNweightLimit;0>
   set numeric <TLNheadCovered;0>
   set numeric <TLNhandsCovered;0>
   set numeric <TLNfeetCovered;0>
   set numeric <TLNtopCovered;0>
   set numeric <TLNbotCovered;0>
   set numeric <TLNtempCovered;0>
   set numeric <TLNwearable;0>
   set numeric <TLNlengthOf;0>
'***
' TLNplayerSex' should be set to 1 for a male player, 2 for a female.
'***
   set numeric <TLNplayerSex;1>

   for each object in game {
      if type <#quest.thing#;TLTcontainable> then {
      if (#(quest.thing):isIn#<>nil) then {
         move <#quest.thing#;TLRcontainers>
        }
    }
    if type <#quest.thing#;TLTclothing> then {
    property <#quest.thing#;displayname=$displayname(#quest.thing#)$>
      if property <#quest.thing#;worn> then {
          move <#quest.thing#;inventory>
         property <#quest.thing#;alias=#(quest.thing):displayname# [worn]>
         set <TLNtopCovered;%TLNtopCovered% + #(quest.thing):topcover#>
         set <TLNheadCovered;%TLNheadCovered% + #(quest.thing):headcover#>
         set <TLNhandsCovered;%TLNhandsCovered% + #(quest.thing):handscover#>
         set <TLNfeetCovered;%TLNfeetCovered% + #(quest.thing):feetcover#>
            set <TLNbotCovered;%TLNbotCovered% + #(quest.thing):botcover#>
          }
   }
   }
   
end define

'==================================
'== Alternative room description ==
'==================================

define procedure <TLProomDescription>
   set <TLSindescription;$gettag(#quest.currentroom#;indescription)$>
   set <TLSalias;$gettag(#quest.currentroom#;alias)$>
   if is <#TLSindescription#;> then {
     if is <#TLSalias#;> then {
         msg <You are in $gettag(#quest.currentroom#;prefix)$ |b|cl#quest.currentroom#.|cb|xb|xn>
     }
     else {
         msg <You are in $gettag(#quest.currentroom#;prefix)$ |b|cl#TLSalias#.|cb|xb|xn>
     }
   }
   else {
     if is <#TLSalias#;> then {
         msg <#TLSindescription# $gettag(#quest.currentroom#;prefix)$ |b|cl#quest.currentroom#.|cb|xb|xn>
     }
     else {
         msg <#TLSindescription# $gettag(#quest.currentroom#;prefix)$ |b|cl#TLSalias#.|cb|xb|xn>
     }
   }
   msg <|n#quest.lookdesc#|n>
   set <TLSobjList;>
   set <TLScharList;>
   for each object in <#quest.currentroom#> {
      set <TLSthisObj;#quest.thing#>
      if property <#quest.thing#;invisible> or property <#quest.thing#;hidden> then {
      }
      else {
         if type <#quest.thing#;TLTactor> then {
			if property <#quest.thing#;named> then {
            	set <TLScharList;#TLScharList# |b$capfirst(#@quest.thing#)$|xb, >
			}
			else set <TLScharList;#TLScharList# #(quest.thing):prefix# |b#@quest.thing#|xb, >
         }
         else{
            set <TLSobjList;#TLSobjList# #(quest.thing):prefix#>
            set <TLSobjList;#TLSobjList# |b#@quest.thing#|xb, >
         }
      }
   }
   if ($lengthof(#TLScharList#)$ >0) then {
      set <TLNlengthOf;$lengthof(#TLScharList#)$ - 1>
      set <TLScharList;$left(#TLScharList#;%TLNlengthOf%)$>
      set <TLScharList;$TLFcontentFormat(#TLScharList#)$>
         if ($instr(#TLScharList#;_and_)$ >0) then { 
            msg <#TLScharList# are here.|n>    
         }
         else {
            msg <#TLScharList# is here.|n>        
         }
      }
      if ($lengthof(#TLSobjList#)$ >0) then {     
         set <TLNlengthOf;$lengthof(#TLSobjList#)$ - 1>
         set <TLSobjList;$left(#TLSobjList#;%TLNlengthOf%)$>
         set <TLSobjList;$TLFcontentFormat(#TLSobjList#)$>
         if ($instr(#TLSobjList#;_and_)$ >0) then { 
            msg <You can see #TLSobjList# here.|n>     
         }
         else {
            msg <You can see #TLSobjList# here.|n>         
         }        
      }
      if not is <#quest.doorways.dirs#;> then {
         msg <You can move #quest.doorways.dirs#.>
      }
      if not is <#quest.doorways.places#;> then {
         msg <You can go to #quest.doorways.places#.>
      }
      if not is <#quest.doorways.out#;> then {
         msg <You can go out to |b#quest.doorways.out.display#|xb.>
      }     
end define


'================================================================
'== Override the inbuilt LOOK function - need extra capability ==
'================================================================

define procedure <TLPlook>
   do <TLPfillContents>
   set <TLSdObj;$TLFgetObjectName(#TLSdObj#)$>
      if (#TLSdObj# <> !) then {
         if ($locationof(#TLSdObj#)$=TLRcontents) then {
            move <#TLSdObj#;#quest.currentroom#>
         }
         exec <look at #TLSdObj#;normal>
         if type <#TLSdObj#;TLTcontainable> then {
            if (#(TLSdObj):isIn#<>nil) then {
               move <#TLSdObj#;TLRContents>
            }
         }
      }
      else exec <look #TLSdObj#;normal>
   do <TLPemptyContents>
end define

'===================================================================
'== Override the inbuilt EXAMINE function - need extra capability ==
'===================================================================

define procedure <TLPexamine>
   do <TLPfillContents>
   set <TLSdObj;$TLFgetObjectName(#TLSdObj#)$>
      if (#TLSdObj# <> !) then {
         if ($locationof(#TLSdObj#)$=TLRcontents) then {
            move <#TLSdObj#;#quest.currentroom#>
         }         
         do <TLPexamineContainer>
         if type <#TLSdObj#;TLTcontainable> then {
            if (#(TLSdObj):isIn#<>nil) then {
               move <#TLSdObj#;TLRContents>
            }
         }         
      }
   else do <TLPexamineContainer>
   do <TLPemptyContents>
end define

'================================================================
'== Tests examined object & calls contents action where needed ==
'================================================================

define procedure <TLPexamineContainer>
   exec <x #TLSdObj#;normal>
   if type <#TLSdObj#;TLTcontainer> then {
     doaction <#TLSdObj#;contents>
   }
end define

'================================================================
'== Override the inbuilt TAKE function - need extra capability ==
'================================================================

define procedure <TLPtake>
   do <TLPfillContents>
   set <TLSdObj;$TLFgetObjectName(#TLSdObj#)$>
      if (#TLSdObj# <> !) then {
         if ($locationof(#TLSdObj#)$<>inventory) then  {
            move <#TLSdObj#;#quest.currentroom#>
            if property <#TLSdObj#;takeable> then {
               doaction <#TLSdObj#;take>
               if property <#TLSdObj#;isIn> then {
                  property <#TLSdObj#;isIn=nil>
               }
            }
            else {
            	msg <#(TLSdObj):noTake#>
                if property <#TLSdObj#;isIn> then {
                  	if (#(TLSdObj):isIn#<> nil) then {
 						move <#TLSdObj#;TLRcontents>
					}
                }
			}
         }
         else msg <#TLMalreadyTaken# #(TLSdObj):article#.>
      }
      else doaction <#TLSdObj#;take>
   do <TLPemptyContents>
end define

'================================================================
'== Override the inbuilt DROP function - need extra capability ==
'================================================================

define procedure <TLPdrop>
   do <TLPfillContents>
   set <TLSdObj;$TLFgetObjectName(#TLSdObj#)$>
      if (#TLSdObj# <> !) then {
         if property <#TLSdObj#;worn> then {
            msg <You'll have to take #(TLSdObj):article# off first.>
         }
         else exec <drop #TLSTemp#;normal>
      }
      else exec <drop #TLStemp#;normal>
end define


'================================================================
'== Override the inbuilt GIVE function - need extra capability ==
'================================================================

define procedure <TLPgive>
   do <TLPfillContents>
   set <TLSdObj;$TLFgetObjectName(#TLSdObj#)$>
   set <TLSiObj;$TLFgetObjectName(#TLSiObj#)$>
   if (#TLSdObj#=!) then {
      exec <look at #TLSdObj#;normal>
   }
   else {
      if (#TLSIObj#=!) then {
         exec <look at #TLSIObj#;normal>
      }
      else {
       if property <#TLSdObj#;worn> then {
         msg <You'll have to take #(TLSdObj):article# off first.>     
       }
       else {
         do <TLPcheckGive>
      }
      }
   }
   do <TLPemptyContents>
end define

'=============================================================
'== Tests objects & redirects or runs standard give routine == 
'=============================================================

define procedure <TLPcheckGive>
   if type <#TLSdObj#;TLTcontainable> or type <#TLSiObj#;TLTcontainer> then {
      do <TLPcheckIObj>
   }
   else {
      exec <give #TLSdObj# to #TLSiObj#;normal>
   }
end define


'=========================================================
'== 3 utility procedures - manipulate contained objects ==
'=========================================================

define procedure <TLPfillContents>
   for each object in <TLRcontainers> {
      if got <#(quest.thing):isIn#> or here <#(quest.thing):isIn#> then {
         if not property <#(quest.thing):isIn#;closed> then {
            move <#quest.thing#;TLRcontents>
         }
      }
   }   
end define

define procedure <TLPvalidContents>
   for each object in <TLRcontents> {
      if (#(quest.thing):isIn# <> #TLSdobj# ) then {
         move <#quest.thing#;TLRcontainers>
      }
   } 
end define

define procedure <TLPemptyContents>
   for each object in <TLRcontents> {
      move <#quest.thing#;TLRcontainers>
   } 
end define

'===================================
'== Handle the added OPEN command ==
'===================================

define procedure <TLPopen>
   do <TLPfillContents>
   set <TLSdObj;$TLFgetObjectName(#TLSdObj#)$>
      if (#TLSdObj# <> !) then {
       do <TLPopenObj>
      }
      else exec <look #TLSdObj#;normal>
   do <TLPemptyContents>   
end define

'==================================================================
'== Tests open-ed object & calls open action or denial as needed ==
'==================================================================

define procedure <TLPopenObj>
   if type <#TLSdObj#;TLTclosable> then {
     doaction <#TLSdObj#;open>
   }
   else msg <#TLMnotOpenable#>
end define

'====================================
'== Handle the added CLOSE command ==
'====================================

define procedure <TLPclose>
   do <TLPfillContents>
   set <TLSdObj;$TLFgetObjectName(#TLSdObj#)$>
      if (#TLSdObj# <> !) then {
       do <TLPcloseObj>
      }
      else exec <look #TLSdObj#;normal>
   do <TLPemptyContents>   
end define

'===================================================================
'== Tests close-d object & calls close action or denial as needed ==
'===================================================================

define procedure <TLPcloseObj>
   if type <#TLSdObj#;TLTclosable> then {
     doaction <#TLSdObj#;close>
   }
   else msg <#TLMnotClosable#>
end define

'=====================================
'== Handle the added PUT IN command ==
'=====================================

define procedure <TLPputIn>
   do <TLPfillContents>
   set <TLSdObj;$TLFgetObjectName(#TLSdObj#)$>
'   set <TLSiObj;$TLFgetObjectName(#TLSiObj#)$>
   set <TLSiObj;$TLFgetObjectName(#TLSiObj#)$>   
      if (#TLSdObj# <> !) then {
         do <TLPcheckIObj>
      }
      else msg <#TLMdontHaveDObj#>
   do <TLPemptyContents>
end define

'===========================================
'== Test the indirect object is available ==
'===========================================

define procedure <TLPcheckIObj>
   if (#TLSiObj# <> !) then {
      do <TLPcheckContainer>
   }
   else {
   	if property <#TLSiObj#;named> then msg <$displayname(TLSiObj)$ isn't here.>
	else msg <The $displayname(TLSiObj)$ isn't here.>
   }
end define

'======================================
'== Test for container & containable ==
'======================================

define procedure <TLPcheckContainer>
   if not type <#TLSiObj#;TLTcontainer> then {
      msg <You can't put things in $TLFnamed(#TLSiObj#)$.>
   }
   else {
      if property <#TLSiObj#;closed> then {
         msg <You'll have to open $TLFnamed(#TLSiObj#)$...>
      }
      else {
         if not type <#TLSdObj#;TLTcontainable> then {
            msg <You can't put $TLFnamed(#TLSdObj#)$ in anything.>
         }
         else do <TLPcontainerLimits>
      }
   }
end define

'======================================
'== Both legal objects, check limits ==
'======================================
define procedure <TLPcontainerLimits>
   if (#(TLSdObj):isIn#<>#TLSiObj#) then { 
      set <TLNsizeLimit;$TLFsizeHeld(#TLSiObj#)$>
      set <TLNweightLimit;$TLFweightHeld(#TLSiObj#)$>
      set <TLNsizeLimit;#(TLSiObj):sizeLimit# - %TLNsizeLimit%>
      set <TLNweightLimit;#(TLSiObj):weightLimit# - %TLNweightLimit%>
      if (%TLNsizeLimit% < #(TLSdObj):size#) then {
         msg <#(TLSdObj):tooBig#>
      }
      else {
         if (%TLNweightLimit% < #(TLSdObj):weight#) then {
            msg <#(TLSdObj):tooHeavy#>
         }
         else {
            move <#TLSdObj#;TLRcontainers>
            property <#TLSdOBJ#;isIn=#TLSiObj#>
				doaction <#TLSdObj#;contained>
         }
      }  
   }
   else msg <#TLMnoNeed#>
end define

'===================================
'== The 'read' command procedure. ==
'===================================

define procedure <TLPread>
   do <TLPfillContents>
   set <TLSdObj;$TLFgetObjectName(#TLSdObj#)$>
      if (#TLSdObj# <> !) then {
         if type <#TLSdObj#;TLTreadable> then {
            doaction <#TLSdObj#;read>
         }
         else msg <There's nothing to read!>
      }
      else exec <look #TLSdObj#;normal>
   do <TLPemptyContents> 
end define

'===================================
'== The 'wear' command procedure. ==
'===================================

define procedure <TLPwear>
   do <TLPfillContents>
   set <TLSdObj;$TLFgetObjectName(#TLSdObj#)$>
      if (#TLSdObj# <> !) then {
         if action <#TLSdObj#;wear> then {
            if (#(TLSdObj):sex# = %TLNplayerSex%) then {
               do <TLPcheckWear>
            }
            else {
               msg <On second thoughts you decide that the |xn>
               msg <#TLSdObj# |xn>
               if (%TLNplayerSex% = 1) then {
                  msg <won't suit a man like you at all.>
               }
               else msg <won't suit a woman like you at all.>
            }
         }
         else {
            if (#(TLSdObj):noWear#= default) then {
            	msg <You cannot wear $TLFnamed(#TLSdObj#)$!>
			}
			else {
				msg <#(TLSdObj):noWear#>
			}
         }
      }
      else msg <$TLFnamed(#TLStemp#)$ isn't here.>
   do <TLPemptyContents>
end define

'========================================================================
'== The 'checkWear' procedure - this checks the sense of wear commands ==
'========================================================================

define procedure <TLPcheckWear>
   set <TLNwearable;0>
   if (#(TLSdObj):topcover# <> 0) and (#(TLSdObj):topcover# <= %TLNtopCovered%) then {
      set <TLNwearable;%TLNwearable% + 1>
   }
   if (#(TLSdObj):headcover# <> 0) and (#(TLSdObj):headcover# <= %TLNheadCovered%) then {
      set <TLNwearable;%TLNwearable% + 1>
   }
   if (#(TLSdObj):feetcover# <> 0) and (#(TLSdObj):feetcover# <= %TLNfeetCovered%) then {
      set <TLNwearable;%TLNwearable% + 1>
   }
   if (#(TLSdObj):handscover# <> 0) and (#(TLSdObj):handscover# <= %TLNhandsCovered%) then {
      set <TLNwearable;%TLNwearable% + 1>
   }
' - disallow for coats (don't affect ability to put on lower torso clothes)
   set <TLNtempCovered;%TLNbotCovered%>
   if (%TLNtempCovered% > 63) and (#(TLSdObj):botcover# < 33) then {
      set <TLNtempCovered;%TLNtempCovered% - 64>
   }
' - disallow for skirts and dresses (like coats!)
   if (%TLNtempCovered% > 31) and (#(TLSdObj):botcover# < 16) and __
   (#(TLSdObj):botcover# <> 4) then {
      set <TLNtempCovered;%TLNtempCovered% - 32>
   }
' - disallow wearing of skirts/dresses and trousers simultaneously
   if (%TLNtempCovered% > 15) then {
      set <TLNtempCovered;%TLNtempCovered% + 16> 
   }
   if (#(TLSdObj):botcover# <> 0) and (#(TLSdObj):botcover# <= %TLNtempCovered%) then {
      set <TLNwearable;%TLNwearable% + 1>
   }
   if (%TLNwearable% =0) then {
      doaction <#TLSdObj#;wear>
      property <#TLSdObj#; worn>
      set <TLNtopCovered;%TLNtopCovered% + #(TLSdObj):topcover#>
      set <TLNheadCovered;%TLNheadCovered% + #(TLSdObj):headcover#>
      set <TLNhandsCovered;%TLNhandsCovered% + #(TLSdObj):handscover#>
      set <TLNfeetCovered;%TLNfeetCovered% + #(TLSdObj):feetcover#>
      set <TLNbotCovered;%TLNbotCovered% + #(TLSdObj):botcover#>
   }
   else {
      msg <Given what you are already wearing - that makes no sense at all.>
   }
end define

'=====================================
'== The 'unwear' command procedure. ==
'=====================================

define procedure <TLPunWear>
   do <TLPfillContents>
   set <TLSdObj;$TLFgetObjectName(#TLSdObj#)$>
      if (#TLSdObj# <> !) then {
         if property <#TLSdObj#; worn> then {
            if action <#TLSdObj#;unwear> then {
               do <TLPcheckUnWear>
            }
            else msg <You can't do that.>
         }
         else msg <You can't do that.>
      }
      else msg <You aren't wearing $TLFnamed(#TLStemp#)$.>
   do <TLPemptyContents>
end define

'==================================
'== The 'CheckUnwear' procedure. ==
'==================================

define procedure <TLPcheckUnWear>
   set <TLNwearable;0>
   set <TLNtempCovered; %TLNtopCovered% /2>
   if (#(TLSdObj):topcover# <> 0) and (#(TLSdObj):topcover# <= %TLNtempCovered%) then {
      set <TLNwearable;%TLNwearable% + 1>
   }
   set <TLNtempCovered; %TLNheadCovered% /2>
   if (#(TLSdObj):headcover# <> 0) and (#(TLSdObj):headcover# <= %TLNtempCovered%) then {
      set <TLNwearable;%TLNwearable% + 2>
   }
   set <TLNtempCovered; %TLNfeetCovered% /2>
   if (#(TLSdObj):feetcover# <> 0) and (#(TLSdObj):feetcover# <= %TLNtempCovered%) then {
      set <TLNwearable;%TLNwearable% + 4>
   }
   set <TLNtempCovered; %TLNhandsCovered% /2>   
      if (#(TLSdObj):handscover# <> 0) and (#(TLSdObj):handscover# <= %TLNtempCovered%) then {
         set <TLNwearable;%TLNwearable% + 8>
   }
' - disallow for coats (don't affect ability to take off lower torso clothes)
   set <TLNtempCovered;%TLNbotCovered%>
   if (%TLNtempCovered% > 63) then {
      set <TLNtempCovered;%TLNtempCovered% - 64>
   }
' - disallow for skirts and dresses (like coats!)
   if (%TLNtempCovered% > 31) and (#(TLSdObj):botcover# <> 4) then {
      set <TLNtempCovered;%TLNtempCcovered% - 32>
   }
   set <TLNtempCovered;%TLNtempCovered% /2>
   if (#(TLSdObj):botcover# <> 0) and (#(TLSdObj):botcover# <= %TLNtempCovered%) then {
      set <TLNwearable;%TLNwearable% + 16>
   }
   if (%TLNwearable% =0) then {
      doaction <#TLSdObj#;unwear>
      property <#TLSdObj#; not worn>
      set <TLNtopCovered;%TLNtopCovered% - #(TLSdObj):topcover#>
      set <TLNheadCovered;%TLNheadCovered% - #(TLSdObj):headcover#>
      set <TLNhandsCovered;%TLNhandsCovered% - #(TLSdObj):handscover#>
      set <TLNfeetCovered;%TLNfeetCovered% - #(TLSdObj):feetcover#>
      set <TLNbotCovered;%TLNbotCovered% - #(TLSdObj):botcover#>
   }
   else {
      msg <Given what you are wearing, that isn't possible.>
   }
end define

'===============
'== FUNCTIONS ==
'===============

'========================================================
'== Returns object real name, checking three locations ==
'========================================================

define function <TLFgetObjectName>
   set <TLStemp;$parameter(1)$>
   set <TLSrealName;$getobjectname(#TLStemp#)$>
'msg <DEBUG #TLStemp# #TLSrealName#>
   if (#TLSrealName#=!) then {
      set <TLSrealName;$getobjectname(#TLStemp#;TLRcontents)$>
   }
   if (#TLSrealName#=!) then {
      set <TLSrealName;$getobjectname(#TLStemp# [worn])$>
        if (#TLSrealName#=!) then {
         set <TLSrealName;$getobjectname(#TLStemp# [worn];TLRcontents)$>
      }
   }
   return <#TLSrealName#>
end define

'=====================================================
'== Replaces last comma in parsed string with "and" ==
'=====================================================

define function <TLFcontentFormat>
   set <TLStemp;$parameter(1)$>
   set <TLNlength;$lengthof(#TLStemp#)$>
   set <TLNcomma;0>
   for <TLNcount; 1; %TLNlength%; 1> {
      if ($mid(#TLStemp#;%TLNcount%;1)$ =,) then {
         set <TLNcomma;%TLNcount%>
      }
   }
   if (%TLNcomma% <>0) then {
      set <TLNcomma;%TLNcomma%-1>
      set <TLSlist;$left(#TLStemp#;%TLNcomma%)$ and>
      set <TLNcomma;%TLNcomma%+2>
      set <TLSlist;#TLSlist#$mid(#TLStemp#;%TLNcomma%)$>     
   }
   else set <TLSlist;#TLStemp#>
   return <#TLSlist#>
end define

'=================================================
'== Returns sizes / weights held in a container ==
'=================================================

define function <TLFsizeHeld>
   set <TLNsizeLimit;0>
   for each object in <TLRcontents> {
      if (#(quest.thing):isIn#=#TLSiObj#) then {
         set <TLNsizeLimit;%TLNsizeLimit% + #(quest.thing):size#>
      }     
   }
   return <%TLNsizeLimit%>
end define

define function <TLFweightHeld>
   set <TLNweightLimit;0>
   for each object in <TLRcontents> {
      if (#(quest.thing):isIn#=#TLSiObj#) then {
         set <TLNweightLimit;%TLNweightLimit% + #(quest.thing):weight#>
      }     
   }
   return <%TLNweightLimit%>
end define

'========================================================
'== Returns proper name or 'the object' as appropriate ==
'========================================================

define function <TLFnamed>
   set <TLStempName;$parameter(1)$>
   if property <#TLStempName#;named> then {
     set <TLStempName;$capfirst(#TLStempName#)$>
   }
   else set <TLStempName;the #TLStempName#>
   return <#TLStempName#>
end define

'======================
'== TYPE DEFINITIONS ==
'======================

define type <TLTactor>
   listHeader = He is carrying
   noSpeak = He says nothing.
   article = he
   displaytype = person
   named
   action <speak> {
      set <TLSthisObj;$thisobject$> 
      msg <#(TLSthisObj):noSpeak#>
   }
   
end define

'=====================================================================
'== The TLTcontainer type: object that you can put other objects in ==
'=====================================================================

define type <TLTcontainer>
   listHeader=It contains
   sizeLimit=100
   weightLimit=100
      
   action <contents> {
   do <TLPvalidContents>
      outputoff
      set <TLSplayerRoom;#quest.currentroom#>
      goto <TLRcontents>
      set <TLScontentList;#quest.formatobjects#>         
      goto <#TLSplayerRoom#>
      outputon
      set <TLSthisObj;$thisobject$>
      if type <#TLSthisObj#;TLTClosable> then {
         if property <#TLSthisObj#;closed> then {
            set <TLScontentList;>
            msg <#(TLSthisObj):closedDesc#>
         }
      }
      if ($lengthof(#TLScontentList#)$ > 0) then {
         msg <#(TLSdObj):listHeader# #TLScontentList#.>
      }
   }
end define

'=========================================================================
'== The TLTcontainable type: object that can be put into a TLTcontainer == 
'=========================================================================

define type <TLTcontainable>
   isIn=nil
   size=25
   weight=25
   tooBig=It is too big to fit.
   tooHeavy=It is too heavy for that.
   action <contained> msg <O.K.>
end define

'=================================================================
'== The TLTclosable type: object that can be opened and closed == 
'=================================================================

define type <TLTclosable>
   closed
   closedDesc=(It is closed, you cannot see inside.)
   isClosedDesc=It is already closed.
   isOpenedDesc=It is already open.
   closingDesc=You close it.
   openingDesc=You open it.
   article=it

   action <open> {
      set <TLSthisObj;$thisobject$>
      if property <#TLSthisObj#;closed> then {
         doaction <#TLSthisObj#;opened>
         property <#TLSthisObj#;not closed>
      }
      else {
         msg <#(TLSthisObj):isOpenedDesc#>
      }
   }

   action <close> {
      set <TLSthisObj;$thisobject$>
      if property <#TLSthisObj#;closed> then {
         msg <#(TLSthisObj):isClosedDesc#>
      }
      else {
         doaction <#TLSthisObj#;closed>
         property <#TLSthisObj#;closed>
      }
   }

   	action <opened> {
    	msg <#(TLSthisObj):openingDesc#>
   	}

   	action <closed> {
   		msg <#(TLSthisObj):closingDesc#>
   	}

end define

'=============================================
'== The TLTreadable type: a readable object ==
'=============================================

define type <TLTreadable>
   readmessage = You start to read but it is so incredibly dull you decide not to bother.
   action <read> {
   set <TLSdObj;$thisobject$>
   msg <#(TLSdObj):readmessage#>
   }
end define


'====================================================
'== The TLTobject type: a visible, takeable object ==
'====================================================

define type <TLTobject>
   takeable
   action <take> {
      set <TLSthisObj;$thisobject$>
      move <#TLSthisObj#;inventory>
      msg <#TLMtaken#>
      if property <#TLSthisObj#;TLTcontainable> then {
         property <#TLSthisObj#;isIn=nil>
      }
   }
end define

'=================================================
'== The TLTscenery type: fixed, unlisted object ==
'=================================================

define type <TLTscenery>
   invisible
end define

'============================================================
'== The default type: common functionality for all objects ==
'============================================================

!addto type <default>
'define type <default>
   prefix=a
      article=it
      displaytype=object
      noTake = Taking that would serve no useful purpose.
	  noWear = default
'end define
!end


'================================================================================
'== This clothing type is not used directly but inherited by specific clothes. ==
'================================================================================
 
define type <TLTclothing>
   type <TLTobject>
   headcover = 0
   handscover = 0
   feetcover = 0
   topcover = 0
   botcover = 0
   sex = 1
   article = it
   wearmessage = You put it on.
   unwearmessage = You take it off.
   properties <displayname=$thisobject$>
      action <wear> {
         set <TLSdObj;$thisobject$>
         msg <#(TLSdObj):wearmessage#>
         property <#TLSdObj#;alias=#(TLSdObj):displayname# [worn]>
         move <#TLSdObj#;inventory>
      }
      action <unwear> {
         set <TLSdObj;$thisobject$>
         msg <#(TLSdObj):unwearmessage#>
         property <#TLSdObj#;alias=#(TLSdObj):displayname#>
      }   
end define  

' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
' * This lib defines 15 specific clothing objects, and most of these can be used    *
' * to good effect for other garments - the defined objects are listed together     *
' * with other garments that work similarly for game purposes.                      *
' *                                                                                 *
' * DEFINED GARMENT : ALSO USABLE FOR THESE GARMENTS                                *
' * hat             : any headwear                                                  *
' * gloves          : any handwear                                                  *
' * shoes           : boots, outer footwear generally                               *
' * socks           : stockings                                                     *
' * tights          : pantie hose                                                   *
' * undies          : panties, briefs - lower portion underwear generally           *
' * teddy           : uhm.. any underthing that covers like a teddy!                *
' * trousers        : jeans, shorts (not the underwear variety)                     *
' * dress           : coverall                                                      *
' * skirt           : kilt maybe?                                                   *
' * vest            : bra, other 'top only' undergarment                            *
' * shirt           : blouse, T-Shirt etc.                                          *
' * sweater         : pullover, sweatshirt - '2nd layer' top garment                *
' * jacket          : fleece, parka, anorak, short coat of whatever type            *
' * coat            : any long length outermost garment like a coat                 *
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

define type <TLTshoes>
   type <TLTclothing>
   feetcover = 4
   wearmessage = You put them on.
   unwearmessage = You take them off.
   article = them
   prefix=a pair of
end define

define type <TLTsocks>
   type <TLTclothing>
   feetcover = 2
   wearmessage = You put them on.
   unwearmessage = You take them off.
   article = them
   prefix=a pair of
end define

define type <TLTtights>
   type <TLTclothing>
   feetcover = 2
   botcover = 8
   article = them
   wearmessage = You put them on.
   unwearmessage = You take them off.
   prefix=a pair of
end define

define type <TLThat>
   type <TLTclothing>
   headcover = 2
   wearmessage = You put it on.
   unwearmessage = You take it off.
   prefix=a
end define

define type <TLTgloves>
   type <TLTclothing>
   handscover = 2
   wearmessage = You put them on.
   unwearmessage = You take them off.
   article = them
   prefix=a pair of
end define

define type <TLTvest>
   type <TLTclothing>
   topcover = 2
   wearmessage = You put it on.
   unwearmessage = You take it off.
   prefix=a
end define

define type <TLTshirt>
   type <TLTclothing>
   topcover = 8
   wearmessage = You put it on.
   unwearmessage = You take it off.
   prefix=a
end define

define type <TLTteddy>
   type <TLTclothing>
   topcover = 4
   botcover = 4
   wearmessage = You put it on.
   unwearmessage = You take it off.
   prefix=a
 end define

define type <TLTundies>
   type <TLTclothing>
   botcover = 2
   wearmessage = You put them on.
   unwearmessage = You take them off.
   article = them
   prefix=a pair of
end define

define type <TLTdress>
   type <TLTclothing>
   topcover = 8
   botcover = 32
   wearmessage = You put it on.
   unwearmessage = You take it off.
   prefix=a
end define

define type <TLTskirt>
   type <TLTclothing>
   botcover = 32
   wearmessage = You put it on.
   unwearmessage = You take it off.
   prefix=a
end define

define type <TLTtrousers>
   type <TLTclothing>
   botcover = 16
   wearmessage = You put them on.
   unwearmessage = You take them off.
   article = them
   prefix=a pair of
end define

define type <TLTsweater>
   type <TLTclothing>
   topcover = 16
   wearmessage = You put it on.
   unwearmessage = You take it off.
   prefix=a
end define

define type <TLTjacket>
   type <TLTclothing>
   topcover = 32
   wearmessage = You put it on.
   unwearmessage = You take it off.
   prefix=a
end define

define type <TLTcoat>
   type <TLTclothing>
   topcover = 64
   botcover = 64
   wearmessage = You put it on.
   unwearmessage = You take it off.
   prefix=a
end define


'==========================
'== INTERFACE FOR Q.D.K. ==
'==========================

!QDK

'script <MaDbRiTs Types Library>
'   command <Initialise the library (use in startscript); TLPstartup>
'      display <Initialise MaDbRiTs Types Library.>

object <Basics>
   type <Regular object; TLTobject>
   type <Scenery (not takeable or described) object; TLTscenery> 
   property <Make regular object not takeable;not takeable>
   property <Not takeable msg;noTake;text>
   property <Not wearable msg;noWear;text>
   
object <Readable>
   type <Readable object;TLTreadable>
   property <Message if read;readMessage;text>
   action <Action if read;read>

object <Containers>
   type <Container object (can have things put in it); TLTcontainer>
   property <Header for listing;listHeader;text> 
   property <Size Limit;sizeLimit;text>
   property <Weight Limit;weightLimit;text>
   
   type <Containable object (can be put in things); TLTcontainable>  
   property <Size;size;text>
   property <Weight;weight;text>
   property <Start game inside;isIn;objects>
   property <Msg if Too Big;tooBig;text>
   property <Msg if Too Heavy;tooHeavy;text>
	action <Action when contained;contained>

object <Actor>
   type <Actor can carry things;TLTcontainer>
   property <Header for listing;listHeader;text> 
   property <Size Limit;sizeLimit;text>
   property <Weight Limit;weightLimit;text>
   type <Actor; TLTactor>
   property <Actor not named. (e.g. 'the sailor' not 'Jack');not named>
   property <Default speak reply;noSpeak;text>
   action <Script if spoken to;speak>
   
object <Closables>   
   type <Closable object     NOTE Following properties all have useful defaults;TLTclosable>
   property <Start open?;not closed>
   property <Closed text (container);closedDesc;text>
   property <Is closed description;isClosedDesc;text>   
   property <Closing description;closingDesc;text>   
   property <Is open description;isOpenDesc;text>   
   property <Opening description;openingDesc;text>
   action <Script when opened;opened>
   action <Script when closed;closed>

object <Clothing 1>  
   type <Sweater;TLTsweater>
   type <Shirt;TLTshirt>
   type <Vest (top half underwear / bra etc.);TLTvest>
   type <Teddy (or 1 piece swimsuit etc.);TLTteddy>
   type <Underwear (shorts or briefs);TLTundies>
   type <Socks;TLTsocks>
   type <Tights (a.k.a. Panty Hose);TLTtights>
   type <Dress;TLTdress>
   type <Skirt;TLTskirt>
   type <Trousers;TLTtrousers>
   type <Shoes;TLTshoes>
   type <Hat           NOTE Clothing continues on next tab!;TLThat>   
   
   
object <Clothing 2>
   type <Gloves;TLTgloves>
   type <Jacket (short coat);TLTjacket>
   type <Coat (long coat)       NOTE Properties below have defaults! See the manual;TLTcoat>  
   property <Msg when put on;wearmessage;text>
   property <Msg when taken off;unwearmessage;text>   
   property <Head cover value;headcover;text>
   property <Hands cover value;handscover;text>
   property <Feet cover value;feetcover;text>
   property <Top cover value;topcover;text>
   property <Bottom cover value;botcover;text>
   property <Sex;sex;text>
   property <Start game worn?;worn>
!end
