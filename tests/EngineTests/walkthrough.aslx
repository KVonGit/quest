<asl version="580">
  <include ref="English.aslx" />
  <include ref="Core.aslx" />
  <game name="assert">
    <dictionary type="simplestringdictionary">key1=value1; key2=value2</dictionary>
    <list type="simplestringlist">value1; value2; value3</list>
  </game>
  <object name="start">
    <alias>oldalias</alias>
    <object name="player">
      <inherit name="defaultplayer" />
    </object>
    <object name="table">
      <inherit name="surface"/>
      <tablelist type="simplestringlist">item</tablelist>
      <look type="script">
        list add (table.tablelist, "newitem")
        msg ("Table list count: " + ListCount(table.tablelist))
      </look>
      <object name="lamp">
        <lookcount type="int">0</lookcount>
        <look type="script">
          lamp.lookcount = lamp.lookcount + 1
          msg ("Lamp look count: " + lamp.lookcount)
        </look>
      </object>
    </object>
  </object>
  <object name="other">
  </object>
  <command>
    <pattern>dictionary add</pattern>
    <script>
      game.dictionarycopy = game.dictionary
      dictionary add (game.dictionary, "key3", "value3")
    </script>
  </command>
  <command>
    <pattern>dictionary remove</pattern>
    <script>
      dictionary remove (game.dictionary, "key1")
    </script>
  </command>
  <command>
    <pattern>create</pattern>
    <script>
      create ("dynamicobject")
    </script>
  </command>
  <command>
    <pattern>list remove</pattern>
    <script>
      game.listcopy = game.list
      list remove (game.list, "value2")
    </script>
  </command>
  <command>
    <pattern>create exit</pattern>
    <script>
      create exit ("east", start, other)
    </script>
  </command>
  <command>
    <pattern>destroy</pattern>
    <script>
      destroy ("lamp")
    </script>
  </command>
  <command>
    <pattern>set_player_dot_parent_dot_alias</pattern>
    <script>
      player.parent.alias = "newalias"
    </script>
  </command>
  <walkthrough name="debug">
    <steps>
      <![CDATA[
      assert:player.parent = start
      assert:table.parent = start
      assert:lamp.parent = table
      assert:lamp.lookcount = 0
      x lamp
      assert:lamp.lookcount = 1
      x lamp
      x lamp
      assert:lamp.lookcount = 3
      undo
      assert:lamp.lookcount = 2
      undo
      assert:lamp.lookcount = 1
      x lamp
      assert:lamp.lookcount = 2
      assert:ListCount(table.tablelist) = 1
      x table
      x table
      assert:ListCount(table.tablelist) = 3
      undo
      assert:ListCount(table.tablelist) = 2
      undo
      assert:ListCount(table.tablelist) = 1
      assert:DictionaryCount(game.dictionary) = 2
      assert:StringDictionaryItem(game.dictionary, "key1") = "value1"
      assert:StringDictionaryItem(game.dictionary, "key2") = "value2"
      assert:not DictionaryContains(game.dictionary, "key3")
      dictionary add
      assert:DictionaryCount(game.dictionary) = 3
      assert:StringDictionaryItem(game.dictionary, "key1") = "value1"
      assert:StringDictionaryItem(game.dictionary, "key2") = "value2"
      assert:DictionaryContains(game.dictionary, "key3")
      assert:StringDictionaryItem(game.dictionary, "key3") = "value3"
      assert:DictionaryCount(game.dictionarycopy) = 2
      assert:not DictionaryContains(game.dictionarycopy, "key3")
      undo
      assert:DictionaryCount(game.dictionary) = 2
      assert:StringDictionaryItem(game.dictionary, "key1") = "value1"
      assert:StringDictionaryItem(game.dictionary, "key2") = "value2"
      assert:not DictionaryContains(game.dictionary, "key3")
      dictionary remove
      assert:DictionaryCount(game.dictionary) = 1
      assert:not DictionaryContains(game.dictionary, "key1")
      undo
      assert:DictionaryCount(game.dictionary) = 2
      assert:StringDictionaryItem(game.dictionary, "key1") = "value1"
      assert:GetObject("dynamicobject") = null
      create
      assert:GetObject("dynamicobject") <> null
      undo
      assert:GetObject("dynamicobject") = null
      assert:ListCount(game.list) = 3
      assert:ListContains(game.list, "value2")
      list remove
      assert:ListCount(game.list) = 2
      assert:ListCount(game.listcopy) = 3
      assert:not ListContains(game.list, "value2")
      assert:ListContains(game.listcopy, "value2")
      undo
      assert:ListCount(game.list) = 3
      assert:ListContains(game.list, "value2")
      assert:GetExitByName(start, "east") = null
      create exit
      assert:GetExitByName(start, "east") <> null
      undo
      assert:GetExitByName(start, "east") = null
      assert:GetObject("lamp") <> null
      destroy
      assert:GetObject("lamp") = null
      undo
      assert:GetObject("lamp") <> null
      assert:player.parent.alias = "oldalias"
      set_player_dot_parent_dot_alias
      assert:player.parent.alias = "newalias"
      ]]>
    </steps>
  </walkthrough>
</asl>