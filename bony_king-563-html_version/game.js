/*
Quest Compiler
KVMod
version 6.5

game.js version 20240814.1555
*/

var selectSizeWithoutStatus = 8;
var selectSizeWithStatus = 6;
var numCommands = 0;
var thisCommand = 0;
var commandsList = new Array();
var tmrTick = null;
var tickCount = 0;
var sendNextGameTickerAfter = 0;
var verbButtonCount = 9;
var commandLog = null;
var canSendCommand = true;
var qjsPlayer = true;
var multiple = false;
var speakEnabled = false;

var game;
function init() {
    game = GetObject("game");
    showStatusVisible(false);
	game.qjsPlayer = true;
    var newFont = GetAttribute(GetObject("game"), "defaultfont");
    if (HasAttribute(GetObject("game"), "cover") && GetAttribute(GetObject("game"), "cover") != "") {
        $("#cover-art").attr('href',GetAttribute(GetObject("game"), "cover")).show();
        $("#cover-pic").attr('src',GetFileURL(GetAttribute(GetObject("game"), "cover")));
    }
    if (HasAttribute(GetObject("game"), "mailto") && GetAttribute(GetObject("game"), "mailto") != '') {
        $("#contact-div").show();
        var mailto = GetAttribute(GetObject("game"), "mailto");
        var link =  $("#contact-link").attr('href');
        var newlink = link.replace(/\$\$YOUREMAILADDRESS\$\$/, mailto);
        $("#contact-link").attr('href', newlink);
    }
    if (HasAttribute(GetObject("game"), "defaultwebfont")) {
        var s = "<link href=\"https://fonts.googleapis.com/css?family=";
        s += GetAttribute(GetObject("game"), "defaultwebfont");
        s += "\" rel=\"stylesheet\">";
        $("body").append(s);
        GetObject("game").defaultfont = GetObject("game").defaultwebfont + ", " + GetObject("game").defaultfont;
        newFont = GetAttribute(GetObject("game"), "defaultwebfont");
    }
    $('body').css('background', GetObject('game').defaultbackground);
    $("#divOutput div span").css("font-family", newFont);
    $("#fontSample").css("font-family", newFont);
    currentFont = newFont;
    var newFontSize = GetAttribute(GetObject("game"), "defaultfontsize");
    $("#divOutput div span").css("font-size", newFontSize + "pt");
    $("#fontSample").css("font-size", newFontSize + "pt");
    currentFontSize = newFontSize;
    $("#button-restart").button().click(function () {
        $("#button-restart").removeClass("ui-state-focus ui-state-hover");
        uiDoRestart();
    });
    $("#button-undo").button().click(function () {
        $("#button-undo").removeClass("ui-state-focus ui-state-hover");
        uiDoUndo();
    });
    $("#button-wait").button().click(function () {
        $("#button-wait").removeClass("ui-state-focus ui-state-hover");
        uiDoWait();
    });
        $("#button-options").button().click(function () {
        $("#button-options").removeClass("ui-state-focus ui-state-hover");
        $("#gameMore").hide();
        $("#gameOptions").show();
    });
    $("#fontOptions").change(function () {
        var newFont = $("#fontOptions option:selected").text();
        $("#divOutput div span").css("font-family", newFont);
        $("#fontSample").css("font-family", newFont);
        currentFont = newFont;
        set(GetObject("game"), "defaultfont", newFont);
        saveGame();
    });
    $("#fontSize").change(function () {
        var newFontSize = $("#fontSize option:selected").val();
        $("#divOutput div span").css("font-size", newFontSize + "pt");
        $("#fontSample").css("font-size", newFontSize + "pt");
        currentFontSize = newFontSize;
        set(GetObject("game"), "defaultfontsize", parseInt(newFontSize));
        saveGame();
    });
	
    $(document).on("click", function () {
        if (_waitMode) {
            endWait();
            $("#txtCommand").focus();
        }
    });
	
	$(document).on("click", ".elementmenu", function (event) {
        if (!$(this).hasClass("disabled")) {
            event.preventDefault();
            event.stopPropagation();
            $(this).blur();
            return false;
        }
        $("#txtCommand").focus();
    });

    $(document).on("click", ".exitlink", function () {
        if (!$(this).hasClass("disabled")) {
            sendCommand($(this).data("command"));
        }
        $("#txtCommand").focus();
    });

    $(document).on("click", ".commandlink", function () {
        var $this = $(this);
        if (!$this.hasClass("disabled") && canSendCommand) {
            if ($this.data("deactivateonclick")) {
                $this.addClass("disabled");
                $this.data("deactivated", true);
            }
            sendCommand($this.data("command"));
        }
        $("#txtCommand").focus();
    });

    $(document).on("click", "#compassLabel", function () {
        $("#compassAccordion").toggle();
    });
    $(document).on("click", "#placesObjectsLabel", function () {
        $("#objectsList").toggle();
    });
    $(document).on("click", "#inventoryLabel", function () {
        $("#inventoryList").toggle();
    });
    $("#gamePanes").css("min-width", $("#gamePanes").width());

    worldmodelInitialise();
    if (!loadGame()) {
        worldModelBeginGame();
    }
    if ($(window).width() < 800) {
        currentTab = "string";
    }
    if (ListContains(AllObjects(), GetObject("key "))) {
        GetObject("key ").alias = "key";
    }
    GetObject("game").runturnscripts = false;
    TryFinishTurn();
}

function endWait() {
    if (!_waitMode) return;
    sendEndWait();
}

function sendEndWait() {
    waitEnded();

}

function waitEnded() {
    _waitMode = false;
    $("#endWaitLink").remove();
    $("#divCommand").show();
    beginningOfCurrentTurnScrollPosition = $("#gameContent").height();
    window.setTimeout(function () {
       awaitingCallback = false;
       waitCallback();
       TryFinishTurn();
       $("#txtCommand").focus();
    }, 100);
}

function extLink(url) {
    window.open(url, "_system");
}

function showStatusVisible(visible) {
    if (visible) {
        $("#statusVars").show();
        $("#statusLabel").show();
    }
    else {
        $("#statusVars").hide();
        $("#statusLabel").hide();
    }
}

var beginningOfCurrentTurnScrollPosition = 0;
var scrollTimeout = null;

function scrollToEnd() {
    if (scrollTimeout != null) {
        clearTimeout(scrollTimeout);
    }

    scrollTimeout = setTimeout(function () {
        scrollTimeout = null;
        scrollToEndNow();
    }, 200);
}

function scrollToEndNow() {
    $('html, body').animate({ scrollTop: beginningOfCurrentTurnScrollPosition - 30 }, 200);
}

function updateLocation(text) {
    if (GetObject("game").showlocation) {
        $("#location").html(text);
    }
    else {
        $("#location").hide();
    }
}

var _waitMode = false;
var _pauseMode = false;
var _waitingForSoundToFinish = false;

var waitButtonId = 0;

function beginWait() {
    if (runningWalkthrough) {
        awaitingCallback = false;
        waitCallback();
        TryFinishTurn();
        return;
    }
    _waitMode = true;
    waitButtonId++;
    addText("<a class=\"cmdlink\" style=\"color:" + currentLinkForeground + ";font-family:" + currentFont + ";font-size:" + currentFontSize + "pt;\" id=\"endWaitLink\" >Continue...</a><br/><br/>");
    $("#endWaitLink").click(function () {
        _waitMode = false;
        $(this).remove();
        $("#divCommand").show();
        
        beginningOfCurrentTurnScrollPosition = $("#gameContent").height();
        window.setTimeout(function () {
            awaitingCallback = false;
            waitCallback();
            TryFinishTurn();
            $("#txtCommand").focus();
        }, 100);
    });
    $("#divCommand").hide();
}



function beginPause(ms) {
    _pauseMode = true;
    $("#divCommand").hide();
    window.setTimeout(function () {
        endPause()
    }, ms);
}

function endPause() {
    _pauseMode = false;
    $("#divCommand").show();
    window.setTimeout(function () {
        // TO DO
        //$("#fldUIMsg").val("endpause");
        //$("#cmdSubmit").click();
    }, 100);
}

function SetTimeout(time,todo){
    setTimeout(eval(todo),time * 1000);
}


function globalKey(e) {
    if (_waitMode) {
        endWait();
        if (e.keyCode == 13) {
            e.preventDefault();
        }
        return;
    }
}

function commandKey(e) {
    switch (keyPressCode(e)) {
        case 13:
            runCommand();
            return false;
        case 38:
            thisCommand--;
            if (thisCommand == 0) thisCommand = numCommands;
            $("#txtCommand").val(commandsList[thisCommand]);
            break;
        case 40:
            thisCommand++;
            if (thisCommand > numCommands) thisCommand = 1;
            $("#txtCommand").val(commandsList[thisCommand]);
            break;
        case 27:
            thisCommand = numCommands + 1;
            $("#txtCommand").val("");
            break;
        case 82:
            if (e.ctrlKey) {
                uiDoRestart();
                e.preventDefault();
            }
            break;
    }
}

function runCommand() {
    var command = $("#txtCommand").val();
    if (command.length > 0) {
        numCommands++;
        commandsList[numCommands] = command;
        thisCommand = numCommands + 1;
        sendCommand(command);
        $("#txtCommand").val("");
    }
}

function prepareCommand(command) {
    // TO DO
    //$("#fldUITickCount").val(getTickCountAndStopTimer());
    //$("#fldUIMsg").val("command " + command);
}

function showQuestion(title) {
    $("#msgboxCaption").html(title);

    var msgboxOptions = {
        modal: true,
        autoOpen: false,
        buttons: [
            {
                text: "Yes",
                click: function () { msgboxSubmit("yes"); }
            },
            {
                text: "No",
                click: function () { msgboxSubmit("no"); }
            }
        ],
        closeOnEscape: false,
        open: function (event, ui) { $(".ui-dialog-titlebar-close").hide(); }    // suppresses "close" button
    };

    $("#msgbox").dialog(msgboxOptions);
    $("#msgbox").dialog("open");
}

function msgboxSubmit(text) {
    $("#msgbox").dialog("close");
    window.setTimeout(function () {
        // TO DO
        //$("#fldUIMsg").val("msgbox " + text);
        //$("#cmdSubmit").click();
    }, 100);
}

var _menuSelection = "";

function showMenu(title, options, allowCancel) {
    $("#dialogOptions").empty();
    $.each(options, function (key, value) {
        $("#dialogOptions").append(
            $("<option/>").attr("value", key).text(value)
        );
    });

    $("#dialogCaption").html(title);

    var dialogOptions = {
        modal: true,
        autoOpen: false,
        buttons: [{
            text: "Select",
            click: function () { dialogSelect(); }
        }]
    };

    if (allowCancel) {
        dialogOptions.buttons = dialogOptions.buttons.concat([{
            text: "Cancel",
            click: function () { dialogCancel(); }
        }]);
        dialogOptions.close = function (event, ui) { dialogClose(); };
    }
    else {
        dialogOptions.closeOnEscape = false;
        dialogOptions.open = function (event, ui) { $(".ui-dialog-titlebar-close").hide(); };    // suppresses "close" button
    }

    _menuSelection = "";
    $("#dialog").dialog(dialogOptions);

    $("#dialog").dialog("open");
}

function dialogSelect() {
    _menuSelection = $("#dialogOptions").val();
    if (_menuSelection.length > 0) {
        $("#dialog").dialog("close");
        window.setTimeout(function () {
            SetMenuSelection(_menuSelection);
            updateLists();
        }, 100);
    }
}

function dialogCancel() {
    $("#dialog").dialog("close");
}

function dialogClose() {
    if (_menuSelection.length == 0) {
        dialogSendCancel();
    }
}

function dialogSendCancel() {
    window.setTimeout(function () {
        // TO DO
        //$("#fldUIMsg").val("choicecancel");
        //$("#cmdSubmit").click();
    }, 100);
}

function sessionTimeout() {
    disableInterface();
}

function gameFinished() {
    disableInterface();
}

function disableInterface() {
    $("#divCommand").hide();
    $("#gamePanesRunning").hide();
    $("#gamePanesFinished").show();
}

function playWav(filename, sync, looped) {
    playAudio(filename, sync, looped);
}

function playMp3(filename, sync, looped) {
    playAudio(filename, sync, looped);
}

//function playAudio(filename, format, sync, looped) {
function playAudio(filename, sync, looped) {
    stopAudio();
    msg(" <audio autoplay id='audio-div'><source src='"+filename+"'>Your browser does not support the audio element.</audio> ");
    soundDiv = document.getElementById('audio-div');
    if (looped) {
        $("#audio-div").attr('loop', true);
        if (typeof soundDiv.loop == 'boolean') {
            soundDiv.loop = true;
        }
        else {
            soundDiv.addEventListener('ended', function () {
                soundDiv.currentTime = 0;
                soundDiv.play();
            }, false);
        }
    }
    if (sync) {
        _waitingForSoundToFinish = true;
        $("#divCommand").hide();
        $("#gamePanes").hide();
        setTimeout(function () { $('a').css('color', 'black'); }, 500);
        soundDiv.addEventListener('ended', function () {
            stopAudio();
        }, false);
    }
    //$("#audio-div")[0].play();
}

function stopAudio() {
    $("#audio-div").remove();
    $("#divCommand").show();
    $("#gamePanes").show();
    $('a').css('color', 'blue');
    if (_waitingForSoundToFinish) {
        _waitingForSoundToFinish = false;
    }
}

function finishSync() {
    _waitingForSoundToFinish = false;
    window.setTimeout(function () {
        $("#divCommand").show();
        $("#fldUIMsg").val("endwait");
        $("#cmdSubmit").click();
    }, 100);
}

function panesVisible(visible) {
    if (visible) {
        $("#gamePanes").show();
    }
    else {
        $("#gamePanes").hide();
    }
}

function uiShow(element) {
    if (element == "") return;
    $(element).show();
}

function uiHide(element) {
    if (element == "") return;
    $(element).hide();
}

var _compassDirs = ["northwest", "north", "northeast", "west", "east", "southwest", "south", "southeast", "up", "down", "in", "out"];

var lastPaneLinkId = 0;

function updateList(listName, listData) {
    var listElement = "";
    var emptyListLabel = "";

    if (listName == "inventory") {
        listElement = "#inventoryList";
        emptyListLabel = "#inventoryEmpty";
    }

    if (listName == "placesobjects") {
        $('#gameObjects').show();
        listElement = "#objectsList";
        emptyListLabel = "#placesObjectsEmpty";
    }

    $(listElement).empty();
    $(listElement).show();
    var listcount = 0;
    var anyItem = false;

    $.each(listData, function (key, value) {
        var splitString = value.split(":");
        var objectDisplayName = splitString[0];
        if (typeof (thisObj) !== "undefined") {
            return false;
        }
        var objectVerbs = splitString[1];
        var hasListAlias = false;
        var thisObj = GetObject(objectDisplayName);
        var objNameToClass = objectDisplayName.replace(/ /g, '-');
        var objectListAlias = objectDisplayName;
        if (typeof (thisObj) !== "undefined") {
            if (typeof (thisObj['listalias']) === "string") {
                if (thisObj['listalias'] !== "") {
                    hasListAlias = true;
                    objectListAlias = ProcessText(thisObj['listalias']);
                }
            }
        }
        if (listName == "inventory" && !_compassDirs.includes(objectListAlias)) {
            listcount++;
            lastPaneLinkId++;
            var paneLinkId = "paneLink" + lastPaneLinkId;
            $(listElement).append(
                "<li id=\"" + paneLinkId + "\" class=\"" + objNameToClass + "\" href=\"#\">" + objectListAlias + "</li>"
            );
            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);
            anyItem = true;
        }
        else if (listName == "placesobjects" && !_compassDirs.includes(objectListAlias)) {

            listcount++;
            lastPaneLinkId++;
            var paneLinkId = "paneLink" + lastPaneLinkId;
            $(listElement).append(
				"<li id=\"" + paneLinkId + "\" class=\"" + objNameToClass + "\" href=\"#\">" + objectListAlias + "</li>"
            );
            bindMenu(paneLinkId, objectVerbs, objectDisplayName, false);
            anyItem = true;
        }
    });
    $(listElement + " li:last-child").addClass('last-child')
    if (listcount == 0) $(listElement).hide();
    if (anyItem) {
        $(emptyListLabel).hide();
    }
    else {
        $(emptyListLabel).show();
    }
}

function updateCompass(directions) {
    updateDir(directions, "NW", _compassDirs[0]);
    updateDir(directions, "N", _compassDirs[1]);
    updateDir(directions, "NE", _compassDirs[2]);
    updateDir(directions, "W", _compassDirs[3]);
    updateDir(directions, "E", _compassDirs[4]);
    updateDir(directions, "SW", _compassDirs[5]);
    updateDir(directions, "S", _compassDirs[6]);
    updateDir(directions, "SE", _compassDirs[7]);
    updateDir(directions, "U", _compassDirs[8]);
    updateDir(directions, "D", _compassDirs[9]);
    updateDir(directions, "In", _compassDirs[10]);
    updateDir(directions, "Out", _compassDirs[11]);
}

function updateDir(directions, label, dir) {
    if (!directions.includes(dir)) {
        $("#cmdCompass" + label).button("disable");
        $("#cmdCompass" + label).addClass("ui-state-disabled").addClass("ui-button-disabled");
    }
    else {
        $("#cmdCompass" + label).button("enable");
        $("#cmdCompass" + label).removeClass("ui-state-disabled").removeClass("ui-button-disabled");
    }
}


function compassClick(direction) {
    sendCommand(direction);
}



function addExternalStylesheet(source) {
    var link = $("<link>");
    link.attr({
        type: "text/css",
        rel: "stylesheet",
        href: source
    });
    $("head").append(link);
}

function AddExternalStylesheet(stylesheet)

{

    if (GetObject("game").externalstylesheets == null) {

        set(GetObject("game"), "externalstylesheets", NewStringList());

        }

    if (!(ListContains(GetObject("game").externalstylesheets, stylesheet))) {

        listadd(GetObject("game").externalstylesheets, stylesheet);

        addExternalStylesheet (stylesheet)

    }

}

function sendCommand(text) {
    if (!gameRunning) return;
    if (awaitingInputCallback) {
        awaitingInputCallback = false;
        awaitingCallback = false;
        getinputCallback(text);
        return;
    }
    if (awaitingCallback) return;
    beginningOfCurrentTurnScrollPosition = $("#gameContent").height();

    if (_pauseMode || _waitingForSoundToFinish) return;
    if (_waitMode) {
        endWait();
        return;
    }
    window.setTimeout(function () {
        // TO DO - send tick count
        //prepareCommand(text);

        
                    if (text.substring(0, 6) == "cheat ") {
                runCheatCode(text.substring(6));
            }
            else if (text.trim().toLowerCase() == "restart") {
                uiDoRestart();
            }
            else if (text.trim().toLowerCase() == "menu") {
                $("#moreBtn").click();
            }
            else if (text.trim().toLowerCase() == "transcript" || text.trim().toLowerCase() == "script") {
                showTranscript();
            }
            else {
                sendCommandInternal(text);
            }
                }, 100);
}

function sendCommandInternal(command) {
    var start = (new Date).getTime();
    addToCommandLog(command);
    HandleCommand(command);
    var diff = (new Date).getTime() - start;
    if (typeof (GetObject("game").aslversion) == 'undefined' || game.aslversion < 580) {
        TryFinishTurn();
    }
}

function addToCommandLog(command) {
    if (commandLog == null) {
        commandLog = new Array();
    }
    commandLog.push(command);
}
/*
function runCheatCode(code) {
    var walkthrough = window["object_main"];
    if (walkthrough.steps.indexOf("label:" + code) > -1) {
        runWalkthrough("main", 0, 0, code);
    }
    else {
        sendCommandInternal("cheat " + code);
    }
}
*/
function runCheatCode(code) {
    if (typeof (getElement(code)) != 'undefined' && getElement(code).steps.length > 0) {
        runWalkthrough(code);
    }
    else {
        sendCommandInternal("cheat " + code);
    }
}


function generateSaveLog(fn) {
    var gameElementArray = new Array();
    gameElementArray.push(GetObject("game"));
    generateSaveLogForArray(gameElementArray, fn);
    generateSaveLogForArray(allObjects, fn);
    generateSaveLogForArray(allExits, fn);
    generateSaveLogForArray(allCommands, fn);
    generateSaveLogForArray(allTurnScripts, fn);
    generateSaveLogForArray(allTimers, fn);
    thisTurnModifiedItems = new Array();
}

function generateSaveLogForArray(array, fn) {
    for (var idx in array) {
        var object = array[idx];
        var attrs = object["__modified"];
        if (attrs != undefined) {
            for (var attrIdx in attrs) {
                var attr = attrs[attrIdx];
                fn(object, attr, object[attr]);
            }
        }

        for (var attr in object) {
            var value = object[attr];
            if (typeof value === "object") {
                for (var idx in thisTurnModifiedItems) {
                    var item = thisTurnModifiedItems[idx];

                    if (value === item) {
                        markAttributeModified(object, attr);
                        fn(object, attr, value);
                        break;
                    }
                }
            }
        }
    }
}

function saveGame() {
    if (!gameRunning) return;
    if (awaitingCallback) return;
    if (runningWalkthrough) return;
    setTimeout(function () {
        var start = (new Date).getTime();
        saveGameInternal();
        var diff = (new Date).getTime() - start;
    }, 250);
}

function saveGameInternal() {
    if (!gameRunning) return;
    if (awaitingCallback) return;
    if (!localStorage) return;
    try {
        localStorageTransactionId = localStorage.getItem("transaction");
        if (localStorageTransactionId == undefined) {
            localStorageTransactionId = 1;
        }
        else {
            localStorageTransactionId = 3 - localStorageTransactionId;
        }

        localStorageSet("output", allOutput);
        localStorageSet("output2", $("#divOutput").html());
        localStorageSet("divCount", _divCount);
        if (commandLog != null) {
            localStorageSet("commandLog", commandLog.join(";"));
        }
        localStorageSet("nextObjectId", nextObjectId);

        // Save all object creations
        var createId = 0;
        for (var idx in createdObjects) {
            createId++;
            localStorageSet("create" + createId, createdObjects[idx]);
        }
        localStorageSet("numCreates", createId);

        // Save all object type additions
        var addTypeId = 0;
        for (var idx in addedTypes) {
            addTypeId++;
            localStorageSet("addtype" + addTypeId, addedTypes[idx]);
        }
        localStorageSet("numAddTypes", addTypeId);

        // Save all object attribute changes
        var changeId = 0;
        generateSaveLog(function (object, attribute, value) {
            var valueType = TypeOf(value);
            if (object.name == "player" && StartsWith(attribute, "currentcommand")) return;
            changeId++;
            var key = "change" + changeId;
            var storeValue = value;
            switch (valueType) {
                case "stringlist":
                    storeValue = value.length;
                    var count = 0;
                    for (var idx in value) {
                        localStorageSet(key + "_" + count, value[idx]);
                        count++;
                    }
                    break;
                case "objectlist":
                    storeValue = value.length;
                    var count = 0;
                    for (var idx in value) {
                        localStorageSet(key + "_" + count, value[idx]._js_name);
                        count++;
                    }
                    break;
                case "stringdictionary":
                case "scriptdictionary":
                    var count = 0;
                    for (var dictKey in value) {
                        localStorageSet(key + "_k" + count, dictKey);
                        localStorageSet(key + "_v" + count, value[dictKey]);
                        count++;
                    }
                    storeValue = count;
                    break;
                case "objectdictionary":
                    var count = 0;
                    for (var dictKey in value) {
                        localStorageSet(key + "_k" + count, dictKey);
                        localStorageSet(key + "_v" + count, value[dictKey]._js_name);
                        count++;
                    }
                    storeValue = count;
                    break;
                case "object":
                    storeValue = value._js_name;
                    break;
                case "null":
                    storeValue = "";
            }

            localStorageSet(key, object._js_name + "." + attribute + "=" + valueType + ":" + storeValue);
        });
        localStorageSet("numChanges", changeId);

        // Save all object destroys
        var destroyId = 0;
        for (var idx in destroyedObjects) {
            destroyId++;
            localStorageSet("destroy" + destroyId, destroyedObjects[idx]);
        }
        localStorageSet("numDestroys", destroyId);

        localStorage.setItem("transaction", localStorageTransactionId);
    }
    catch (err) {
        reportError("Failed to save game: " + err);
    }
}

function loadGame() {
    if (!localStorage) return false;

    localStorageTransactionId = localStorage.getItem("transaction");
    if (localStorageTransactionId == undefined) {
        return false;
    }
    try {
        nextObjectId = parseInt(localStorageGet("nextObjectId"));

        // Load object creations

        var commandLogList = localStorageGet("commandLog");
        if (commandLogList != null) {
            commandLog = commandLogList.split(";");
        }
        addToCommandLog("* loaded game");

        var createCount = localStorageGet("numCreates");
        for (var i = 1; i <= createCount; i++) {
            var data = localStorageGet("create" + i);
            var params = data.split(";");
            // format is name;defaultTypeObject.name;objectType
            switch (params[2]) {
                case "object":
                    var array = allObjects;
                    break;
                case "exit":
                    var array = allExits;
                    break;
                case "timer":
                    break;
                case "turnscript":
                    break;
                default:
                    throw "Unhandled create object type " + params[2];
            }
            if (params[2] == "timer") {
                createtimer(params[0]);
            }
            else if (params[2] == "turnscript") {
                createturnscript(params[0]);
            }
            else {
                createInternal(params[0], array, GetObject(params[1]), params[2]);
                // TODO: Add to objectsNameMap
                objectsNameMap[GetObject(params[0])] = GetObject(params[0]);
            }
        }

        // Load object type additions

        var addTypeCount = localStorageGet("numAddTypes");
        for (var i = 1; i <= addTypeCount; i++) {
            var data = localStorageGet("addtype" + i);
            var params = data.split(";");
            // format is object;type
            addTypeToObject(window[params[0]], window[params[1]]);
        }

        // Load object attribute changes

        var changeCount = localStorageGet("numChanges");
        for (var i = 1; i <= changeCount; i++) {
            var data = localStorageGet("change" + i);
            var dotPos = data.indexOf(".");
            var eqPos = data.indexOf("=");
            var colonPos = data.indexOf(":");
            var objectName = data.substring(0, dotPos);
            var attrName = data.substring(dotPos + 1, eqPos);
            var type = data.substring(eqPos + 1, colonPos);
            var valueString = data.substring(colonPos + 1);

            var object = window[objectName];
            var value = valueString;

            switch (type) {
                case "script":
                    eval("_temp_assignfn=" + valueString);
                    value = _temp_assignfn;
                    break;
                case "stringlist":
                    var count = parseInt(valueString);
                    value = new Array();
                    for (var listIdx = 0; listIdx < count; listIdx++) {
                        value.push(localStorageGet("change" + i + "_" + listIdx));
                    }
                    break;
                case "objectlist":
                    var count = parseInt(valueString);
                    value = new Array();
                    for (var listIdx = 0; listIdx < count; listIdx++) {
                        value.push(window[localStorageGet("change" + i + "_" + listIdx)]);
                    }
                    break;
                case "stringdictionary":
                    var count = parseInt(valueString);
                    value = new Object();
                    for (var listIdx = 0; listIdx < count; listIdx++) {
                        var dictKey = localStorageGet("change" + i + "_k" + listIdx);
                        var dictVal = localStorageGet("change" + i + "_v" + listIdx);
                        value[dictKey] = dictVal;
                    }
                    break;
                case "objectdictionary":
                    var count = parseInt(valueString);
                    value = new Object();
                    for (var listIdx = 0; listIdx < count; listIdx++) {
                        var dictKey = localStorageGet("change" + i + "_k" + listIdx);
                        var dictVal = localStorageGet("change" + i + "_v" + listIdx);
                        value[dictKey] = window[dictVal];
                    }
                    break;
                case "scriptdictionary":
                    var count = parseInt(valueString);
                    value = new Object();
                    for (var listIdx = 0; listIdx < count; listIdx++) {
                        var dictKey = localStorageGet("change" + i + "_k" + listIdx);
                        var dictVal = localStorageGet("change" + i + "_v" + listIdx);
                        eval("_temp_assignfn=" + dictVal);
                        value[dictKey] = _temp_assignfn;
                    }
                    break;
                case "object":
                    value = window[valueString];
                    break;
                case "null":
                    value = null;
                    break;
                case "int":
                    value = parseInt(valueString);
                    break;
                case "double":
                    value = parseFloat(valueString);
                    break;
                case "boolean":
                    value = (valueString == "true");
            }

            set(object, attrName, value, false);
        }

        // Load object destroys

        var destroyCount = localStorageGet("numDestroys");
        for (var i = 1; i <= destroyCount; i++) {
            var data = localStorageGet("destroy" + i);
            destroy(data);
        }
        game = GetObject("game");
        currentFont = GetObject("game").defaultfont;
        $("#fontOptions").val(currentFont);

        currentFontSize = GetObject("game").defaultfontsize.toString();
        $("#fontSize").val(currentFontSize);

        $("#fontSample").css("font-family", currentFont);
        $("#fontSample").css("font-size", currentFontSize + "pt");

        clearScreen();
        _divCount = localStorageGet("divCount");
        $("#divOutput").html(localStorageGet("output2"));
        msg(localStorageGet("output"));

        beginningOfCurrentTurnScrollPosition = $("#gameContent").height();
        scrollToEnd();

        updateLists();
        return true;
    }
    catch (err) {
        reportError("Failed to load game: " + err);
        return false;
    }
}

var localStorageTransactionId;
var lastRead;

function localStorageSet(key, value) {
    localStorage.setItem("c" + localStorageTransactionId + key, value);
}

function localStorageGet(key) {
    lastRead = key;
    return localStorage.getItem("c" + localStorageTransactionId + key);
}

var currentWalkthroughSteps;
var runningWalkthrough = false;
var stepCount;
var walkthroughMaxSteps;
var walkthroughFinishCode;

function runWalkthrough(name, startStep, maxSteps, cheatCode) {
        stepCount = 0;
        walkthroughMaxSteps = maxSteps;
    walkthroughFinishCode = cheatCode;
    var walkthrough = getElement(name);
    if (walkthrough == undefined) { var walkthrough = getElement("main"); }
    if (walkthrough) {
        currentWalkthroughSteps = addWalkthroughSteps(walkthrough);
        currentWalkthroughSteps.splice(0, startStep);
        runningWalkthrough = true;
        runWalkthroughSteps();
    }
    else {
        msg("No walkthrough of that name");
    }
}

function addWalkthroughSteps(walkthrough) {
    var list = new Array();
    if (walkthrough.parent != null) {
        list = list.concat(addWalkthroughSteps(walkthrough.parent));
    }
    list = list.concat(walkthrough.steps);
    return list;
}

var postStep = null;

function runWalkthroughSteps() {
    
    if (currentWalkthroughSteps == null || currentWalkthroughSteps.length == 0 || (walkthroughMaxSteps > 0 && stepCount >= walkthroughMaxSteps)) {
                runningWalkthrough = false;
        saveGame();
        return;
    }

    var step = currentWalkthroughSteps.splice(0, 1)[0];

    if (step == "label:" + walkthroughFinishCode) {
        runningWalkthrough = false;
        saveGame();
        return;
    }

    msg("");
    if (StartsWith(step, "assert:")) {
            }
    else if (StartsWith(step, "label:")) {
        // ignore
    }
    else {
        stepCount++;
                beginningOfCurrentTurnScrollPosition = $("#gameContent").height();
                sendCommandInternal(step);
        scrollToEndNow();
    }
    while (postStep) {
        var fn = postStep;
        postStep = null;
        fn();
    }

    setTimeout(function () {
        runWalkthroughSteps();
    }, 100);
}

function updateStatus(text) {
    if (text.length > 0) {
        showStatusVisible(true);
        $("#statusVars").html(text.replace(/\n/g, "<br/>"));
    }
    else {
        showStatusVisible(false);
    }
}

function setBackground(col) {
    $("#divOutput").css("background-color", col);
    $("#gamePanel").css("background-color", col);
}

function ASLEvent(event, parameter) {
    var fn = window[event];
    fn.apply(null, [parameter]);
}

function disableMainScrollbar() {
    $("#divOutput").css("overflow", "hidden");
}

function stopTimer() {
    clearInterval(tmrTick);
}

function getTickCountAndStopTimer() {
    stopTimer();
    return tickCount;
}

function goUrl(href) {
    window.open(href);
}

function setCompassDirections(directions) {
    if (typeof directions === "string") {
        _compassDirs = directions.split(";")
    } else {
        _compassDirs = directions;
    }
    $("#cmdCompassNW").attr("title", _compassDirs[0]);
    $("#cmdCompassN").attr("title", _compassDirs[1]);
    $("#cmdCompassNE").attr("title", _compassDirs[2]);
    $("#cmdCompassW").attr("title", _compassDirs[3]);
    $("#cmdCompassE").attr("title", _compassDirs[4]);
    $("#cmdCompassSW").attr("title", _compassDirs[5]);
    $("#cmdCompassS").attr("title", _compassDirs[6]);
    $("#cmdCompassSE").attr("title", _compassDirs[7]);
    $("#cmdCompassU").attr("title", _compassDirs[8]);
    $("#cmdCompassD").attr("title", _compassDirs[9]);
    $("#cmdCompassIn").attr("title", _compassDirs[10]);
    $("#cmdCompassOut").attr("title", _compassDirs[11]);
}

function setInterfaceString(name, text) {
    switch (name) {
        case "InventoryLabel":
            $("#inventoryLabel").html(text);
            break;
        case "PlacesObjectsLabel":
            $("#placesObjectsLabel").html(text);
            break;
        case "CompassLabel":
            $("#compassLabel").html(text);
            break;
        case "InButtonLabel":
            $("#cmdCompassIn").attr("value", text);
            break;
        case "OutButtonLabel":
            $("#cmdCompassOut").attr("value", text);
            break;
        case "EmptyListLabel":
            break;
        case "NothingSelectedLabel":
            break;
    }
}

function updateVerbButtons(list, verbsArray, idprefix) {
    var selectedIndex = list.prop("selectedIndex");
    var verbs = verbsArray[selectedIndex].split("/");
    var count = 1;
    $.each(verbs, function () {
        var target = $("#" + idprefix + count);
        target.attr("value", this);
        target.show();
        count++;
    });
    for (var i = count; i <= verbButtonCount; i++) {
        var target = $("#" + idprefix + i);
        target.hide();
    }
}
var _currentDiv = null;

function setCommandBarStyle(style) {
    var width = $("#txtCommand").width();
    $("#txtCommand").attr("style", style);
    $("#txtCommand").width(width);
}

var transcriptArr = [];
function addText(text) {
    if (_currentDiv == null) {
        createNewDiv("left");
    }
	transcriptArr.push(text + '\n');
    _currentDiv.append(text);
    scrollToEnd();
}


var _divCount = 0;

function createNewDiv(alignment) {
    var classes = _outputSections.join(" ");
    _divCount++;
    $("<div/>", {
        id: "divOutputAlign" + _divCount,
        style: "text-align: " + alignment,
        "class": classes
    }).appendTo("#divOutput");
    setCurrentDiv("#divOutputAlign" + _divCount);
}

var _currentDiv = null;

function getCurrentDiv() {
    if (_currentDiv) return _currentDiv;

    var divId = $("#outputData").attr("data-currentdiv");
    if (divId) {
        _currentDiv = $(divId);
        return _currentDiv;
    }

    return null;
}

function setCurrentDiv(div) {
    _currentDiv = $(div);
    $("#outputData").attr("data-currentdiv", div);
}

var _divCount = -1;

function getDivCount() {
    return _divCount;
}

function setDivCount(count) {
    _divCount = count;
    $("#outputData").attr("data-divcount", _divCount);
}

function bindMenu(linkid, verbs, text, inline) {
    var verbsList = verbs.split("/");

    var options = [];
    $.each(verbsList, function (key, value) {
        options = options.concat({ title: value, action: { type: "fn", callback: "doMenuClick('" + value.toLowerCase() + " " + text.replace("'", "\\'") + "');" } });
    });

    $("#" + linkid).jjmenu("both", options, {}, { show: "fadeIn", speed: 100, xposition: "left", yposition: "auto", "orientation": "auto" });
}

function doMenuClick(command) {
    $("div[id^=jjmenu]").remove();
    sendCommand(command);
}

function updateObjectLinks(data) {
    $(".elementmenu").each(function (index, e) {
        var $e = $(e);
        var verbs = data[$e.data("elementid")];
        if (verbs) {
            $e.removeClass("disabled");
            $e.data("verbs", verbs);
            // also set attribute so verbs are persisted to savegame
            $e.attr("data-verbs", verbs);
        } else {
            $e.addClass("disabled");
        }
		var verbs = $(this).attr('data-verbs');
		var linkid = $(this).attr('id');
		var text = $(this).html();
		var inline = false;
		bindMenu(linkid, verbs, text, inline);
    });
}

function updateExitLinks(data) {
    $(".exitlink").each(function (index, e) {
        var $e = $(e);
        var exitid = $e.data("elementid");
        var available = $.inArray(exitid, data) > -1;
        if (available) {
            $e.removeClass("disabled");
        } else {
            $e.addClass("disabled");
        }
    });
}

function updateCommandLinks(data) {
    $(".commandlink").each(function (index, e) {
        var $e = $(e);
        var exitid = $e.data("elementid");
        var available = $.inArray(exitid, data) > -1;
        if (available) {
            $e.removeClass("disabled");
        } else {
            $e.addClass("disabled");
        }
    });
}

function disableAllCommandLinks() {
    $(".commandlink").each(function (index, e) {
        $(e).addClass("disabled");
		$(e).href('');
    });
}

function clearScreen() {
    allOutput = "";
    $("#divOutput").css("min-height", 0);
    $("#divOutput").html("");
    createNewDiv("left");
    beginningOfCurrentTurnScrollPosition = 0;
    setTimeout(function () {
        $("html,body").scrollTop(0);
    }, 100);
}

function keyPressCode(e) {
    var keynum
    if (window.event) {
        keynum = e.keyCode
    } else if (e.which) {
        keynum = e.which
    }
    return keynum;
}

function AddYouTube(id) {
    var embedHTML = "<object width=\"425\" height=\"344\"><param name=\"movie\" value=\"http://www.youtube.com/v/" + id + "\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/" + id + "\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"425\" height=\"344\"></embed></object>";
    addText(embedHTML);
}

function AddVimeo(id) {
    var embedHTML = "<object width=\"400\" height=\"225\"><param name=\"allowfullscreen\" value=\"true\" /><param name=\"allowscriptaccess\" value=\"always\" /><param name=\"movie\" value=\"http://vimeo.com/moogaloop.swf?clip_id=" + id + "&amp;server=vimeo.com&amp;show_title=0&amp;show_byline=0&amp;show_portrait=0&amp;color=00adef&amp;fullscreen=1&amp;autoplay=0&amp;loop=0\" /><embed src=\"http://vimeo.com/moogaloop.swf?clip_id=" + id + "&amp;server=vimeo.com&amp;show_title=0&amp;show_byline=0&amp;show_portrait=0&amp;color=00adef&amp;fullscreen=1&amp;autoplay=0&amp;loop=0\" type=\"application/x-shockwave-flash\" allowfullscreen=\"true\" allowscriptaccess=\"always\" width=\"400\" height=\"225\"></embed></object>";
    addText(embedHTML);
}

function SetMenuBackground(color) {
    var css = getCSSRule("div.jj_menu_item");
    if (css) {
        css.style.backgroundColor = color;
    }
}

function SetMenuForeground(color) {
    var css = getCSSRule("div.jj_menu_item");
    if (css) {
        css.style.color = color;
    }
}

function SetMenuHoverBackground(color) {
    var css = getCSSRule("div.jj_menu_item_hover");
    if (css) {
        css.style.backgroundColor = color;
    }
}

function SetMenuHoverForeground(color) {
    var css = getCSSRule("div.jj_menu_item_hover");
    if (css) {
        css.style.color = color;
    }
}

function SetMenuFontName(font) {
    var css = getCSSRule("div.jjmenu");
    if (css) {
        css.style.fontFamily = font;
    }
}

function SetMenuFontSize(size) {
    // disabled
    //var css = getCSSRule("div.jjmenu");
    //if (css) {
    //    css.style.fontSize = size;
    //}
}

function TurnOffHyperlinksUnderline() {
    var css = getCSSRule("a.cmdlink");
    if (css) {
        css.style.textDecoration = "none";
    }
}

var _outputSections = new Array();

function JsStartOutputSection(name) {
    if ($.inArray(name, _outputSections) == -1) {
        _outputSections.push(name);
        createNewDiv("left");
    }
}

function JsEndOutputSection(name) {
    var index = $.inArray(name, _outputSections);
    if (index != -1) {
        _outputSections.splice(index, 1);
        createNewDiv("left");
    }
}

function JsHideOutputSection(name) {
    EndOutputSection(name);
    $("." + name + " a").attr("onclick", "");
    setTimeout(function () {
        $("." + name).hide(250, function () { $(this).remove(); });
    }, 250);
}


/*
	Modified by KV 08-13-2024, copied directly from https://github.com/textadventures/quest/blob/63f159054e088a40b3b22ed1954392c4d3cb9974/WebPlayer/playercore.js#L1031C1-L1073C2
*/

function getCSSRule(ruleName, deleteFlag) {
    ruleName = ruleName.toLowerCase();
    if (document.styleSheets) {
        for (var i = 0; i < document.styleSheets.length; i++) {
            var styleSheet = document.styleSheets[i];
            var ii = 0;
            var cssRule = false;
            try {
                do {
                    if (styleSheet.cssRules) {
                        cssRule = styleSheet.cssRules[ii];
                    } else if (styleSheet.rules) {
                        cssRule = styleSheet.rules[ii];
                    }
                    if (cssRule) {
                        if (typeof cssRule.selectorText != "undefined") {
                            if (cssRule.selectorText.toLowerCase() == ruleName) {
                                if (deleteFlag == 'delete') {
                                    if (styleSheet.cssRules) {
                                        styleSheet.deleteRule(ii);
                                    } else {
                                        styleSheet.removeRule(ii);
                                    }
                                    return true;
                                } else {
                                    return cssRule;
                                }
                            }
                        }
                    }
                    ii++;
                } while (cssRule)
            } catch (e) {
                // Firefox throws a SecurityError if you try reading
                // a cross-domain stylesheet
                if (e.name !== "SecurityError") {
                    throw e;
                }
            }
        }
    }
    return false;
}

function killCSSRule(ruleName) {
    return getCSSRule(ruleName, 'delete');
}

function addCSSRule(ruleName) {
    if (document.styleSheets) {
        if (!getCSSRule(ruleName)) {
            if (document.styleSheets[0].addRule) {
                document.styleSheets[0].addRule(ruleName, null, 0);
            } else {
                document.styleSheets[0].insertRule(ruleName + ' { }', 0);
            }
        }
    }
    return getCSSRule(ruleName);
}

function uiDoRestart() {
    if (localStorage) {
        localStorage.clear();
    }
    $("input#txtCommand").val("");
    window.location.reload();
}

function reportError(errorMessage) {
    alert(errorMessage);
    console.log(errorMessage);
}

// WORLDMODEL ===================================================================================================================

var webPlayer = true;
var tmrTick = null;
var awaitingCallback = false;
var gameRunning = true;
var gameActive = true;

function worldmodelInitialise() {
    resolveObjectReferences();
    GetObject("game").timeelapsed = 0;
    for (var idx in allTimers) {
        var timer = allTimers[idx];
        if (timer.enabled) {
            timer.trigger = timer.interval;
        }
    }
    setObjectChildAttributes();
    if (typeof InitInterface == 'function') {
        InitInterface();
    }
    updateLists();
    tmrTick = setInterval(function () {
        timerTick();
    }, 1000);
}

function worldModelBeginGame() {
    StartGame();
    TryRunOnReadyScripts();
    updateLists();
    $("input#txtCommand").focus();
}

function resolveObjectReferences() {
    for (var item in objectReferences) {
        var objData = objectReferences[item];
        window[objData[0]][objData[1]] = window[objData[2]];
    }
    for (var item in objectListReferences) {
        var objData = objectListReferences[item];
        var parent = window[objData[0]];
        if (parent == undefined) { parent = GetObject("game"); }
        var attribute = objData[1].replace(/ /g, "___SPACE___");
        var itemValue = objData[2];
        if (typeof parent[attribute] == "undefined") {
            parent[attribute] = new Array();
        }
        parent[attribute].push(window[itemValue]);
    }
    for (var item in objectDictionaryReferences) {
        var objData = objectDictionaryReferences[item];
        if (parent == undefined) { parent = GetObject("game"); }
        var parent = window[objData[0]];
        var attribute = objData[1].replace(/ /g, "___SPACE___");
        var itemKey = objData[2];
        var itemValue = objData[3];
        if (typeof parent[attribute] == "undefined") {
            parent[attribute] = new Object();
        }
        parent[attribute][itemKey] = window[itemValue];
    }
}

function setObjectChildAttributes() {
    for (var idx in allObjects) {
        var obj = allObjects[idx];
        if (obj.parent) {
            addChildObject(obj.parent, obj);
        }
    }
}

function addChildObject(parent, child) {
    if (!parent["_children"]) {
        parent["_children"] = new Array();
    }
    parent["_children"].push(child);
}

function updateLists() {
    setTimeout(function () {
        updateListsInternal();
    }, 1000);
}

function updateListsInternal() {
    updateObjectsLists();
    updateExitsList();
    if (typeof UpdateStatusAttributes == "function") {
        UpdateStatusAttributes();
    }
}

function updateObjectsLists() {
    updateObjectsList("GetPlacesObjectsList", "placesobjects");
    updateObjectsList("ScopeInventory", "inventory");
}

/* function updateObjectsList(scope, listName) {
    var listItems = window[scope]();
    if (scope == "GetPlacesObjectsList") {
        listItems = listItems.concat(ScopeExits());
    }
    var listData = new Array();
    for (var item in listItems) {
        var verbs = (listName == "inventory") ? listItems[item].inventoryverbs : listItems[item].displayverbs;
        if (verbs != undefined) {
            var verbsList = verbs.join("/");
        }
        else {
            var verbsList = "";
        }
        listData.push(GetDisplayAlias(listItems[item]) + ":" + verbsList);
    }
    updateList(listName, listData);
} */

function updateObjectsList(scope, listName) {
    var listItems = window[scope]();
    if (scope == "GetPlacesObjectsList") {
        listItems = listItems.concat(ScopeExits());
    }
    var listData = new Array();
    for (var item in listItems) {
        var verbs = GetDisplayVerbs(listItems[item]);
        if (verbs != undefined) {
            var verbsList = verbs.join("/");
        }
        else {
            var verbsList = "";
        }
        listData.push(GetDisplayAlias(listItems[item]) + ":" + verbsList);
    }
    updateList(listName, listData);
}

function updateExitsList() {
    var listItems = ScopeExits();
    var listData = new Array();
    for (var item in listItems) {
        listData.push(listItems[item].alias);
    }
    updateCompass(listData);
}

function attributeChanged(object, attribute, runscript) {
    // TO DO: "Meta" field SortIndex - changed when object moves to a new parent, so it appears at the end of the list
    // of children.
    markAttributeModified(object, attribute);
    if (runscript) {
        var changedScript = "changed" + attribute;
        if (typeof object[changedScript] == "function") {
            object[changedScript]();
        }
    }
}

var nextObjectId = 0;

function getUniqueId() {
    nextObjectId++;
    return "dynid" + nextObjectId;
}

var transactions = new Array();
var currentTransaction;

function preAttributeChange(object, attribute, newValue) {
    if (currentTransaction != undefined) {
        // store the old value on the undo list
        var oldValue = object[attribute];
        var undoFunction;
        if (attribute == "parent") {
            undoFunction = function () {
                newValue = object[attribute];
                object[attribute] = oldValue;
                objectMoved(object, newValue, oldValue);
            };
        }
        else {
            undoFunction = function () {
                object[attribute] = oldValue;
            };
        }

        currentTransaction.undolist.push(undoFunction);
    }

    var type = TypeOf(newValue);

    // if value requires cloning first then return a clone
    if (type == "stringdictionary" || type == "objectdictionary" || type == "scriptdictionary") {
        var result = new Object();
        for (key in newValue) {
            result[key] = newValue[key];
        }
        return result;
    }
    else if (type == "objectlist" || type == "stringlist") {
        var result = new Array();
        for (idx in newValue) {
            result.push(newValue[idx]);
        }
        return result;
    }

    return newValue;
}

function markAttributeModified(object, attribute) {
    if (object["__modified"] == undefined) {
        object["__modified"] = new Array();
    }
    if (object["__modified"].indexOf(attribute) == -1) {
        object["__modified"].push(attribute);
    }
}

var thisTurnModifiedItems = new Array();

function markModified(item) {
    if (thisTurnModifiedItems.indexOf(item) == -1) {
        thisTurnModifiedItems.push(item);
    }
}

// Javascript magic to support function overloading
// from http://ejohn.org/blog/javascript-method-overloading/
// addMethod - By John Resig (MIT Licensed)

function addMethod(object, name, fn) {
    var old = object[name];
    object[name] = function () {
        if (fn.length == arguments.length)
            return fn.apply(this, arguments);
        else if (typeof old == 'function')
            return old.apply(this, arguments);
    };
}

// Script commands

var objectTag = new XRegExp("\<object (id='(.*?)' )?verbs='(?<verbs>.*?)'\>(?<text>.*?)\<\/object\>");
var colorTag = /\<color color="(.*?)"\>(.*?)\<\/color\>/;
var commandTag = /\<command input="(.*?)"\>(.*?)\<\/command\>/;
var alignTag = /\<align align="(.*?)"\>(.*?)\<\/align\>/;
var fontTag = /\<font size="(.*?)"\>(.*?)\<\/font\>/;
var currentFont = "";
var currentFontSize = "";
var currentForeground = "";
var currentLinkForeground = "";
var nextID = 1;
var allOutput = "";

function msg(text) {
    //%%MIN V540
    OutputText(text);
    //%%END MIN V540

    }

function listadd(list, item) {
    if (currentTransaction != undefined) {
        var undoFunction = function () {
            list.splice(list.length - 1, 1);
        }
        currentTransaction.undolist.push(undoFunction);
    }
    list.push(item);
    markModified(list);
}

function listremove(list, item) {
    if (!Array.isArray(list)) { console.log ("List does not exist."); return; }; /* this line altered by KV 20240803 */
    var index = list.indexOf(item);
    if (index != -1) {
        if (currentTransaction != undefined) {
            var undoFunction = function () {
                listadd(list, item);
            }
            currentTransaction.undolist.push(undoFunction);
        }

        list.splice(index, 1);
    }
    markModified(list);
}

function dictionaryadd(dictionary, key, item) {
    if (currentTransaction != undefined) {
        var oldValue = dictionary[key];
        if (oldValue != undefined) {
            var undoFunction = function () {
                dictionary[key] = oldValue;
            }
        }
        else {
            var undoFunction = function () {
                delete dictionary[key];
            }
        }
        currentTransaction.undolist.push(undoFunction);
    }
    dictionary[key] = item;
    markModified(dictionary);
}

function dictionaryremove(dictionary, key) {
    if (currentTransaction != undefined) {
        var oldValue = dictionary[key];
        var undoFunction = function () {
            dictionary[key] = oldValue;
        }
        currentTransaction.undolist.push(undoFunction);
    }
    delete dictionary[key];
    markModified(dictionary);
}



function request(requestType, data) {
    switch (requestType) {
        case "UpdateLocation":
            updateLocation(data);
            break;
        case "SetStatus":
            updateStatus(data);
            break;
        case "SetInterfaceString":
            var splitString = data.split("=");
            var element = splitString[0];
            var string = splitString[1];
            setInterfaceString(element, string);
            break;
        case "SetCompassDirections":
            setCompassDirections(data.split(";"));
            break;
        case "Show":
            uiShow(requestShowHide_GetElement(data));
            break;
        case "Hide":
            uiHide(requestShowHide_GetElement(data));
            break;
        case "Foreground":
            currentForeground = data;
            break;
        case "Background":
            setBackground(data);
            break;
        case "LinkForeground":
            currentLinkForeground = data;
            break;
        case "FontName":
            currentFont = data;
            break;
        case "FontSize":
            currentFontSize = data;
            break;
        case "ClearScreen":
            clearScreen();
            break;
        case "SetPanelContents":
            setPanelContents(data);
            break;
        case "Log":
		    console.log(data);
            break;
        case "Speak":
            break;
        case "RestartGame":
            uiDoRestart();
            break;
        case "RequestSave":
            msg("This game automatically saves after each successful turn.");
            break;
        default:
            throw "Request not supported: " + requestType + "; " + data;
    }
}


function requestShowHide_GetElement(element) {
    switch (element) {
        case "Panes":
            return "#gamePanes";
        case "Location":
            return "#location";
        case "Command":
            return "#divCommand";
        default:
            return "";
    }
}

function setPanelHeight() {
    setTimeout(function () {
        var height = $("#gamePanel").height();
        if ($("#gamePanel").html() == "") {
            // workaround for IE weirdness where an empty div has height
            height = 0;
            $("#gamePanel").hide();
        }
        else {
            $("#gamePanel").show();
        }
        $("#gamePanelSpacer").height(height);
        scrollToEnd();
    }, 100);
}

function setPanelContents(html) {
    $("#gamePanel").html(html);
    setPanelHeight();
}

function starttransaction(command) {
    var previousTransaction = currentTransaction;
    currentTransaction = new Object();
    transactions.push(currentTransaction);
    currentTransaction.undolist = new Array();
    currentTransaction.previous = previousTransaction;
    currentTransaction.command = command;
}

function undo() {
    if (currentTransaction) {
        var transactionToUndo = currentTransaction;
        if (dynamicTemplates["UndoTurn"]) {
            msg(overloadedFunctions.DynamicTemplate("UndoTurn", transactionToUndo.command));
        }
        else {
            msg("Undo: " + transactionToUndo.command);
        }
        currentTransaction = undefined;
        transactionToUndo.undolist.reverse();
        for (idx in transactionToUndo.undolist) {
            var fn = transactionToUndo.undolist[idx];
            fn();
        }
        currentTransaction = transactionToUndo.previous;
    }
    else {
        if (templates["NothingToUndo"]) {
            msg(templates["NothingToUndo"]);
        }
        else {
            msg("Nothing to undo");
        }
    }
}

function runscriptattribute2(object, attribute) {
    var fn = GetAttribute(object, attribute);
    fn.call(object, attribute);
}

/*
function runscriptattribute3(object, attribute, parameters) {
	if (attribute === "scopebackdrop"){
		game.scopebackdropitems = parameters.items;
	}
    var fn = GetAttribute(object, attribute);
    fn.call(object, parameters);
}
*/

function runscriptattribute3(object, attribute, parameters) { /* scopebackdrop fix */
	if (attribute === "scopebackdrop"){
		game.scopebackdropitems = parameters.items;
	}
	//clog ("runscriptattribute3 parameters:");
	//clog (parameters);
    var fn = GetAttribute(object, attribute);
    fn.call(object, parameters);
}

/*
function invoke(script, parameters) {
    if (parameters) {
        if (parameters["this"]) {
            script.apply(parameters["this"], [parameters]);
        } else if (parameters["section"]) {
            script.apply(null, [parameters["section"], parameters["data"]]);
        } else if (parameters["result"]) {
            script.apply(null, [parameters["result"]], parameters);
        } else {
            console.log("invoke is blindly sending 'parameters'");
            console.log(parameters);
            script.apply(null, parameters);
        }
    } else {
        script();
    }
}
*/

function invoke(script, parameters) { 
/* Fix for Quest 5.8.0 Build 5.8.7753.35198 */
    /*var clog = console.log;
	clog("invoke script:");
	clog(script.toString());
	if (script.toString() === 'function() { set(_obj311, "textprocessorcommandresult", ProcessTextCommand_Popup (section, data)); }'){
		clog("IT'S POPUP!");
	}*/
	if (parameters) {
		/*clog("invoke parameters:");
		clog(parameters);
		clog("Doing forEach..");
		function findParams(key){
			clog("key:");
			clog(key);
			clog("parameters[key]");
			clog(parameters[key]);
		}
		Object.keys(parameters).forEach(findParams);*/
        if (parameters["this"]) {
            script.apply(parameters["this"], [parameters]);
        } else if (parameters["section"]) {
			var sectionVar = parameters["section"];
			var dataVar = parameters["data"];
            script.apply(section = sectionVar, data=dataVar);
        } else if (parameters["result"]) {
            script.apply(null, [parameters["result"]], parameters);
        } else {
            console.log("invoke is blindly sending 'parameters':");
            console.log(parameters);
            script.apply(null, parameters);
        }
    } else {
        script();
    }
}

function error(message) {
    throw message;
}

function set(object, attribute, value, runscript) {
    if (runscript === undefined) {
        runscript = true;
    }
    attribute = attribute.replace(/ /g, "___SPACE___");
    var changed = (object[attribute] != value);

    value = preAttributeChange(object, attribute, value);

    if (attribute == "parent") {
        var oldParent = object[attribute];
    }

    object[attribute] = value;

    if (changed) {
        if (attribute == "parent") {
            objectMoved(object, oldParent, value);
        }

        attributeChanged(object, attribute, runscript);
    }
}

// modded to run onexit scripts
function objectMoved(object, oldParent, newParent) {
    if (object.elementtype == "object" && object.type == "object") {
        if (oldParent) {
            var idx = oldParent["_children"].indexOf(object);
            if (idx == -1) {
                throw "Object wasn't in room!";
            }
            oldParent["_children"].splice(idx, 1);
            if (object == GetObject("game").pov) {
                if (HasAttribute(oldParent, "onexit")) {
                    runscriptattribute2(oldParent, "onexit");
                    //console.log("RUNNING");
                }
            }
        }
        if (newParent) {
            if (!newParent["_children"]) {
                newParent["_children"] = new Array();
            }
            newParent["_children"].push(object);
        }
    }
}

var menuOptions;
var menuCallback;
var finishTurnAfterSelection;

function showmenu_async(title, options, allowCancel, callback) {
    showmenu_async_internal(title, options, allowCancel, callback, true);
}

function showmenu_async_internal(title, options, allowCancel, callback, finishTurn) {
    menuOptions = options;
    menuCallback = callback;
    awaitingCallback = true;
    finishTurnAfterSelection = finishTurn;

    if (runningWalkthrough) {
        var step = currentWalkthroughSteps.splice(0, 1);
        var response = step[0];
        if (response.substring(0, 5) == "menu:") {
            var selection = response.substring(5);
            var selectionKey = "";
            for (var option in options) {
                msg(options[option]);
                if (options[option] == selection) {
                    selectionKey = option;
                }
            }
            if (selectionKey.length == 0) {
                msg("Error running walkthrough - menu response was not present in menu");
            }
            else {
                postStep = function () {
                    msg(" - " + selection);
                    SetMenuSelection(selectionKey);
                };
            }
        }
        else {
            msg("Error running walkthrough - expected menu response");
        }
    }
    else {
        showMenu(title, options, allowCancel);
    }
}

function ask(question, callback) {
    if (runningWalkthrough) {
        var step = currentWalkthroughSteps.splice(0, 1);
        var response = step[0];
        if (response.substring(0, 7) == "answer:") {
            awaitingCallback = true;
            postStep = function () {
                awaitingCallback = false;
                callback(response.substring(7) == "yes");
                TryFinishTurn();
            };
        }
        else {
            msg("Error running walkthrough - expected ask response");
        }
    }
    else {
        var result = confirm(question);
        callback(result);
        TryFinishTurn();
    }
}

var waitCallback;

function wait_async(callback) {
    waitCallback = callback;
    awaitingCallback = true;
    beginWait();
}

var getinputCallback;
var awaitingInputCallback = false;

function getinput_async(callback) {
    getinputCallback = callback;
    awaitingCallback = true;
    awaitingInputCallback = true;
}

function create(name) {
    createInternal(name, allObjects, GetObject("defaultobject"), "object");
}
function create_withtype(name, type) {
    createInternal(name, allObjects, GetObject("defaultobject"), "object");
    addTypeToObject(GetObject(name), GetObject(type))
}
function ShallowClone(name) {
    // The 'name' variable is actually an object.
    if (!name) return false;
    //console.log(name);
    // Declare this as false, assuming the object has no child objects. 
    var hasKids = false;
    // Declare this for any children while cloning
    var protos = [];
    // Declare this for any clones of children
    var newkids = [];
    // QuestJS has a '_children' attribute which points to the object's child objects
    if (HasAttribute(name, "_children")) {
        //console.log(name.name + " has child objects"); // Let me know what's going on!
        if (GetDirectChildren(name).length > 0) {
            hasKids = true;
            // There are children, so point this array to that attribute
            protos = name["_children"];
            // Back it up again, just to be safe
            //name.kidsBak = name["_children"];
            // Clear it out, to avoid recursion errors while setting the clone's attributes
            name["_children"] = [];
            // Move children to game object while cloning
            //protos.forEach(function (o) {
                //MoveObject(o, GetObject("game"));
            //});
        }
    }
    //console.log("STILL GOING"); // This is just to make sure something hasn't gone wrong!
    //console.log(name.name);
    // This is how QuestJS avoids duplicate object names.
    var clonename = GetUniqueElementName(name.name).replace(/dynid/, "");
    // And we finally create a blank object
    create(clonename);
    // Just like Quest, we must declare a variable which points to the actual object
    var newObject = GetObject(clonename);
    //console.log(newObject);  // Just to make sure things are in order
    // Get all the attribute names of the prototype
    var atts = GetAttributeNames(name);
    for (var att in name) {
        //console.log(att);  // Just to see what is going on!
        // Make sure the attribute exists
        if (name != undefined && att != undefined && name[att] != undefined) {
            // Make sure the attribute isn't either of the names
            if (att != 'name' && att != '_js_name') {
                //console.log(name[att]);  // Just to see what is going on!
                // Copy the attribute from the prototype to the clone
                set(newObject, att, name[att]);
            }
        }
    }
    //console.log(newObject.name+" is set up!");  // Just to see what is going on!
    if (hasKids) {
        // Move children back to the prototype
        protos.forEach(function (o) {
            MoveObject(o, name);
        });
        // We had child objects in the prototype, so we need to clone them and move them into the main clone
        for (var kid in protos) {
            var nclone = CloneObjectAndMove(protos[kid], newObject);
            //console.log(nclone);
        }
        // Set the prototype's attribute back to it's original state
        //name["_children"] = name.kidsBak;
        // Delete the backup attribute
        //name.kidsBak = null;
    }
    return newObject;
}


function ObjectListSort(list) {
    return list.sort();
}

function IsInt(data) {
    return (/^\d+$/.test(data));
}

function Chr(data) {
    return String.fromCharCode(data);
}
function Asc(data) {
    return data.charCodeAt(0);
}

function createexit(name, from, to) {
    var newExit = createInternal(getUniqueId(), allExits, GetObject("defaultexit"), "exit");
    set(newExit, "alias", name);
    set(newExit, "parent", from);
    set(newExit, "to", to);
    return newExit;
}

function createexit_withtype(name, from, to, type) {
    var newExit = createexit(name, from, to);
    if (type) {
        addTypeToObject(newExit, type);
    }
}

function createtimer(name) {
    createdObjects.push(name + ";;timer");

    if (currentTransaction != undefined) {
        var undoFunction = function () {
            destroy(name);
        }
        currentTransaction.undolist.push(undoFunction);
    }

    newObject = new Object();
    // TODO: Add to object map
    window["object_" + name] = newObject;
    allTimers.push(newObject);
    newObject.elementtype = "timer";
    newObject.name = name;
    newObject["_js_name"] = name;
    return newObject;
}

function createturnscript(name) {
    return createInternal(name, allTurnScripts, "defaultturnscript", "turnscript");
}

var createdObjects = new Array();

function createInternal(name, array, defaultTypeObject, objectType) {

    createdObjects.push(name + ";" + defaultTypeObject.name + ";" + objectType);

    if (currentTransaction != undefined) {
        var undoFunction = function () {
            destroy(name);
        }
        currentTransaction.undolist.push(undoFunction);
    }

    newObject = new Object();
    window[name] = newObject;
    objectsNameMap[name] = newObject;
    elementsNameMap[name] = newObject;
    array.push(newObject);
    newObject.elementtype = "object";
    newObject.name = name;
    newObject["_js_name"] = name;
    newObject.type = objectType;
    addTypeToObject_NoLog(newObject, defaultTypeObject);
    return newObject;
}

var addedTypes = new Array();

function addTypeToObject(object, type) {
    addedTypes.push(object.name + ";" + type.name);
    addTypeToObject_NoLog(object, type);
}

function addTypeToObject_NoLog(object, type) {
    if (type != undefined) {
        for (var attribute in type) {
            if (object[attribute] == undefined) {
                object[attribute] = type[attribute];
            }
        }
    }
}

var destroyedObjects = new Array();

function destroy(name) {
    MoveObject(GetObject(name), GetObject("game"));
    destroyedObjects.push(name);
    destroyObject(GetObject(name));
}

function destroyObject(object) {
    var childObjects = new Array();
    for (var idx in allObjects) {
        var thisObject = allObjects[idx];
        if (thisObject.parent == object) {
            childObjects.push(thisObject);
        }
    }
    for (var childObject in childObjects) {
        destroyObject(childObjects[childObject]);
    }
    destroyObject_removeFromArray(object, allObjects);
    destroyObject_removeFromArray(object, allExits);
    destroyObject_removeFromArray(object, allCommands);
    destroyObject_removeFromArray(object, allTurnScripts);

    if (currentTransaction != undefined) {
        var undoFunction = function () {
            delete object["__destroyed"];
        }
        currentTransaction.undolist.push(undoFunction);
    }
    object["__destroyed"] = true;
}

function destroyObject_removeFromArray(object, array) {
    var removeIdx = $.inArray(object, array);
    if (removeIdx != -1) {
        if (currentTransaction != undefined) {
            var undoFunction = function () {
                array.push(object);
            }
            currentTransaction.undolist.push(undoFunction);
        }
        array.splice(removeIdx, 1);
    }
}

function insertHtml(filename) {
    addText(embeddedHtml[filename]);
}

function picture(filename) {
    msg("<img src=\"" + filename + "\" onload=\"scrollToEnd();\" /><br />");
}

function playsound(file, wait, loop) {
    // TO DO: support wav format
    playMp3(file, wait, loop);
}

function stopsound() {
    stopAudio();
}

function pauseEvent() {
    gameActive = false;
}

function resumeEvent() {
    gameActive = true;
}

function timerTick() {
    if (!gameRunning) return;
    if (!gameActive) return;
    var tickCount = GetObject("game").timeelapsed + 1;
    set(GetObject("game"), "timeelapsed", tickCount);
    var scriptRan = false;
    for (var idx in allTimers) {
        var timer = allTimers[idx];
        if (timer.enabled) {
            if (tickCount >= timer.trigger) {
                set(timer, "trigger", timer.trigger + timer.interval);
                timer.script();
                scriptRan = true;
            }
        }
    }
    if (scriptRan) {
        saveGame();
        updateLists();
    }
}

function finish() {
    gameRunning = false;
    if (localStorage) {
        localStorage.clear();
    }
    $("#divCommand").hide();
}

var onReadyCallback = null;

function on_ready(callback) {
    if (!awaitingCallback) {
        callback();
    }
    else {
        onReadyCallback = callback;
    }
}

function getElement(name) {
    return elementsNameMap[name];
}

function setGameWidth(size) {
    $("#gameContent").width(size+"px");
}

function setGamePadding() {
}

function hideBorder() {
}

// Functions

function NewObjectList() {
    return new Array();
}

function NewStringList() {
    return new Array();
}

function NewDictionary() {
    return new Object();
}

function NewObjectDictionary() {
    return new Object();
}

function NewStringDictionary() {
    return new Object();
}

function ToString(value) {
    return value.toString();
}

function ToInt(value) {
    return parseInt(value);
}

function ToDouble(value) {
    return parseFloat(value);
}

function Join(array, separator) {
    return array.join(separator);
}

function Split(input, delimiter) {
    return input.split(delimiter);
}

function Trim(input) {
    return $.trim(input);
}

function LengthOf(input) {
    if (input == null) return 0;
    return input.length;
}

function StartsWith(input, text) {
    return input.indexOf(text) == 0;
}

function EndsWith(input, text) {
    return input.endsWith(text);
}


function LCase(text) {
    return text.toLowerCase();
}

function UCase(text) {
    return text.toUpperCase();
}

function CapFirst(text) {
    return text.substring(0, 1).toUpperCase() + text.substring(1);
}

function Left(text, count) {
    return text.substring(0, count);
}

function Right(text, count) {
    return text.substring(text.length - count - 1);
}

function Mid(text, start, count) {
    return text.substr(start - 1, count);
}

function Instr(p1, p2, p3) {
    var input, search;
    if (p3 === undefined) {
        input = p1;
        search = p2;
        return input.indexOf(search) + 1;
    } else {
        var start = p1;
        input = p2;
        search = p3;
        return input.indexOf(search, start - 1) + 1;
    }
}

function Replace(input, text, newText) {
    return input.split(text).join(newText);
}

var regexCache = new Object();

function getRegex(regexString, cacheID) {
    var result = regexCache[cacheID];
    if (result) {
        return result;
    }
    result = new XRegExp(regexString, "i");
    regexCache[cacheID] = result;
    return result;
}

function IsRegexMatch(regexString, input, cacheID) {
    var regex = getRegex(regexString, cacheID);
    return regex.test(input);
}

function GetMatchStrength(regexString, input, cacheID) {
    var regex = getRegex(regexString, cacheID);
    var lengthOfTextMatchedByGroups = 0;
    var matches = regex.exec(input);
    var namedGroups = GetRegexNamedGroups(matches);
    for (var groupIdx in namedGroups) {
        if (matches[namedGroups[groupIdx]] != undefined) {
            lengthOfTextMatchedByGroups += matches[namedGroups[groupIdx]].length;
        }
    }
    return input.length - lengthOfTextMatchedByGroups;
}

function Populate(regexString, input, cacheID) {
    var regex = getRegex(regexString, cacheID);
    var matches = regex.exec(input);
    var result = new Object();
    var namedGroups = GetRegexNamedGroups(matches);
    for (var groupIdx in namedGroups) {
        if (matches[namedGroups[groupIdx]] != undefined) {
            var varName = namedGroups[groupIdx];
            var mapIndex = varName.indexOf("_map_");
            if (mapIndex != -1) {
                varName = varName.substring(mapIndex + 5);
            }
            result[varName] = matches[namedGroups[groupIdx]];
        }
    }
    return result;
}

function GetRegexNamedGroups(matches) {
    var result = new Array();
    //console.log("Matches:", matches);

    // Handle the case when matches is an array
    if (Array.isArray(matches)) {
        for (var i = 0; i < matches.length; i++) {
            var prop = matches[i];
            if (prop !== undefined) {
                //console.log("Checking array element:", prop);
                if (StartsWith(prop, "object") || 
                    prop.indexOf("_map_object") !== -1 || 
                    StartsWith(prop, "text") || 
                    prop.indexOf("_map_text") !== -1 || 
                    StartsWith(prop, "exit") || 
                    prop.indexOf("_map_exit") !== -1 || 
                    StartsWith(prop, "before") || 
                    StartsWith(prop, "padding") || 
                    StartsWith(prop, "sep") || 
                    StartsWith(prop, "places") || 
                    StartsWith(prop, "after")) {
                    result.push(prop);
                    //console.log("Array element added:", prop);
                }
            } else {
                //console.log("Array element is undefined.");
            }
        }
    }

    // Handle the case when matches is an object
    if (typeof matches === 'object') {
        for (var prop in matches) {
            if (matches.hasOwnProperty(prop) && matches[prop] !== undefined) {
                //console.log("Checking object property:", prop);
                if (StartsWith(prop, "object") || 
                    prop.indexOf("_map_object") !== -1 || 
                    StartsWith(prop, "text") || 
                    prop.indexOf("_map_text") !== -1 || 
                    StartsWith(prop, "exit") || 
                    prop.indexOf("_map_exit") !== -1 || 
                    StartsWith(prop, "before") || 
                    StartsWith(prop, "padding") || 
                    StartsWith(prop, "sep") || 
                    StartsWith(prop, "places") || 
                    StartsWith(prop, "after")) {
                    result.push(prop);
                    //console.log("Object property added:", prop);
                }
            } else {
                //console.log("Object property is undefined or not owned.");
            }
        }
    }

    //console.log("Result:", result);
    return result;
}

/*function GetRegexNamedGroups(matches) {
    var found = false;
    var result = new Array();
    for (var prop in matches) {
        if (matches.hasOwnProperty(prop)) {
            if (StartsWith(prop, "before") || StartsWith(prop, "padding") || StartsWith(prop, "sep") || StartsWith(prop, "places") || StartsWith(prop, "after") || prop.indexOf("_map_object") != -1 || StartsWith(prop, "text") || prop.indexOf("_map_text") != -1 || StartsWith(prop, "exit") || prop.indexOf("_map_exit") != -1) {
                found = true;
                result.push(prop);
            }
        }
    }
    return result;
}*/

function GetAttribute(object, attribute) {
    // Check if the object has the attribute
    if (object && object.hasOwnProperty(attribute)) {
        return object[attribute];
    }
    // If attribute is not found, return undefined or handle it as needed
    return undefined;
}

function GetBoolean(element, attribute) {
    if (HasBoolean(element, attribute)) {
        return GetAttribute(element, attribute);
    }
    return false;
}

function GetInt(element, attribute) {
    if (HasInt(element, attribute)) {
        return GetAttribute(element, attribute);
    }
    return 0;
}

function GetObject(element) {
    result = objectsNameMap[element];
    if (result == undefined) return result;
    if (result["__destroyed"]) return null;
    return result;
}

function GetTimer(name) {
    return GetObject(name);
}

function GetString(element, attribute) {
    if (HasString(element, attribute)) {
        return GetAttribute(element, attribute);
    }
    return null;
}

function HasAttribute(element, attribute) {
    return (GetAttribute(element, attribute) != undefined);
}

function HasBoolean(element, attribute) {
    return (TypeOf(GetAttribute(element, attribute)) == "boolean");
}

function HasInt(element, attribute) {
    return (TypeOf(GetAttribute(element, attribute)) == "int");
}

function HasObject(element, attribute) {
    return (TypeOf(GetAttribute(element, attribute)) == "object");
}

function HasString(element, attribute) {
    return (TypeOf(GetAttribute(element, attribute)) == "string");
}

function HasScript(element, attribute) {
    return (TypeOf(GetAttribute(element, attribute)) == "script");
}

function HasDelegateImplementation(element, attribute) {
    return (TypeOf(GetAttribute(element, attribute)) == "script");
}

function GetAttributeNames(element, includeInheritedAttributes) {
    var result = [];
    for (var name in element) {
        result.push(name);
    }
    return result;
}

function AllObjects() {
    return allObjects;
}

function AllExits() {
    return allExits;
}

function AllCommands() {
    return allCommands;
}

function AllTurnScripts() {
    return allTurnScripts;
}

function TypeOf(value) {
    return overloadedFunctions.TypeOf(value);
}

function OverloadedFunctions() {
    addMethod(this, "TypeOf", function (value) {
        var type = typeof value;
        if (type == "function") return "script";
        if (type == "object") {
            if (value == null) return "null";
            if (Object.prototype.toString.call(value) === '[object Array]') {
                // could be an objectlist or stringlist
                var allObjects = true;
                var allStrings = true;

                for (var index in value) {
                    var item = value[index];
                    if (typeof item != "string") allStrings = false;
                    if (typeof item != "object") allObjects = false;
                    if (!allStrings && !allObjects) break;
                }

                if (allStrings) return "stringlist";
                if (allObjects) return "objectlist";
                return "unknown";
            }
            else {
                // could be an object, stringdictionary, objectdictionary or scriptdictionary
                var allObjects = true;
                var allStrings = true;
                var allScripts = true;

                for (var key in value) {
                    var item = value[key];
                    if (typeof item != "string") allStrings = false;
                    if (TypeOf(item) != "object") allObjects = false;
                    if (typeof item != "function") allScripts = false;
                    if (!allStrings && !allObjects && !allScripts) break;
                }

                if (allStrings) {
                    return "stringdictionary";
                }
                if (allObjects) {
                    return "objectdictionary";
                }
                if (allScripts) {
                    return "scriptdictionary";
                }
                return "object";
            }
        }
        if (type == "boolean") return "boolean";
        if (type == "string") return "string";
        if (type == "number") {
            // TO DO: Also need to handle double
            return "int";
        }
        if (type == "undefined") return "null";

        // TO DO: Also valid: Delegate name
    });

    addMethod(this, "TypeOf", function (object, attribute) {
        return TypeOf(GetAttribute(object, attribute));
    });

    addMethod(this, "DynamicTemplate", function (name, arg1) {
        params = new Object();
        params["object"] = arg1;
        params["exit"] = arg1;
        params["text"] = arg1;
        return dynamicTemplates[name](params);
    });

    addMethod(this, "DynamicTemplate", function (name, arg1, arg2) {
        params = new Object();
        params["object1"] = arg1;
        params["object2"] = arg2;
        return dynamicTemplates[name](params);
    });

    addMethod(this, "Eval", function (expression) {
        return eval(expression);
    });

    addMethod(this, "Eval", function (expression, params) {
        for (var varname in params) {
            var varvalue = params[varname];
            eval("var " + varname + "=varvalue");
        }
        return eval(expression);
    });
}

var overloadedFunctions = new OverloadedFunctions();

function DictionaryContains(dictionary, key) {
    return dictionary[key] != undefined;
}

function DictionaryItem(dictionary, key) {
    return dictionary[key];
}

function StringDictionaryItem(dictionary, key) {
    return dictionary[key];
}

function ScriptDictionaryItem(dictionary, key) {
    return dictionary[key];
}

function ObjectDictionaryItem(dictionary, key) {
    return dictionary[key];
}

function DictionaryCount(dictionary) {
    var count = 0;
    for (key in dictionary) {
        count++;
    }
    return count;
}

function NewList(){
	return [];
}

function ListCombine(list1, list2) {
    return list1.concat(list2);
}

function ListExclude(list, element) {
    var listCopy = list.slice(0);
    var index = listCopy.indexOf(element);
    if (index != -1) {
        listCopy.splice(index, 1);
    }
    return listCopy;
}

function ListContains(list, element) {
    return ($.inArray(element, list) != -1);
}

function ListCount(list) {
    return list.length;
}

function ListItem(list, index) {
    return list[index];
}

function StringListItem(list, index) {
    return list[index];
}

function ObjectListItem(list, index) {
    return list[index];
}

function Template(name) {
    return templates["t_" + name];
}

// TO DO: Need overloads to handle passing function parameters
function RunDelegateFunction(object, attribute) {
    return GetAttribute(object, attribute)();
}

function Contains(parent, child) {
    if (child.parent == null || child.parent == undefined) return false;
    if (child.parent == parent) return true;
    return Contains(parent, child.parent);
}

function ShowMenu() {
    throw "Synchronous ShowMenu function is not supported. Use showmenu_async function instead";
}

function SetMenuSelection(result) {
    if (Object.prototype.toString.call(menuOptions) === '[object Array]') {
        awaitingCallback = false;
        menuCallback(menuOptions[result]);
    }
    else {
        awaitingCallback = false;
        menuCallback(result);
    }
    if (finishTurnAfterSelection) {
        TryFinishTurn();
    }
}

function GetExitByName(parent, name) {
    for (var idx in allExits) {
        var obj = allExits[idx];
        if (obj.parent == parent && obj.alias == name) {
            return obj.name;
        }
    }
}

function GetExitByLink(parent, to) {
    for (var idx in allExits) {
        var obj = allExits[idx];
        if (obj.parent == parent && obj.to == to) {
            return obj.name;
        }
    }
}

function GetFileURL(file) {
    return file;
}

function Ask(question) {
    if (runningWalkthrough) {
        msg("<i>" + question + "</i>");
        var step = currentWalkthroughSteps.splice(0, 1);
        var response = step[0];
        if (response.substring(0, 7) == "answer:") {
            return (response.substring(7) == "yes");
        }
        else {
            msg("Error running walkthrough - expected menu response");
        }
    }
    else {
        return confirm(question);
    }
}

function GetUniqueElementName(prefix) {
    return prefix + getUniqueId();
}

function TryFinishTurn() {
    updateLists();
    TryRunOnReadyScripts();
    if (!awaitingCallback) {
        saveGame();
        if (typeof FinishTurn == "function") {
            FinishTurn();
        }
    }
}

function TryRunOnReadyScripts() {
    if (awaitingCallback) return;
    if (onReadyCallback != null) {
        var callback = onReadyCallback;
        onReadyCallback = null;
        callback();
    }
}

function GetDirectChildren(element) {
    if (!element["_children"]) {
        return new Array();
    }
    return element["_children"];
}

function GetAllChildObjects(element) {
    var result = new Array();
    var directChildren = GetDirectChildren(element);
    for (var idx in directChildren) {
        var obj = directChildren[idx];
        result.push(obj);
        result = result.concat(GetAllChildObjects(obj));
    }
    return result;
}

function IsGameRunning() {
    return gameRunning;
}

function IsDefined(variable) {
	//TODO
    return true;
}

function GetRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function SafeXML(input) {
    return input.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}

function GetUIOption() {
    return null;
}

function DoesInherit(obj, type) {
    return ListContains(obj._types, type);
}


//Added by KV 10042017
//Modified by KV 08-14-2024
function setCss(element, cssString) {
  el = $(element);
  cssString = cssString.replace("; ", ";"); //Allow spaces
  ary = cssString.split(";");
  for (i = 0; i < ary.length; i++) {
    ary2 = ary[i].split(':');
    el.css(ary2[0], ary2[1]);
  }
}


function Sin(int) {
    return Math.sin(int);
}
function Abs(int) {
    return Math.abs(int);
}
function Acos(val) {
    return Math.acos(val);
}
function Asin(val) {
    return Math.asin(val);
}
function Atan(val) {
    return Math.atan(val);
}
function Cos(val) {
    return Math.cos(val);
}
function Exp(val) {
    return Math.exp(val);
}
function Log(val) {
    return Math.log(val);
}
function Log10(val) {
    return Math.log10(val);
}
function Sinh(val) {
    return Math.sinh(val);
}
function Sqrt(val) {
    return Math.sqrt(val);
}
function Tan(val) {
    return Math.tan(val);
}
function Tanh(val) {
    return Math.tanh(val);
}
function Ceiling(val) {
    return Math.ceil(val);
}
function Floor(val) {
    return Math.floor(val);
}
function Round(val) {
    return Math.round(val);
}

const Pi = Math.PI;

function abs(int){
	return Math.abs(int);
};
function pow(base, exp) {
    return Math.pow(base, exp);
};
function floor(val) {
    return Math.floor(val);
};

function addTextAndScroll(text) { addText('<br/>' + text); scrollToEnd(); };

var msg = addTextAndScroll;

function whereAmI() {
    ASLEvent("WhereAmI", platform);
}
var platform = "webplayer";

var templates = new Object();
var dynamicTemplates = new Object();
var allObjects = new Array();
var allExits = new Array();
var allCommands = new Array();
var allTurnScripts = new Array();
var allTimers = new Array();
var objectReferences = new Array();
var objectListReferences = new Array();
var objectDictionaryReferences = new Array();
var embeddedHtml = new Object();
var objectsNameMap = new Object();
var elementsNameMap = new Object();

function showTranscript() {
    document.write("<button onclick='window.history.back();'>BACK</button><br/><br/>" + transcriptArr + "<br/><br/><button onclick='window.history.back();'>BACK</button>");
}

function RequestSave() {
    msg("This game automatically saves after each successful turn.");
}

function addScript(text) {
    $('body').prepend(text);
}

function setCommands(s, colour) {
    if (arguments.length == 2) commandColour = colour;
    ary = s.split(";");
    el = $('#commandPaneHeading');
    el.empty();
    for (i = 0; i < ary.length; i++) {
        ary2 = ary[i].split(":");
        comm = ary2[0];
        commLower = ary2[0].toLowerCase().replace(/ /g, "_");
        commComm = (ary2.length == 2 ? ary2[1] : ary2[0]).toLowerCase();
        //alert("ary[i]=" + ary[i] + ", Comm=" + comm + ", commComm=" + commComm + ", ary2[0].length=" + ary2.length);
        el.append(' <span id="' + commLower + '_command_button"  class="accordion-header-text" style="padding:5px;"><a id="verblink' + commLower + '" class="cmdlink commandlink" style="text-decoration:none;color:' + commandColour + ';font-size:12pt;" data-elementid="" data-command="' + commComm + '">' + comm + '</a></span> ');
    }
}
var commandColour = "black";


function requestsave() {
    // Do nothing.
}

function requestspeak(data) {
    request("Speak", data);
}

var evalBak = eval

eval = function(data){
    try {
        return evalBak(data);
    } catch (e) {
        for (o in allObjects){
            if(data.indexOf(allObjects[o].name) > -1){
                data = data.split(allObjects[o].name).join("GetObject(\""+allObjects[o].name+"\")");
            }
        }
        return evalBak(data);
    }
}

function showPopup(title, text) {
    $('#msgboxCaption').html(text);

    var msgboxOptions = {
        modal: true,
        autoOpen: false,
        title: title,
        buttons: [
			{
			    text: 'OK',
			    click: function () { $(this).dialog('close'); }
			},
        ],
        closeOnEscape: false,
    };

    $('#msgbox').dialog(msgboxOptions);
    $('#msgbox').dialog('open');
};

function showPopupCustomSize(title, text, width, height) {
    $('#msgboxCaption').html(text);

    var msgboxOptions = {
        modal: true,
        autoOpen: false,
        title: title,
        width: width,
        height: height,
        buttons: [
			{
			    text: 'OK',
			    click: function () { $(this).dialog('close'); }
			},
        ],
        closeOnEscape: false,
    };

    $('#msgbox').dialog(msgboxOptions);
    $('#msgbox').dialog('open');
};

function showPopupFullscreen(title, text) {
    $('#msgboxCaption').html(text);

    var msgboxOptions = {
        modal: true,
        autoOpen: false,
        title: title,
        width: $(window).width(),
        height: $(window).height(),
        buttons: [
			{
			    text: 'OK',
			    click: function () { $(this).dialog('close'); }
			},
        ],
        closeOnEscape: false,
    };

    $('#msgbox').dialog(msgboxOptions);
    $('#msgbox').dialog('open');
};

function GetFileData(file) {
    throw ("FIXME");
};
function Clone(name) {
    // The 'name' variable is actually an object.
    if (!name) return false;
    //console.log(name);
    // Declare this as false, assuming the object has no child objects. 
    var hasKids = false;
    // Declare this for any children while cloning
    var protos = [];
    // Declare this for any clones of children
    var newkids = [];
    // QuestJS has a '_children' attribute which points to the object's child objects
    if (HasAttribute(name, "_children")) {
        //console.log(name.name + " has child objects"); // Let me know what's going on!
        if (GetDirectChildren(name).length > 0) {
            hasKids = true;
            // There are children, so point this array to that attribute
            protos = name["_children"];
            // Back it up again, just to be safe
            //name.kidsBak = name["_children"];
            // Clear it out, to avoid recursion errors while setting the clone's attributes
            name["_children"] = [];
            // Move children to game object while cloning
            //protos.forEach(function (o) {
                //MoveObject(o, GetObject("game"));
            //});
        }
    }
    //console.log("STILL GOING"); // This is just to make sure something hasn't gone wrong!
    //console.log(name.name);
    // This is how QuestJS avoids duplicate object names.
    var clonename = GetUniqueElementName(name.name).replace(/dynid/, "");
    // And we finally create a blank object
    create(clonename);
    // Just like Quest, we must declare a variable which points to the actual object
    var newObject = GetObject(clonename);
    //console.log(newObject);  // Just to make sure things are in order
    // Get all the attribute names of the prototype
    var atts = GetAttributeNames(name);
    for (var att in name) {
        //console.log(att);  // Just to see what is going on!
        // Make sure the attribute exists
        if (name != undefined && att != undefined && name[att] != undefined) {
            // Make sure the attribute isn't either of the names
            if (att != 'name' && att != '_js_name') {
                //console.log(name[att]);  // Just to see what is going on!
                // Copy the attribute from the prototype to the clone
                set(newObject, att, name[att]);
            }
        }
    }
    //console.log(newObject.name+" is set up!");  // Just to see what is going on!
    if (hasKids) {
        // Move children back to the prototype
        protos.forEach(function (o) {
            MoveObject(o, name);
        });
        // We had child objects in the prototype, so we need to clone them and move them into the main clone
        for (var kid in protos) {
            var nclone = CloneObjectAndMove(protos[kid], newObject);
            console.log(nclone);
        }
        // Set the prototype's attribute back to it's original state
        //name["_children"] = name.kidsBak;
        // Delete the backup attribute
        //name.kidsBak = null;
    }
    return newObject;
}

/*function GetRegexNamedGroups(matches) {
    var result = new Array();
    for (var prop in matches) {
        if (matches.hasOwnProperty(prop)) {
                result.push(prop);
        }
    }
    return result;
}*/

function ScopeReachableNotHeldForRoom(room)
{
var result = NewObjectList();
var list_obj = GetAllChildObjects(room);
var list_obj_isarray = (Object.prototype.toString.call(list_obj) === '[object Array]');
for (var iterator_obj in list_obj) {
var obj = list_obj_isarray ? list_obj[iterator_obj] : iterator_obj;
if (list_obj_isarray || iterator_obj!="__dummyKey") { if (ContainsReachable(room, obj) && obj != _obj323.pov && !(Contains(_obj323.pov, obj))) {
listadd (result, obj);
} }
}
if (HasScript(_obj323, "scopebackdrop")) {
var dict = NewDictionary();
dictionaryadd (dict, "items", result);
set(_obj323, "scopebackdropitems", result);
runscriptattribute3 (_obj323, "scopebackdrop", dict);
}
return (result);
}

/* -- ATTEMPTING TO FIX setCustomStatus() -- */

function setPanes(fore, back, secFore, secBack, highlight) {
  if (arguments.length == 2) {
    secFore = back;
    secBack = fore;
  }
  if (arguments.length < 5) {
    highlight = 'orange'
  }
  commandColour = fore;
  for (i = 0; i < elements.length; i++) {
    setElement(elements[i], fore, back);
  }
  for (i = 0; i < dirs.length; i++) {
    setElement(dirs[i], fore, back);
  }

  var head = $('head');
  head.append('<style>.ui-button-text { color: ' + fore + ';}</style>');
  head.append('<style>.ui-state-active { color: ' + fore + ';}</style>');
  head.append('<style>.ui-widget-content { color: ' + fore + ';}</style>');
  head.append('<style>.ui-widget-header .ui-state-default { background-color: ' + secBack + ';}</style>');
  head.append('<style>.ui-selecting { color: ' + secFore + '; background-color: ' + highlight + ';}</style>');
  head.append('<style>.ui-selected { color: ' + secFore + '; background-color: ' + secBack + ';}</style>');

  //$('.ui-button-text').css('color', fore);
  //$('.ui-state-active').css('color', fore);
  //$('.ui-widget-content').css('color', fore);
  
}

elements = [
  '#statusVarsLabel', '#statusVarsAccordion',// '#statusVars',
  '#inventoryLabel', '#inventoryAccordion', '#inventoryAccordion.ui-widget-content',
  '#placesObjectsLabel', '#placesObjectsAccordion', '#placesObjectsAccordion.ui-widget-content',
  '#compassLabel', '#compassAccordion', '.ui-button', //'.ui-button-text',
  '#commandPane', '#customStatusPane'
];

dirs = ['N', 'E', 'S', 'W', 'NW', 'NE', 'SW', 'SE', 'U', 'In', 'D', 'Out'];

commandColour = 'orange'

function setElement(name, fore, back) {
  el = $(name);
  el.css('background', back);
  el.css('color', fore);
  el.css('border', 'solid 1px ' + fore);
  if (endsWith(name, "Accordion")) {
    el.css('border-top', 'none');
  }
}

function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
}

function setCustomStatus(s) {
    el = $('#customStatusPane');
    el.html(s);
}

/*
    END OF DEFAULT FILE
*/
templates.t_LanguageId = `en`
templates.t_UnresolvedObject = `I can't see that.`
templates.t_UnresolvedLocation = `You can't go there.`
templates.t_DefaultObjectDescription = `Nothing out of the ordinary.`
templates.t_DefaultSelfDescription = `Looking good.`
templates.t_SeeListHeader = `You can see`
templates.t_GoListHeader = `You can go`
templates.t_And = `and`
templates.t_Or = `or`
templates.t_NothingToUndo = `Nothing to undo!`
templates.t_NotCarryingAnything = `You are not carrying anything.`
templates.t_CarryingListHeader = `You are carrying`
templates.t_UnrecognisedCommand = `I don't understand your command.`
templates.t_YouAreIn = `You are in`
templates.t_LookAt = `Look at`
templates.t_Take = `Take`
templates.t_SpeakTo = `Speak to`
templates.t_Use = `Use`
templates.t_Drop = `Drop`
templates.t_GoTo = `Go to`
templates.t_Go = `Go`
templates.t_SwitchOn = `Switch on`
templates.t_SwitchOff = `Switch off`
templates.t_Open = `Open`
templates.t_Close = `Close`
templates.t_Eat = `Eat`
templates.t_NeutralGender = `it`
templates.t_MaleGender = `he`
templates.t_FemaleGender = `she`
templates.t_SelfGender = `you`
templates.t_NeutralPluralGender = `they`
templates.t_MalePluralGender = `they`
templates.t_FemalePluralGender = `they`
templates.t_NeutralArticle = `it`
templates.t_MaleArticle = `him`
templates.t_FemaleArticle = `her`
templates.t_SelfArticle = `yourself`
templates.t_NeutralPluralArticle = `them`
templates.t_MalePluralArticle = `them`
templates.t_FemalePluralArticle = `them`
templates.t_SelfAlias = `me`
templates.t_SelfAlt = `myself; self`
templates.t_AllObjects = `all; everything`
templates.t_ParserIgnorePrefixes = `the; a; an`
templates.t_CannotDoThat = `You can't do that.`
templates.t_Done = `Done.`
templates.t_ContainerContentsPrefix = `containing`
templates.t_SurfaceContentsPrefix = `on which there is`
templates.t_LockedExit = `That way is locked.`
templates.t_NoKey = `You do not have the key.`
templates.t_UnlockMessage = `Unlocked.`
templates.t_LockMessage = `Locked.`
templates.t_DefaultOops = `There is nothing to correct.`
templates.t_VerbObjectSeparator = `with; using`
templates.t_DefaultMultiObjectVerb = `That doesn't work.`
templates.t_MultiObjectVerbMenu = `With which object?`
templates.t_UseOnMenu = `On which object?`
templates.t_GiveToMenu = `To which object?`
templates.t_NoObjectsAvailable = `There are no objects available to do that with.`
templates.t_Yes = `Yes`
templates.t_No = `No`
templates.t_By = `by`
templates.t_CompassNW = `northwest`
templates.t_CompassN = `north`
templates.t_CompassNE = `northeast`
templates.t_CompassW = `west`
templates.t_CompassE = `east`
templates.t_CompassSW = `southwest`
templates.t_CompassS = `south`
templates.t_CompassSE = `southeast`
templates.t_CompassUp = `up`
templates.t_CompassDown = `down`
templates.t_CompassIn = `in`
templates.t_CompassOut = `out`
templates.t_CompassDirectionPrefix = ``
templates.t_CompassDirectionSuffix = ``
templates.t_UpDownDirectionPrefix = ``
templates.t_UpDownDirectionSuffix = ``
templates.t_InOutDirectionPrefix = ``
templates.t_InOutDirectionSuffix = ``
templates.t_CompassNWShort = `nw`
templates.t_CompassNShort = `n`
templates.t_CompassNEShort = `ne`
templates.t_CompassWShort = `w`
templates.t_CompassEShort = `e`
templates.t_CompassSWShort = `sw`
templates.t_CompassSShort = `s`
templates.t_CompassSEShort = `se`
templates.t_CompassUpShort = `u`
templates.t_CompassDownShort = `d`
templates.t_CompassInShort = ``
templates.t_CompassOutShort = `o`
templates.t_InventoryLabel = `Inventory`
templates.t_StatusLabel = `Status`
templates.t_PlacesObjectsLabel = `Places and Objects`
templates.t_CompassLabel = `Compass`
templates.t_InButtonLabel = `in`
templates.t_OutButtonLabel = `out`
templates.t_EmptyListLabel = `(empty)`
templates.t_NothingSelectedLabel = `(nothing selected)`
templates.t_TypeHereLabel = `Type here...`
templates.t_ContinueLabel = `Continue...`
templates.t_go = `^go to (?<exit>.*)$|^go (?<exit>.*)$|^(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$`
templates.t_lookdir = `^look (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$`
templates.t_look = `^look$|^l$`
templates.t_lookat = `look at; x; examine; exam; ex`
templates.t_take = `take; get; pick up`
templates.t_undo = `^undo$`
templates.t_inventory = `^i$|^inv$|^inventory$`
templates.t_quit = `^quit$`
templates.t_drop = `drop`
templates.t_use = `use`
templates.t_speakto = `speak to; speak; talk to; talk`
templates.t_open = `open`
templates.t_close = `close`
templates.t_put = `^put (?<object1>.*) (on|in) (?<object2>.*)$`
templates.t_removefrom = `^remove (?<object1>.*) from (?<object2>.*)$`
templates.t_ask = `^ask (?<object>.*) about (?<text>.*)$`
templates.t_tell = `^tell (?<object>.*) about (?<text>.*)$`
templates.t_oops = `^oops (?<text>.*)$`
templates.t_buy = `buy`
templates.t_climb = `climb`
templates.t_drink = `drink`
templates.t_eat = `eat`
templates.t_givesingle = `give`
templates.t_give = `^give (?<object1>.*) to (?<object2>.*)$`
templates.t_hit = `hit`
templates.t_kill = `kill`
templates.t_kiss = `kiss`
templates.t_knock = `knock`
templates.t_lick = `lick`
templates.t_lie = `lie on; lie upon; lie down on; lie down upon`
templates.t_listento = `listen to`
templates.t_lock = `lock`
templates.t_move = `move`
templates.t_pull = `pull`
templates.t_push = `push`
templates.t_read = `read`
templates.t_search = `search`
templates.t_show = `show`
templates.t_sit = `sit on; sit upon; sit down on; sit down upon`
templates.t_smell = `smell; sniff`
templates.t_taste = `taste`
templates.t_throw = `throw`
templates.t_tie = `tie`
templates.t_touch = `touch`
templates.t_turnon = `turn on; turn #object# on; switch on; switch #object# on`
templates.t_turnoff = `turn off; turn #object# off; switch off; switch #object# off`
templates.t_turn = `turn`
templates.t_unlock = `unlock`
templates.t_untie = `untie`
templates.t_useon = `^use (?<object1>.*) (on|with) (?<object2>.*)$`
templates.t_wear = `wear`
templates.t_listen = `^listen$`
templates.t_DefaultListen = `You can't hear much.`
templates.t_jump = `^jump$`
templates.t_DefaultJump = `You jump, but nothing happens.`
templates.t_sitdown = `^sit$|^sit down$`
templates.t_DefaultSitDown = `No time for lounging about now.`
templates.t_liedown = `^lie$|^lie down$`
templates.t_DefaultLieDown = `No time for lounging about now.`
templates.t_sleep = `^sleep$|^rest$`
templates.t_DefaultSleep = `No time for lounging about now.`
templates.t_wait = `^wait$|^z$`
templates.t_DefaultWait = `Time passes.`
templates.t_xyzzy = `^xyzzy$`
templates.t_DefaultXyzzy = `Surprisingly, absolutely nothing happens.`
templates.t_help = `^help$|^\?$`
templates.t_save = `^save$`
templates.t_DefaultHelp = `<u>Quick Help</u><br/><br/><b>- Objects:</b>  Try LOOK AT..., SPEAK TO..., TAKE..., DROP..., OPEN..., GIVE... TO..., USE... ON/WITH...<br/><b>- Inventory:</b>  See which items you are carrying by typing I, INV or INVENTORY.<br/><b>- Moving around:</b>  Press the compass buttons, or type GO NORTH, SOUTH, E, GO TO...<br/><b>- Shortcuts:</b>  Press the up arrow and down arrow to scroll through commands you have already typed in. Try X... as a shortcut for LOOK AT...`
templates.t_LanguageSpecificObjectTypes = ``
dynamicTemplates.TakeSuccessful = function(params) { return "You pick " + params["object"].article + " up."; };
dynamicTemplates.TakeUnsuccessful = function(params) { return "You can't take " + params["object"].article + "."; };
dynamicTemplates.FullInventory = function(params) { return WriteVerb(params["object"], "be") + " too heavy to be taken."; };
dynamicTemplates.MaxObjectsInInventory = function(params) { return "You can't carry any more items."; };
dynamicTemplates.MaxObjectsInContainer = function(params) { return "You can't put more items in " + params["object"].article + "."; };
dynamicTemplates.DropSuccessful = function(params) { return "You drop " + params["object"].article + "."; };
dynamicTemplates.DropUnsuccessful = function(params) { return "You can't drop " + params["object"].article + "."; };
dynamicTemplates.AlreadyTaken = function(params) { return "You are already carrying " + params["object"].article + "."; };
dynamicTemplates.NotCarrying = function(params) { return "You are not carrying " + params["object"].article + "."; };
dynamicTemplates.CantUse = function(params) { return "You can't use " + params["object"].article + "."; };
dynamicTemplates.CantGive = function(params) { return "You can't give " + params["object"].article + "."; };
dynamicTemplates.DefaultSpeakTo = function(params) { return WriteVerb(params["object"], "say") + " nothing."; };
dynamicTemplates.ObjectNotOpen = function(params) { return CapFirst(GetDisplayAlias(params["object"])) + " " + Conjugate(params["object"], "be") + " not open."; };
dynamicTemplates.AlreadyOpen = function(params) { return WriteVerb(params["object"], "be") + " already open."; };
dynamicTemplates.AlreadyClosed = function(params) { return WriteVerb(params["object"], "be") + " already closed."; };
dynamicTemplates.CantOpen = function(params) { return "You can't open " + params["object"].article + "."; };
dynamicTemplates.CantClose = function(params) { return "You can't close " + params["object"].article + "."; };
dynamicTemplates.OpenSuccessful = function(params) { return "You open " + params["object"].article + "."; };
dynamicTemplates.CloseSuccessful = function(params) { return "You close " + params["object"].article + "."; };
dynamicTemplates.AlreadyThere = function(params) { return WriteVerb(params["object"], "be") + " already there."; };
dynamicTemplates.ObjectContains = function(params) { return WriteVerb(params["object"], "contain"); };
dynamicTemplates.ContainerFull = function(params) { return WriteVerb(params["object"], "be") + " full."; };
dynamicTemplates.DisambiguateMenu = function(params) { return "Please choose which '" + params["text"] + "' you mean:"; };
dynamicTemplates.UndoTurn = function(params) { return "Undo: " + params["text"]; };
dynamicTemplates.DefaultAsk = function(params) { return WriteVerb(params["object"], "do") + " not reply."; };
dynamicTemplates.DefaultTell = function(params) { return WriteVerb(params["object"], "do") + " not reply."; };
dynamicTemplates.LockedObject = function(params) { return WriteVerb(params["object"], "be") + " locked."; };
dynamicTemplates.AlreadyLocked = function(params) { return WriteVerb(params["object"], "be") + " already locked."; };
dynamicTemplates.AlreadyUnlocked = function(params) { return WriteVerb(params["object"], "be") + " already unlocked."; };
dynamicTemplates.CannotLockOpen = function(params) { return "You cannot lock " + params["object"].article + " when " + params["object"].gender + " " + Conjugate(params["object"], "be") + " open."; };
dynamicTemplates.AlreadySwitchedOn = function(params) { return WriteVerb(params["object"], "be") + " already switched on."; };
dynamicTemplates.AlreadySwitchedOff = function(params) { return WriteVerb(params["object"], "be") + " already switched off."; };
dynamicTemplates.SwitchedOn = function(params) { return "You switch " + params["object"].article + " on."; };
dynamicTemplates.SwitchedOff = function(params) { return "You switch " + params["object"].article + " off."; };
dynamicTemplates.Eaten = function(params) { return "You eat " + params["object"].article + "."; };
dynamicTemplates.ObjectDoesNotContain = function(params) { return CapFirst(GetDisplayAlias(params["object1"])) + " " + Conjugate(params["object1"], "do") + " not contain " + GetDisplayAlias(params["object2"]) + "."; };
dynamicTemplates.YouLooking = function(params) { return "You are looking " + params["text"] +"."; };
dynamicTemplates.LookAtDarkness = function(params) { return "It is too dark to make anything out."; };
dynamicTemplates.DefaultBuy = function(params) { return "You can't buy " + params["object"].article + "."; };
dynamicTemplates.DefaultClimb = function(params) { return "You can't climb " + params["object"].article + "."; };
dynamicTemplates.DefaultDrink = function(params) { return "You can't drink " + params["object"].article + "."; };
dynamicTemplates.DefaultEat = function(params) { return "You can't eat " + params["object"].article + "."; };
dynamicTemplates.DefaultGive = function(params) { return WriteVerb(params["object1"], "do") + " not want " + params["object2"].article + "."; };
dynamicTemplates.DefaultHit = function(params) { return "You can't hit " + params["object"].article + "."; };
dynamicTemplates.DefaultKill = function(params) { return "You can't kill " + params["object"].article + "."; };
dynamicTemplates.DefaultKiss = function(params) { return "You can't kiss " + params["object"].article + "."; };
dynamicTemplates.DefaultKnock = function(params) { return "You can't knock " + params["object"].article + "."; };
dynamicTemplates.DefaultLick = function(params) { return "You can't lick " + params["object"].article + "."; };
dynamicTemplates.DefaultLie = function(params) { return "You can't lie on " + params["object"].article + "."; };
dynamicTemplates.DefaultListenTo = function(params) { return "You listen, but " + params["object"].article + " makes no sound."; };
dynamicTemplates.DefaultLock = function(params) { return "You can't lock " + params["object"].article + "."; };
dynamicTemplates.DefaultMove = function(params) { return "You can't move " + params["object"].article + "."; };
dynamicTemplates.DefaultPull = function(params) { return "You can't pull " + params["object"].article + "."; };
dynamicTemplates.DefaultPush = function(params) { return "You can't push " + params["object"].article + "."; };
dynamicTemplates.DefaultRead = function(params) { return "You can't read " + params["object"].article + "."; };
dynamicTemplates.DefaultSearch = function(params) { return "You can't search " + params["object"].article + "."; };
dynamicTemplates.DefaultShow = function(params) { return "You can't show " + params["object"].article + "."; };
dynamicTemplates.DefaultSit = function(params) { return "You can't sit on " + params["object"].article + "."; };
dynamicTemplates.DefaultSmell = function(params) { return "You sniff, but " + params["object"].article + " doesn't smell of much."; };
dynamicTemplates.DefaultTaste = function(params) { return "You can't taste " + params["object"].article + "."; };
dynamicTemplates.DefaultThrow = function(params) { return "You can't throw " + params["object"].article + "."; };
dynamicTemplates.DefaultTie = function(params) { return "You can't tie " + params["object"].article + "."; };
dynamicTemplates.DefaultTouch = function(params) { return "You can't touch " + params["object"].article + "."; };
dynamicTemplates.DefaultTurnOn = function(params) { return "You can't turn " + params["object"].article + " on."; };
dynamicTemplates.DefaultTurnOff = function(params) { return "You can't turn " + params["object"].article + " off."; };
dynamicTemplates.DefaultTurn = function(params) { return "You can't turn " + params["object"].article + "."; };
dynamicTemplates.DefaultUnlock = function(params) { return "You can't unlock " + params["object"].article + "."; };
dynamicTemplates.DefaultUntie = function(params) { return "You can't untie " + params["object"].article + "."; };
dynamicTemplates.DefaultUseOn = function(params) { return "You can't use " + params["object2"].article + " that way."; };
dynamicTemplates.DefaultWear = function(params) { return "You can't wear " + params["object"].article + "."; };
_obj245 = {
"elementtype": "object",
"name": "game",
"type": "game",
"gamename": "The Bony King Of Nowhere",
"gameid": "d065f3c6-597c-42fe-b2cf-d8f46b803f5e",
"version": "1.8.1",
"firstpublished": "2017",
"description": "You are a citizen of the land of Nowhere, and you are given an urgent letter to deliver to the King. Navigate your way through the strange and twisted landscape to the capital city of Lost and gain access to the King's castle.<br/><br/>This is a casual text adventure game in the classic parser style<br/><br/>*****type 'hints' at any time for instructions and help******<br/><br/>Note: This game was an entry in The 2017 Spring Thing Festival of Interactive Fiction (springthing.net) <br/>    ",
"menufont": "Georgia, serif",
"feature_asktell": true,
"underlinehyperlinks": false,
"enablehyperlinks": false,
"showpanes": false,
"showlocation": false,
"author": "Luke A. Jones",
"command_newline": true,
"showdescriptiononenter": false,
"gridmapdisabled": false,
"autodescription_youcango_newline": true,
"autodescription_youarein_newline": true,
"autodescription_description_newline": true,
"feature_lightdark": true,
"autodescription_youarein_useprefix": true,
"feature_limitinventory": true,
"autodescription_youcansee_newline": true,
"cover": "Bony King Blue Restructure.jpg",
"multiplecommands": true,
"showcommandbar": true,
"defaultfont": "Georgia, serif",
"roomenter": function() { MoveObjectHere (_obj350);
ShowRoomDescription(); },
"_js_name": "_obj245",
"_types": ["defaultgame"],
"echocommand": true,
"echohyperlinks": true,
"autodescription": true,
"defaultfontsize": 12,
"defaultbackground": "White",
"defaultforeground": "Black",
"defaultlinkforeground": "Blue",
"backgroundimage": "",
"setbackgroundopacity": false,
"backgroundopacity": 0.5,
"menufontsize": 9,
"menubackground": "White",
"menuforeground": "Black",
"menuhoverbackground": "LightGrey",
"menuhoverforeground": "Black",
"compassdirections": ["northwest", "north", "northeast", "west", "east", "southwest", "south", "southeast", "up", "down", "in", "out"],
"clearframe": true,
"timeelapsed": 0,
"appendobjectdescription": false,
"allobjects": ["all", "everything"],
"parserignoreprefixes": ["the", "a", "an"],
"displayroomdescriptiononstart": true,
"setcustomwidth": false,
"customwidth": 950,
"setcustompadding": false,
"custompaddingtop": 30,
"custompaddingbottom": 0,
"custompaddingleft": 20,
"custompaddingright": 20,
"showborder": true,
"showscore": false,
"showhealth": false,
"showtitle": true,
"autodisplayverbs": true,
"autodescription_youarein": 1,
"autodescription_youcansee": 2,
"autodescription_youcango": 3,
"autodescription_description": 4,
"changeroom_newline": true,
"languageid": "en",
"mapscale": 30,
"mapsize": 300,
"feature_pictureframe": false,
"deactivatecommandlinks": false,
"publishfileextensions": "*.jpg;*.jpeg;*.png;*.gif;*.js;*.wav;*.mp3;*.htm;*.html;*.svg",
"changedpov": function(oldvalue) { InitPOV (oldvalue, _obj245.pov); }
};
elementsNameMap["game"] = _obj245;
objectsNameMap["game"] = _obj245;
_obj246 = {
"elementtype": "object",
"name": "lookat",
"type": "command",
"pattern": "^look at (?<object>.*)$|^x (?<g2_map_object>.*)$|^examine (?<g3_map_object>.*)$|^exam (?<g4_map_object>.*)$|^ex (?<g5_map_object>.*)$",
"script": function(parameters) { var object = parameters['object'];
if (GetBoolean(object, "hidechildren")) {
set(object, "hidechildren", false);
}
if (overloadedFunctions.TypeOf(object, "look") == "script") {
runscriptattribute2 (object, "look");
}
else {
var lookdesc = "";
if (HasString(object, "look")) {
var lookdesc = object.look;
}
if (LengthOf(lookdesc) == 0) {
var lookdesc = Template("DefaultObjectDescription");
}
if (GetBoolean(object, "switchedon")) {
if (HasString(object, "switchedondesc")) {
var lookdesc = lookdesc + " " + object.switchedondesc;
}
}
else {
if (HasString(object, "switchedoffdesc")) {
var lookdesc = lookdesc + " " + object.switchedoffdesc;
}
}
var isDark = CheckDarkness();
if (isDark && !(GetBoolean(object, "lightsource"))) {
var lookdesc = overloadedFunctions.DynamicTemplate("LookAtDarkness", object);
}
OutputText (lookdesc);
}
ListObjectContents (object); },
"_js_name": "_obj246",
"_types": ["defaultcommand"]
};
elementsNameMap["lookat"] = _obj246;
allCommands.push(_obj246);
objectsNameMap["lookat"] = _obj246;
_obj247 = {
"elementtype": "object",
"name": "take",
"type": "command",
"pattern": "^take (?<object>.*)$|^get (?<g2_map_object>.*)$|^pick up (?<g3_map_object>.*)$",
"multiple": function() { var takeList = NewObjectList();
var list_obj = ListExclude(ScopeVisibleNotHeldNotScenery(), _obj245.pov);
var list_obj_isarray = (Object.prototype.toString.call(list_obj) === '[object Array]');
for (var iterator_obj in list_obj) {
var obj = list_obj_isarray ? list_obj[iterator_obj] : iterator_obj;
if (list_obj_isarray || iterator_obj!="__dummyKey") { if (obj.parent == _obj245.pov.parent) {
listadd (takeList, obj);
} }
}
return (takeList); },
"script": function(parameters) { var object = parameters['object'];
var multiple = parameters['multiple'];
var object_isarray = (Object.prototype.toString.call(object) === '[object Array]');
for (var iterator_obj in object) {
var obj = object_isarray ? object[iterator_obj] : iterator_obj;
if (object_isarray || iterator_obj!="__dummyKey") { DoTake (obj, multiple); }
} },
"_js_name": "_obj247",
"_types": ["defaultcommand"]
};
elementsNameMap["take"] = _obj247;
allCommands.push(_obj247);
objectsNameMap["take"] = _obj247;
_obj249 = {
"elementtype": "object",
"name": "drop",
"type": "command",
"pattern": "^drop (?<object>.*)$",
"multiple": function() { return (GetDirectChildren(_obj245.pov)); },
"script": function(parameters) { var object = parameters['object'];
var multiple = parameters['multiple'];
var object_isarray = (Object.prototype.toString.call(object) === '[object Array]');
for (var iterator_obj in object) {
var obj = object_isarray ? object[iterator_obj] : iterator_obj;
if (object_isarray || iterator_obj!="__dummyKey") { DoDrop (obj, multiple); }
} },
"_js_name": "_obj249",
"_types": ["defaultcommand"]
};
elementsNameMap["drop"] = _obj249;
allCommands.push(_obj249);
objectsNameMap["drop"] = _obj249;
_obj251 = {
"elementtype": "object",
"name": "use",
"type": "command",
"pattern": "^use (?<object>.*)$",
"script": function(parameters) { var object = parameters['object'];
if (HasScript(object, "use")) {
runscriptattribute2 (object, "use");
}
else {
if (GetBoolean(object, "use")) {
var menu = NewStringDictionary();
var candidates = NewObjectList();
var candidates = CreateUseMenuList (object);
if (ListCount(candidates) == 0) {
OutputText (Template("NoObjectsAvailable"));
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "usemenuobject", object);
if (HasString(object, "usemenuprompt")) {
var menucaption = object.usemenuprompt;
}
else {
var menucaption = Template("UseOnMenu");
}
ShowMenu (menucaption, menu, true, function (result) { if (result != null) {
HandleUseOn (_obj245.pov.usemenuobject, GetObject(result));
set(_obj245.pov, "usemenuobject", null);
} });
}
}
else {
OutputText (overloadedFunctions.DynamicTemplate("CantUse", object));
}
} },
"_js_name": "_obj251",
"_types": ["defaultcommand"]
};
elementsNameMap["use"] = _obj251;
allCommands.push(_obj251);
objectsNameMap["use"] = _obj251;
_obj252 = {
"elementtype": "object",
"name": "undo",
"type": "command",
"pattern": "^undo$",
"isundo": true,
"script": function(parameters) { undo(); },
"_js_name": "_obj252",
"_types": ["defaultcommand"]
};
elementsNameMap["undo"] = _obj252;
allCommands.push(_obj252);
objectsNameMap["undo"] = _obj252;
_obj253 = {
"elementtype": "object",
"name": "inventory",
"type": "command",
"pattern": "^i$|^inv$|^inventory$",
"script": function(parameters) { var list = FormatObjectList(Template("CarryingListHeader"), _obj245.pov, Template("And"), ".");
if (list == "") {
OutputText (Template("NotCarryingAnything"));
}
else {
OutputText (list);
} },
"_js_name": "_obj253",
"_types": ["defaultcommand"]
};
elementsNameMap["inventory"] = _obj253;
allCommands.push(_obj253);
objectsNameMap["inventory"] = _obj253;
_obj254 = {
"elementtype": "object",
"name": "look",
"type": "command",
"pattern": "^look$|^l$",
"script": function(parameters) { ShowRoomDescription(); },
"_js_name": "_obj254",
"_types": ["defaultcommand"]
};
elementsNameMap["look"] = _obj254;
allCommands.push(_obj254);
objectsNameMap["look"] = _obj254;
_obj255 = {
"elementtype": "object",
"name": "lookdir",
"type": "command",
"pattern": "^look (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$",
"script": function(parameters) { var exit = parameters['exit'];
if (HasScript(exit, "look")) {
runscriptattribute2 (exit, "look");
}
else {
var message = overloadedFunctions.DynamicTemplate("YouLooking",exit.alias);
if (HasString(exit, "look")) {
if (exit.look != "") {
var message = exit.look;
}
}
if (exit.locked) {
if (HasString(exit,"lockmessage")) {
var lockmessage = exit.lockmessage;
}
else {
var lockmessage = Template("LockedExit");
}
OutputText (message+" "+lockmessage);
}
else {
OutputText (message);
}
} },
"_js_name": "_obj255",
"_types": ["defaultcommand"]
};
elementsNameMap["lookdir"] = _obj255;
allCommands.push(_obj255);
objectsNameMap["lookdir"] = _obj255;
_obj256 = {
"elementtype": "object",
"name": "quit",
"type": "command",
"pattern": "^quit$",
"script": function(parameters) { request ("Quit", ""); },
"_js_name": "_obj256",
"_types": ["defaultcommand"]
};
elementsNameMap["quit"] = _obj256;
allCommands.push(_obj256);
objectsNameMap["quit"] = _obj256;
_obj257 = {
"elementtype": "object",
"name": "go",
"type": "command",
"pattern": "^go to (?<exit>.*)$|^go (?<g2_map_exit>.*)$|^(?<g3_map_exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$",
"unresolved": "You can't go there.",
"script": function(parameters) { var exit = parameters['exit'];
if (exit.visible) {
if (exit.locked) {
OutputText (exit.lockmessage);
}
else if (exit.runscript) {
if (HasScript(exit, "script")) {
runscriptattribute2 (exit, "script");
}
}
else if (exit.lookonly) {
OutputText ("You can't go there.");
}
else {
set(_obj245.pov, "parent", exit.to);
}
}
else {
OutputText ("You can't go there.");
} },
"_js_name": "_obj257",
"_types": ["defaultcommand"]
};
elementsNameMap["go"] = _obj257;
allCommands.push(_obj257);
objectsNameMap["go"] = _obj257;
_obj258 = {
"elementtype": "object",
"name": "open",
"type": "command",
"pattern": "^open (?<object>.*)$",
"script": function(parameters) { var object = parameters['object'];
TryOpenClose (true, object); },
"_js_name": "_obj258",
"_types": ["defaultcommand"]
};
elementsNameMap["open"] = _obj258;
allCommands.push(_obj258);
objectsNameMap["open"] = _obj258;
_obj259 = {
"elementtype": "object",
"name": "close",
"type": "command",
"pattern": "^close (?<object>.*)$",
"script": function(parameters) { var object = parameters['object'];
TryOpenClose (false, object); },
"_js_name": "_obj259",
"_types": ["defaultcommand"]
};
elementsNameMap["close"] = _obj259;
allCommands.push(_obj259);
objectsNameMap["close"] = _obj259;
_obj260 = {
"elementtype": "object",
"name": "put",
"type": "command",
"pattern": "^put (?<object1>.*) (on|in) (?<object2>.*)$",
"script": function(parameters) { var object1 = parameters['object1'];
var object2 = parameters['object2'];
if (object1.parent == object2) {
OutputText (overloadedFunctions.DynamicTemplate("AlreadyThere", object1));
}
else if (!(ListContains(ScopeInventory(), object1))) {
OutputText (overloadedFunctions.DynamicTemplate("NotCarrying", object1));
}
else if (!(ListContains(ScopeReachable(), object1))) {
OutputText (overloadedFunctions.DynamicTemplate("ObjectNotOpen", GetBlockingObject(object1)));
}
else if (!(ListContains(ScopeReachable(), object2))) {
OutputText (overloadedFunctions.DynamicTemplate("ObjectNotOpen", GetBlockingObject(object2)));
}
else if (!(object2.container)) {
OutputText (Template("CannotDoThat"));
}
else if (!(object2.isopen)) {
OutputText (overloadedFunctions.DynamicTemplate("ObjectNotOpen", object2));
}
else {
if (GetBoolean(object2, "hidechildren")) {
set(object2, "hidechildren", false);
}
if (HasDelegateImplementation(object2, "addscript")) {
rundelegate (object2, "addscript", object1);
}
else {
set(object1, "parent", object2);
OutputText (Template("Done"));
}
} },
"_js_name": "_obj260",
"_types": ["defaultcommand"]
};
elementsNameMap["put"] = _obj260;
allCommands.push(_obj260);
objectsNameMap["put"] = _obj260;
_obj261 = {
"elementtype": "object",
"name": "removefrom",
"type": "command",
"pattern": "^remove (?<object1>.*) from (?<object2>.*)$",
"script": function(parameters) { var object1 = parameters['object1'];
var object2 = parameters['object2'];
if (!(Contains(object2, object1))) {
OutputText (overloadedFunctions.DynamicTemplate("ObjectDoesNotContain", object2, object1));
}
else {
DoTake (object1, false);
} },
"_js_name": "_obj261",
"_types": ["defaultcommand"]
};
elementsNameMap["removefrom"] = _obj261;
allCommands.push(_obj261);
objectsNameMap["removefrom"] = _obj261;
_obj262 = {
"elementtype": "object",
"name": "givesingle",
"type": "command",
"pattern": "^give (?<object>.*)$",
"script": function(parameters) { var object = parameters['object'];
if (HasScript(object, "givesingle")) {
runscriptattribute2 (object, "givesingle");
}
else {
if (GetBoolean(object, "givesingle")) {
var menu = NewStringDictionary();
var candidates = NewObjectList();
var candidates = CreateGiveMenuList (object);
if (ListCount(candidates) == 0) {
OutputText (Template("NoObjectsAvailable"));
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "givemenuobject", object);
if (HasString(object, "givemenuprompt")) {
var menucaption = object.givemenuprompt;
}
else {
var menucaption = Template("GiveToMenu");
}
ShowMenu (menucaption, menu, true, function (result) { if (result != null) {
HandleGiveTo (_obj245.pov.givemenuobject, GetObject(result));
set(_obj245.pov, "givemenuobject", null);
} });
}
}
else {
OutputText (overloadedFunctions.DynamicTemplate("CantGive", object));
}
} },
"_js_name": "_obj262",
"_types": ["defaultcommand"]
};
elementsNameMap["givesingle"] = _obj262;
allCommands.push(_obj262);
objectsNameMap["givesingle"] = _obj262;
_obj263 = {
"elementtype": "object",
"name": "give",
"type": "command",
"pattern": "^give (?<object1>.*) to (?<object2>.*)$",
"script": function(parameters) { var object1 = parameters['object1'];
var object2 = parameters['object2'];
HandleGiveTo (object1, object2); },
"_js_name": "_obj263",
"_types": ["defaultcommand"]
};
elementsNameMap["give"] = _obj263;
allCommands.push(_obj263);
objectsNameMap["give"] = _obj263;
_obj264 = {
"elementtype": "object",
"name": "useon",
"type": "command",
"pattern": "^use (?<object1>.*) (on|with) (?<object2>.*)$",
"script": function(parameters) { var object1 = parameters['object1'];
var object2 = parameters['object2'];
HandleUseOn (object1, object2); },
"_js_name": "_obj264",
"_types": ["defaultcommand"]
};
elementsNameMap["useon"] = _obj264;
allCommands.push(_obj264);
objectsNameMap["useon"] = _obj264;
_obj265 = {
"elementtype": "object",
"name": "ask",
"type": "command",
"pattern": "^ask (?<object>.*) about (?<text>.*)$",
"script": function(parameters) { var object = parameters['object'];
var text = parameters['text'];
DoAskTell (object, text, "ask", "askdefault", "DefaultAsk"); },
"_js_name": "_obj265",
"_types": ["defaultcommand"]
};
elementsNameMap["ask"] = _obj265;
allCommands.push(_obj265);
objectsNameMap["ask"] = _obj265;
_obj266 = {
"elementtype": "object",
"name": "tell",
"type": "command",
"pattern": "^tell (?<object>.*) about (?<text>.*)$",
"script": function(parameters) { var object = parameters['object'];
var text = parameters['text'];
DoAskTell (object, text, "tell", "telldefault", "DefaultTell"); },
"_js_name": "_obj266",
"_types": ["defaultcommand"]
};
elementsNameMap["tell"] = _obj266;
allCommands.push(_obj266);
objectsNameMap["tell"] = _obj266;
_obj267 = {
"elementtype": "object",
"name": "oops",
"type": "command",
"pattern": "^oops (?<text>.*)$",
"isoops": true,
"script": function(parameters) { var text = parameters['text'];
var hasoops = false;
if (HasAttribute(_obj245, "unresolvedcommand")) {
if (_obj245.unresolvedcommand != null) {
var hasoops = true;
}
}
if (!(hasoops)) {
OutputText (Template("DefaultOops"));
}
else {
dictionaryremove (_obj245.unresolvedcommandvarlist, _obj245.unresolvedcommandkey);
dictionaryadd (_obj245.unresolvedcommandvarlist, _obj245.unresolvedcommandkey, text);
HandleSingleCommandPattern ("", _obj245.unresolvedcommand, _obj245.unresolvedcommandvarlist);
} },
"_js_name": "_obj267",
"_types": ["defaultcommand"]
};
elementsNameMap["oops"] = _obj267;
allCommands.push(_obj267);
objectsNameMap["oops"] = _obj267;
_obj268 = {
"elementtype": "object",
"name": "speak",
"type": "command",
"property": "speak",
"isverb": true,
"pattern": "^speak to (?<object>.*)$|^speak (?<g2_map_object>.*)$|^talk to (?<g3_map_object>.*)$|^talk (?<g4_map_object>.*)$",
"defaulttemplate": "DefaultSpeakTo",
"_js_name": "_obj268",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["speak"] = _obj268;
allCommands.push(_obj268);
objectsNameMap["speak"] = _obj268;
_obj269 = {
"elementtype": "object",
"name": "buy",
"type": "command",
"property": "buy",
"isverb": true,
"pattern": "^buy (?<object>.*)$",
"defaulttemplate": "DefaultBuy",
"_js_name": "_obj269",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["buy"] = _obj269;
allCommands.push(_obj269);
objectsNameMap["buy"] = _obj269;
_obj270 = {
"elementtype": "object",
"name": "climb",
"type": "command",
"property": "climb",
"isverb": true,
"pattern": "^climb (?<object>.*)$",
"defaulttemplate": "DefaultClimb",
"_js_name": "_obj270",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["climb"] = _obj270;
allCommands.push(_obj270);
objectsNameMap["climb"] = _obj270;
_obj271 = {
"elementtype": "object",
"name": "drink",
"type": "command",
"property": "drink",
"isverb": true,
"pattern": "^drink (?<object>.*)$",
"defaulttemplate": "DefaultDrink",
"_js_name": "_obj271",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["drink"] = _obj271;
allCommands.push(_obj271);
objectsNameMap["drink"] = _obj271;
_obj272 = {
"elementtype": "object",
"name": "eat",
"type": "command",
"property": "eat",
"isverb": true,
"pattern": "^eat (?<object>.*)$",
"defaulttemplate": "DefaultEat",
"_js_name": "_obj272",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["eat"] = _obj272;
allCommands.push(_obj272);
objectsNameMap["eat"] = _obj272;
_obj273 = {
"elementtype": "object",
"name": "hit",
"type": "command",
"property": "hit",
"isverb": true,
"pattern": "^hit (?<object>.*)$",
"defaulttemplate": "DefaultHit",
"_js_name": "_obj273",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["hit"] = _obj273;
allCommands.push(_obj273);
objectsNameMap["hit"] = _obj273;
_obj274 = {
"elementtype": "object",
"name": "kill",
"type": "command",
"property": "kill",
"isverb": true,
"pattern": "^kill (?<object>.*)$",
"defaulttemplate": "DefaultKill",
"_js_name": "_obj274",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["kill"] = _obj274;
allCommands.push(_obj274);
objectsNameMap["kill"] = _obj274;
_obj275 = {
"elementtype": "object",
"name": "kiss",
"type": "command",
"property": "kiss",
"isverb": true,
"pattern": "^kiss (?<object>.*)$",
"defaulttemplate": "DefaultKiss",
"_js_name": "_obj275",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["kiss"] = _obj275;
allCommands.push(_obj275);
objectsNameMap["kiss"] = _obj275;
_obj276 = {
"elementtype": "object",
"name": "knock",
"type": "command",
"property": "knock",
"isverb": true,
"pattern": "^knock (?<object>.*)$",
"defaulttemplate": "DefaultKnock",
"_js_name": "_obj276",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["knock"] = _obj276;
allCommands.push(_obj276);
objectsNameMap["knock"] = _obj276;
_obj277 = {
"elementtype": "object",
"name": "lick",
"type": "command",
"property": "lick",
"isverb": true,
"pattern": "^lick (?<object>.*)$",
"defaulttemplate": "DefaultLick",
"_js_name": "_obj277",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["lick"] = _obj277;
allCommands.push(_obj277);
objectsNameMap["lick"] = _obj277;
_obj278 = {
"elementtype": "object",
"name": "lieon",
"type": "command",
"property": "lie",
"isverb": true,
"pattern": "^lie on (?<object>.*)$|^lie upon (?<g2_map_object>.*)$|^lie down on (?<g3_map_object>.*)$|^lie down upon (?<g4_map_object>.*)$",
"defaulttemplate": "DefaultLie",
"_js_name": "_obj278",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["lieon"] = _obj278;
allCommands.push(_obj278);
objectsNameMap["lieon"] = _obj278;
_obj279 = {
"elementtype": "object",
"name": "listento",
"type": "command",
"property": "listen",
"isverb": true,
"pattern": "^listen to (?<object>.*)$",
"defaulttemplate": "DefaultListenTo",
"_js_name": "_obj279",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["listento"] = _obj279;
allCommands.push(_obj279);
objectsNameMap["listento"] = _obj279;
_obj280 = {
"elementtype": "object",
"name": "lock",
"type": "command",
"property": "lock",
"isverb": true,
"pattern": "^lock (?<object>.*)$",
"defaulttemplate": "DefaultLock",
"_js_name": "_obj280",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["lock"] = _obj280;
allCommands.push(_obj280);
objectsNameMap["lock"] = _obj280;
_obj281 = {
"elementtype": "object",
"name": "move",
"type": "command",
"property": "move",
"isverb": true,
"pattern": "^move (?<object>.*)$",
"defaulttemplate": "DefaultMove",
"_js_name": "_obj281",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["move"] = _obj281;
allCommands.push(_obj281);
objectsNameMap["move"] = _obj281;
_obj282 = {
"elementtype": "object",
"name": "pull",
"type": "command",
"property": "pull",
"isverb": true,
"pattern": "^pull (?<object>.*)$",
"defaulttemplate": "DefaultPull",
"_js_name": "_obj282",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["pull"] = _obj282;
allCommands.push(_obj282);
objectsNameMap["pull"] = _obj282;
_obj283 = {
"elementtype": "object",
"name": "push",
"type": "command",
"property": "push",
"isverb": true,
"pattern": "^push (?<object>.*)$",
"defaulttemplate": "DefaultPush",
"_js_name": "_obj283",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["push"] = _obj283;
allCommands.push(_obj283);
objectsNameMap["push"] = _obj283;
_obj284 = {
"elementtype": "object",
"name": "read",
"type": "command",
"property": "read",
"isverb": true,
"pattern": "^read (?<object>.*)$",
"defaulttemplate": "DefaultRead",
"_js_name": "_obj284",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["read"] = _obj284;
allCommands.push(_obj284);
objectsNameMap["read"] = _obj284;
_obj285 = {
"elementtype": "object",
"name": "search",
"type": "command",
"property": "search",
"isverb": true,
"pattern": "^search (?<object>.*)$",
"defaulttemplate": "DefaultSearch",
"_js_name": "_obj285",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["search"] = _obj285;
allCommands.push(_obj285);
objectsNameMap["search"] = _obj285;
_obj286 = {
"elementtype": "object",
"name": "show",
"type": "command",
"property": "show",
"isverb": true,
"pattern": "^show (?<object>.*)$",
"defaulttemplate": "DefaultShow",
"_js_name": "_obj286",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["show"] = _obj286;
allCommands.push(_obj286);
objectsNameMap["show"] = _obj286;
_obj287 = {
"elementtype": "object",
"name": "siton",
"type": "command",
"property": "sit",
"isverb": true,
"pattern": "^sit on (?<object>.*)$|^sit upon (?<g2_map_object>.*)$|^sit down on (?<g3_map_object>.*)$|^sit down upon (?<g4_map_object>.*)$",
"defaulttemplate": "DefaultSit",
"_js_name": "_obj287",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["siton"] = _obj287;
allCommands.push(_obj287);
objectsNameMap["siton"] = _obj287;
_obj288 = {
"elementtype": "object",
"name": "smell",
"type": "command",
"property": "smell",
"isverb": true,
"pattern": "^smell (?<object>.*)$|^sniff (?<g2_map_object>.*)$",
"defaulttemplate": "DefaultSmell",
"_js_name": "_obj288",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["smell"] = _obj288;
allCommands.push(_obj288);
objectsNameMap["smell"] = _obj288;
_obj289 = {
"elementtype": "object",
"name": "taste",
"type": "command",
"property": "taste",
"isverb": true,
"pattern": "^taste (?<object>.*)$",
"defaulttemplate": "DefaultTaste",
"_js_name": "_obj289",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["taste"] = _obj289;
allCommands.push(_obj289);
objectsNameMap["taste"] = _obj289;
_obj290 = {
"elementtype": "object",
"name": "throw",
"type": "command",
"property": "throw",
"isverb": true,
"pattern": "^throw (?<object>.*)$",
"defaulttemplate": "DefaultThrow",
"_js_name": "_obj290",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["throw"] = _obj290;
allCommands.push(_obj290);
objectsNameMap["throw"] = _obj290;
_obj291 = {
"elementtype": "object",
"name": "tie",
"type": "command",
"property": "tie",
"isverb": true,
"pattern": "^tie (?<object>.*)$",
"defaulttemplate": "DefaultTie",
"_js_name": "_obj291",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["tie"] = _obj291;
allCommands.push(_obj291);
objectsNameMap["tie"] = _obj291;
_obj292 = {
"elementtype": "object",
"name": "touch",
"type": "command",
"property": "touch",
"isverb": true,
"pattern": "^touch (?<object>.*)$",
"defaulttemplate": "DefaultTouch",
"_js_name": "_obj292",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["touch"] = _obj292;
allCommands.push(_obj292);
objectsNameMap["touch"] = _obj292;
_obj293 = {
"elementtype": "object",
"name": "turnon",
"type": "command",
"property": "turnon",
"isverb": true,
"pattern": "^turn on (?<object>.*)$|^turn (?<g2_map_object>.*) on$|^switch on (?<g3_map_object>.*)$|^switch (?<g4_map_object>.*) on$",
"defaulttemplate": "DefaultTurnOn",
"_js_name": "_obj293",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["turnon"] = _obj293;
allCommands.push(_obj293);
objectsNameMap["turnon"] = _obj293;
_obj294 = {
"elementtype": "object",
"name": "turnoff",
"type": "command",
"property": "turnoff",
"isverb": true,
"pattern": "^turn off (?<object>.*)$|^turn (?<g2_map_object>.*) off$|^switch off (?<g3_map_object>.*)$|^switch (?<g4_map_object>.*) off$",
"defaulttemplate": "DefaultTurnOff",
"_js_name": "_obj294",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["turnoff"] = _obj294;
allCommands.push(_obj294);
objectsNameMap["turnoff"] = _obj294;
_obj295 = {
"elementtype": "object",
"name": "turn",
"type": "command",
"property": "turn",
"isverb": true,
"pattern": "^turn (?<object>.*)$",
"defaulttemplate": "DefaultTurn",
"_js_name": "_obj295",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["turn"] = _obj295;
allCommands.push(_obj295);
objectsNameMap["turn"] = _obj295;
_obj296 = {
"elementtype": "object",
"name": "unlock",
"type": "command",
"property": "unlock",
"isverb": true,
"pattern": "^unlock (?<object>.*)$",
"defaulttemplate": "DefaultUnlock",
"_js_name": "_obj296",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["unlock"] = _obj296;
allCommands.push(_obj296);
objectsNameMap["unlock"] = _obj296;
_obj297 = {
"elementtype": "object",
"name": "untie",
"type": "command",
"property": "untie",
"isverb": true,
"pattern": "^untie (?<object>.*)$",
"defaulttemplate": "DefaultUntie",
"_js_name": "_obj297",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["untie"] = _obj297;
allCommands.push(_obj297);
objectsNameMap["untie"] = _obj297;
_obj298 = {
"elementtype": "object",
"name": "wear",
"type": "command",
"property": "wear",
"isverb": true,
"pattern": "^wear (?<object>.*)$",
"defaulttemplate": "DefaultWear",
"_js_name": "_obj298",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["wear"] = _obj298;
allCommands.push(_obj298);
objectsNameMap["wear"] = _obj298;
_obj299 = {
"elementtype": "object",
"name": "listen",
"type": "command",
"pattern": "^listen$",
"script": function(parameters) { OutputText (Template("DefaultListen")); },
"_js_name": "_obj299",
"_types": ["defaultcommand"]
};
elementsNameMap["listen"] = _obj299;
allCommands.push(_obj299);
objectsNameMap["listen"] = _obj299;
_obj300 = {
"elementtype": "object",
"name": "jump",
"type": "command",
"pattern": "^jump$",
"script": function(parameters) { OutputText (Template("DefaultJump")); },
"_js_name": "_obj300",
"_types": ["defaultcommand"]
};
elementsNameMap["jump"] = _obj300;
allCommands.push(_obj300);
objectsNameMap["jump"] = _obj300;
_obj301 = {
"elementtype": "object",
"name": "sit",
"type": "command",
"pattern": "^sit$|^sit down$",
"script": function(parameters) { OutputText (Template("DefaultSitDown")); },
"_js_name": "_obj301",
"_types": ["defaultcommand"]
};
elementsNameMap["sit"] = _obj301;
allCommands.push(_obj301);
objectsNameMap["sit"] = _obj301;
_obj302 = {
"elementtype": "object",
"name": "lie",
"type": "command",
"pattern": "^lie$|^lie down$",
"script": function(parameters) { OutputText (Template("DefaultLieDown")); },
"_js_name": "_obj302",
"_types": ["defaultcommand"]
};
elementsNameMap["lie"] = _obj302;
allCommands.push(_obj302);
objectsNameMap["lie"] = _obj302;
_obj303 = {
"elementtype": "object",
"name": "sleep",
"type": "command",
"pattern": "^sleep$|^rest$",
"script": function(parameters) { OutputText (Template("DefaultSleep")); },
"_js_name": "_obj303",
"_types": ["defaultcommand"]
};
elementsNameMap["sleep"] = _obj303;
allCommands.push(_obj303);
objectsNameMap["sleep"] = _obj303;
_obj304 = {
"elementtype": "object",
"name": "wait",
"type": "command",
"pattern": "^wait$|^z$",
"script": function(parameters) { OutputText (Template("DefaultWait")); },
"_js_name": "_obj304",
"_types": ["defaultcommand"]
};
elementsNameMap["wait"] = _obj304;
allCommands.push(_obj304);
objectsNameMap["wait"] = _obj304;
_obj305 = {
"elementtype": "object",
"name": "xyzzy",
"type": "command",
"pattern": "^xyzzy$",
"script": function(parameters) { OutputText (Template("DefaultXyzzy")); },
"_js_name": "_obj305",
"_types": ["defaultcommand"]
};
elementsNameMap["xyzzy"] = _obj305;
allCommands.push(_obj305);
objectsNameMap["xyzzy"] = _obj305;
_obj306 = {
"elementtype": "object",
"name": "help",
"type": "command",
"pattern": "^help$|^\\?$",
"script": function(parameters) { OutputText (Template("DefaultHelp")); },
"_js_name": "_obj306",
"_types": ["defaultcommand"]
};
elementsNameMap["help"] = _obj306;
allCommands.push(_obj306);
objectsNameMap["help"] = _obj306;
_obj307 = {
"elementtype": "object",
"name": "save",
"type": "command",
"pattern": "^save$",
"script": function(parameters) { request ("RequestSave", ""); },
"_js_name": "_obj307",
"_types": ["defaultcommand"]
};
elementsNameMap["save"] = _obj307;
allCommands.push(_obj307);
objectsNameMap["save"] = _obj307;
_obj308 = {
"elementtype": "object",
"name": "Northern Meadow",
"type": "object",
"usedefaultprefix": false,
"prefix": "the",
"description": function() { if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("4", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "4");
OutputText ("<br/>You are in the meadow outside your hovel, several acres of wild grassland and wild flowers. You may be dirt poor, but the beauty of the landscape is some consolation.<br/><br/>As you step out of your home there is a beating of wings above your head, looking up you see a pigeon rapidly disappearing out of sight, and a letter flutters to your feet, you pick it up.<br/><br/> On the wind you can hear a distant shout of what sounds like \"Fuck yooouuuu...\" coming from the pigeon's direction before it disappears from sight.");
MakeObjectVisible (_obj310);
AddToInventory (_obj310);}
else { OutputText ("<br/>You are in the meadow outside your hovel, several acres of wild grassland and wild flowers. You may be dirt poor, but the beauty of the landscape is some consolation."); } },
"_js_name": "_obj308",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Northern Meadow"] = _obj308;
allObjects.push(_obj308);
objectsNameMap["Northern Meadow"] = _obj308;
_obj309 = {
"elementtype": "object",
"name": "k3",
"parent": _obj308,
"type": "exit",
"alias": "in",
"_js_name": "_obj309",
"_types": ["indirection", "defaultexit"],
"alt": [""],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k3"] = _obj309;
objectReferences.push(["_obj309", "to", "_obj343"]);
allExits.push(_obj309);
objectsNameMap["k3"] = _obj309;
_obj310 = {
"elementtype": "object",
"name": "Letter",
"parent": _obj308,
"type": "object",
"look": "The letter is addressed to the Bony King of Nowhere, at his palace in the capital Lost, many miles to the south. <br/><br/>On the reverse is written;<br/><br/><i>\"If found please deliver personally to the King, the contents are confidential and you are forbidden from reading them. Failure to comply with either of these requests will result in summary execution.\"<br/></i><br/>Well that's just perfect you think, you've always hated a) the capital, b) the monarchy, and c) the south in general. ",
"take": true,
"drop": false,
"dropmsg": "remembering the threat of execution you decide not to drop the letter",
"read": "You're dying to know what's in the letter, but the instructions written on it forbid you from doing so. You can examine it.",
"feature_container": true,
"open": true,
"close": true,
"openmsg": "You can't open it, the King will have you killed!",
"closemsg": "It's already closed",
"visible": false,
"volume": 1,
"displayverbs": ["Look at", "Take", "Open", "Close"],
"inventoryverbs": ["Look at", "Use", "Drop", "Open", "Close"],
"hack": function() { if (Got(_obj360)) {
OutputText ("You consider chopping the letter into pieces, but the King has spies everywhere and you value your life");
}
else if (Got(_obj356)) {
OutputText ("Your axe is too blunt (and it's probably not a good idea)");
}
else {
OutputText ("You need a tool for that");
} },
"_js_name": "_obj310",
"_types": ["container_closed", "defaultobject"],
"container": true,
"use": false,
"givesingle": false,
"gender": "it",
"article": "it",
"isopen": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Letter"] = _obj310;
allObjects.push(_obj310);
objectsNameMap["Letter"] = _obj310;
_obj311 = {
"elementtype": "object",
"name": "k4",
"parent": _obj308,
"type": "exit",
"alias": "south",
"_js_name": "_obj311",
"_types": ["southdirection", "defaultexit"],
"alt": ["s"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k4"] = _obj311;
objectReferences.push(["_obj311", "to", "_obj313"]);
allExits.push(_obj311);
objectsNameMap["k4"] = _obj311;
_obj312 = {
"elementtype": "object",
"name": "wild flowers",
"parent": _obj308,
"type": "object",
"look": "There is a multitude of beautiful wild flowers, bowing gently in the breeze",
"scenery": true,
"takemsg": "You decide to leave the flowers for the visiting bees to enjoy",
"_js_name": "_obj312",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["wild flowers"] = _obj312;
allObjects.push(_obj312);
objectsNameMap["wild flowers"] = _obj312;
_obj313 = {
"elementtype": "object",
"name": "Southern Meadow",
"type": "object",
"description": "<br/>You are in the Southern Meadow, on the edge of the Northern Woods",
"usedefaultprefix": false,
"prefix": "the",
"_js_name": "_obj313",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Southern Meadow"] = _obj313;
allObjects.push(_obj313);
objectsNameMap["Southern Meadow"] = _obj313;
_obj314 = {
"elementtype": "object",
"name": "fallen tree",
"parent": _obj313,
"type": "object",
"alt": ["tree", "down tree", "up tree"],
"look": "It's a fallen poplar tree, looks like it got too top heavy and was ripped down by the wind",
"takemsg": "It's far too heavy!",
"hack": function() { if (Got(_obj360)) {
OutputText ("You swing your trusty axe and reduce the tree to four body-length logs<br/>");
MakeObjectVisible (_obj317);
MakeObjectInvisible (_obj314);
}
else if (Got(_obj356)) {
OutputText ("You swing your axe at the fallen tree, but it's too blunt to chop it. <br/>");
}
else {
OutputText ("You need a tool for that");
} },
"_js_name": "_obj314",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["fallen tree"] = _obj314;
allObjects.push(_obj314);
objectsNameMap["fallen tree"] = _obj314;
_obj315 = {
"elementtype": "object",
"name": "apple",
"parent": _obj313,
"type": "object",
"feature_edible": true,
"take": true,
"eatmsg": "you nibble a bit of the apple, but fruit isn't really your thing",
"eat": "You detest fruit so you decide to not eat the apple",
"throw": "You throw the apple, as soon as it's in the air Dylan is off like a shot, he catches it and returns it to you",
"look": "A medium sized apple of the Cox's variety, it is mottled green and red.",
"feature_usegive": true,
"volume": 1,
"hack": function() { if (Got(_obj360)) {
OutputText ("That would be fruitless.");
}
else if (Got(_obj356)) {
OutputText ("Your axe is blunt");
}
else {
OutputText ("You need a tool for that");
} },
"giveto": {"Horse": function() { OutputText ("You place the apple in the flat palm of your hand and offer it up to the horse. Its lips tickle your hand as it picks it up, it munches it noisily. You smell the tart tang of the apple as it's masticated. <br/><br/>The horse eyes you and gently snorts. You've made a friend.");
SetObjectFlagOn (_obj438, "mates");
RemoveObject (_obj315); } },
"_js_name": "_obj315",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["apple"] = _obj315;
allObjects.push(_obj315);
objectsNameMap["apple"] = _obj315;
_obj316 = {
"elementtype": "object",
"name": "k5",
"parent": _obj313,
"type": "exit",
"alias": "north",
"to": _obj308,
"_js_name": "_obj316",
"_types": ["northdirection", "defaultexit"],
"alt": ["n"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k5"] = _obj316;
allExits.push(_obj316);
objectsNameMap["k5"] = _obj316;
_obj317 = {
"elementtype": "object",
"name": "Logs",
"parent": _obj313,
"type": "object",
"visible": false,
"take": true,
"look": "Four body-length sized logs from a poplar tree",
"usedefaultprefix": false,
"feature_usegive": true,
"alt": ["logs together", "logs with rope"],
"takemsg": "You pick them up, they're not heavy",
"dropmsg": "The four logs strike the ground making a rhythm..a log-a-rhythm",
"tie": function() { if (Got(_obj376)) {
OutputText ("You lash the logs together with the rope, you now have what could very generously be described as a raft. Dylan eyes it suspiciously. ");
AddToInventory (_obj377);
RemoveObject (_obj376);
RemoveObject (_obj317);
}
else if (Got(_obj330)) {
OutputText ("The reeds are not strong enough to tie the logs with");
}
else {
OutputText ("You need something to tie them with");
} },
"lash": function() { if (Got(_obj376)) {
OutputText ("You lash the logs together with the rope, you now have what could very generously be described as a raft. Dylan eyes it suspiciously. ");
AddToInventory (_obj377);
RemoveObject (_obj376);
RemoveObject (_obj317);
}
else if (Got(_obj330)) {
OutputText ("The reeds are not strong enough to tie the logs with");
}
else {
OutputText ("You need something to lash them with");
} },
"hack": function() { if (Got(_obj360)) {
OutputText ("You consider reducing the logs to matchwood, but decide they may prove more useful in their current logish formation.");
}
else if (!(Got(_obj360))) {
OutputText ("You would need a tool to do that");
} },
"selfuseon": {"Broken Bridge": function() { OutputText ("The logs are too short and too weak to span the gap in the bridge"); } },
"_js_name": "_obj317",
"_types": ["plural", "defaultobject"],
"gender": "they",
"article": "them",
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Logs"] = _obj317;
allObjects.push(_obj317);
objectsNameMap["Logs"] = _obj317;
_obj318 = {
"elementtype": "object",
"name": "k6",
"parent": _obj313,
"type": "exit",
"alias": "south",
"_js_name": "_obj318",
"_types": ["southdirection", "defaultexit"],
"alt": ["s"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k6"] = _obj318;
objectReferences.push(["_obj318", "to", "_obj366"]);
allExits.push(_obj318);
objectsNameMap["k6"] = _obj318;
_obj319 = {
"elementtype": "object",
"name": "k7",
"parent": _obj313,
"type": "exit",
"alias": "east",
"_js_name": "_obj319",
"_types": ["eastdirection", "defaultexit"],
"alt": ["e"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k7"] = _obj319;
objectReferences.push(["_obj319", "to", "_obj333"]);
allExits.push(_obj319);
objectsNameMap["k7"] = _obj319;
_obj320 = {
"elementtype": "object",
"name": "Woodland Clearing",
"type": "object",
"description": "<br/>A clearing in the wood, looks like it was once a small holding. There is a carpet of thyme underfoot that releases a sweet tang into the air as you walk across it.",
"_js_name": "_obj320",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Woodland Clearing"] = _obj320;
allObjects.push(_obj320);
objectsNameMap["Woodland Clearing"] = _obj320;
_obj321 = {
"elementtype": "object",
"name": "k8",
"parent": _obj320,
"type": "exit",
"alias": "north",
"_js_name": "_obj321",
"_types": ["northdirection", "defaultexit"],
"alt": ["n"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k8"] = _obj321;
objectReferences.push(["_obj321", "to", "_obj366"]);
allExits.push(_obj321);
objectsNameMap["k8"] = _obj321;
_obj322 = {
"elementtype": "object",
"name": "k9",
"parent": _obj320,
"type": "exit",
"alias": "south",
"_js_name": "_obj322",
"_types": ["southdirection", "defaultexit"],
"alt": ["s"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k9"] = _obj322;
objectReferences.push(["_obj322", "to", "_obj327"]);
allExits.push(_obj322);
objectsNameMap["k9"] = _obj322;
_obj323 = {
"elementtype": "object",
"name": "Ruined hovel",
"parent": _obj320,
"type": "object",
"hack": "It's already ruined",
"look": function() { if (GetBoolean(_obj324, "rod_taken")) {
if (GetBoolean(_obj325, "mug_taken")) {
OutputText ("An abandoned and collapsed circular hovel, it is empty.");
}
else {
OutputText ("An abandoned and collapsed circular hovel. Amongst its shattered remains you spy what looks like a mug");
}
}
else {
if (GetBoolean(_obj325, "mug_taken")) {
OutputText ("An abandoned and collapsed circular hovel. Amongst its shattered remains you spy what looks like a fishing rod");
}
else {
OutputText ("An abandoned and collapsed circular hovel. Amongst its shattered remains you spy what looks like a mug and a fishing rod");
}
} },
"_js_name": "_obj323",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Ruined hovel"] = _obj323;
allObjects.push(_obj323);
objectsNameMap["Ruined hovel"] = _obj323;
_obj324 = {
"elementtype": "object",
"name": "Broken fishing rod",
"parent": _obj320,
"type": "object",
"scenery": true,
"alias": "Broken fishing rod",
"take": true,
"look": "A bamboo fishing rod, with a cork handle. It has a line and hook, but the reel is seized with rust. ",
"feature_usegive": true,
"volume": 1,
"ontake": function() { SetObjectFlagOn (_obj324, "rod_taken"); },
"hack": function() { if (Got(_obj360)) {
OutputText ("You consider smashing the rod to bits with your axe, but you mull it over and decide against it");
}
else if (Got(_obj356)) {
OutputText ("You consider smashing the rod to bits with your axe, but you mull it over and decide against it");
}
else {
OutputText ("You need a tool to do that");
} },
"giveto": {"Tinker": function() { OutputText ("<br/>\"Ah, haven't seen this model in years, a real classic in its day. I can fix it for you, but I need a favour in return. Can you take this sack of wheat to the Windmill and have it milled for me please?\"<br/><br/>The Tinker hands you a sack of wheat");
AddToInventory (_obj427);
RemoveObject (_obj324); } },
"_js_name": "_obj324",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Broken fishing rod"] = _obj324;
allObjects.push(_obj324);
objectsNameMap["Broken fishing rod"] = _obj324;
_obj325 = {
"elementtype": "object",
"name": "Mug",
"parent": _obj320,
"type": "object",
"alias": "Chipped Mug",
"visible": true,
"look": "An old brown clay mug, chipped on the rim. On the side it reads 'Mug puns are tea-dious'",
"take": true,
"scenery": true,
"feature_usegive": true,
"ontake": function() { SetObjectFlagOn (_obj325, "mug_taken"); },
"hack": function() { if (Got(_obj360)) {
OutputText ("You consider smashing the mug to pieces but think better of it");
}
else if (Got(_obj356)) {
OutputText ("You consider smashing the mug to pieces but think better of it");
}
else {
OutputText ("You need a tool for that");
} },
"_js_name": "_obj325",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Mug"] = _obj325;
allObjects.push(_obj325);
objectsNameMap["Mug"] = _obj325;
_obj326 = {
"elementtype": "object",
"name": "thyme",
"parent": _obj320,
"type": "object",
"look": "A powerful herb, Mussolini made the trains run on this stuff",
"scenery": true,
"takemsg": "You decide to leave the thyme undisturbed, it would be a waste",
"hack": "You decide to leave the thyme undisturbed, it would be a waste",
"_js_name": "_obj326",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["thyme"] = _obj326;
allObjects.push(_obj326);
objectsNameMap["thyme"] = _obj326;
_obj327 = {
"elementtype": "object",
"name": "Northbank of the River Void",
"type": "object",
"usedefaultprefix": false,
"prefix": "the",
"descprefix": "You are at",
"description": "<br/>You are on the Northbank of the River Void. The river is roaring past with a fierce current.",
"_js_name": "_obj327",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Northbank of the River Void"] = _obj327;
allObjects.push(_obj327);
objectsNameMap["Northbank of the River Void"] = _obj327;
_obj328 = {
"elementtype": "object",
"name": "k10",
"parent": _obj327,
"type": "exit",
"alias": "north",
"to": _obj320,
"_js_name": "_obj328",
"_types": ["northdirection", "defaultexit"],
"alt": ["n"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k10"] = _obj328;
allExits.push(_obj328);
objectsNameMap["k10"] = _obj328;
_obj329 = {
"elementtype": "object",
"name": "Broken Bridge",
"parent": _obj327,
"type": "object",
"look": "A wooden footbridge, which has collapsed in the middle leaving a yawning gap down to the dangerous river below. What a terrible thing to happen, you can't get over it.",
"fix": "It's beyond repair",
"jump": "You take a run up to the bridge, but as you approach the gap you realise you'll never make it, and just manage to stop in time. You retreat to the safety of the riverbank.",
"alias": "Broken Bridge",
"repair": "It's beyond repair",
"hack": function() { if (Got(_obj360)) {
OutputText ("You consider hacking up the bridge, but it's already broken and the wood is too rotten to be of use");
}
else if (Got(_obj356)) {
OutputText ("Your axe is too blunt");
}
else {
OutputText ("You need a tool to do that");
} },
"_js_name": "_obj329",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Broken Bridge"] = _obj329;
allObjects.push(_obj329);
objectsNameMap["Broken Bridge"] = _obj329;
_obj330 = {
"elementtype": "object",
"name": "Reeds",
"parent": _obj327,
"type": "object",
"usedefaultprefix": false,
"scenery": true,
"take": true,
"feature_usegive": true,
"weave": "Nice idea, but you lack the skill",
"look": "They are long and fibrous water reeds",
"takemsg": "You pick a large bail of reeds",
"prefix": "some",
"tie": "The reeds aren't strong enough to tie things with",
"twist": "Nice idea, but you lack the skill to make them into something useful",
"hack": "You need them whole",
"giveto": {"Wood Gnome Chompsky": function() { OutputText ("\"Ah river reeds, perfect for rope making, let me sort that out for you\". With his quick and nimble fingers the Gnome weaves the reeds together with astonishing speed. He hands you a long coil of strong rope.");
RemoveObject (_obj330);
AddToInventory (_obj376); } },
"selfuseon": {"Logs": function() { OutputText ("The reeds aren't strong enough to tie things with"); } },
"_js_name": "_obj330",
"_types": ["plural", "defaultobject"],
"gender": "they",
"article": "them",
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Reeds"] = _obj330;
allObjects.push(_obj330);
objectsNameMap["Reeds"] = _obj330;
_obj331 = {
"elementtype": "object",
"name": "River Void",
"parent": _obj327,
"type": "object",
"alt": ["river", "void", "riverbank"],
"look": "The River Void is fast, deep and wide. The water level is unusually high and it is roaring loudly as it flows past. It looks like the bridge across has collapsed. On the edge of the riverbank there are a thick beds of reeds.",
"usedefaultprefix": false,
"prefix": "the",
"_js_name": "_obj331",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["River Void"] = _obj331;
allObjects.push(_obj331);
objectsNameMap["River Void"] = _obj331;
_obj332 = {
"elementtype": "object",
"name": "k11",
"parent": _obj327,
"type": "command",
"anonymous": true,
"pattern": "^swim$|^swim across$|^wade across$|^swim across river$|^wade across river$",
"script": function(parameters) { OutputText ("It's far too dangerous to swim across"); },
"_js_name": "_obj332",
"_types": ["defaultcommand"]
};
elementsNameMap["k11"] = _obj332;
allCommands.push(_obj332);
objectsNameMap["k11"] = _obj332;
_obj333 = {
"elementtype": "object",
"name": "Coleys Mill",
"type": "object",
"alias": "Coley's Mill",
"usedefaultprefix": false,
"prefix": "",
"descprefix": "You are at",
"description": function() { if (GetBoolean(_obj393, "working_miller")) {
OutputText ("You are stood in the yard of Coley's Mill, towering above you is the windmill, it is painted bright red. There is a stiff breeze today and the sails are turning at a fair pace.");
}
else {
OutputText ("You are stood in the yard of Coley's Mill, towering above you is the windmill, it is painted bright red. There is a stiff breeze today but the sails are motionless.");
} },
"_js_name": "_obj333",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Coleys Mill"] = _obj333;
allObjects.push(_obj333);
objectsNameMap["Coleys Mill"] = _obj333;
_obj334 = {
"elementtype": "object",
"name": "k12",
"parent": _obj333,
"type": "exit",
"alias": "west",
"to": _obj313,
"_js_name": "_obj334",
"_types": ["westdirection", "defaultexit"],
"alt": ["w"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k12"] = _obj334;
allExits.push(_obj334);
objectsNameMap["k12"] = _obj334;
_obj335 = {
"elementtype": "object",
"name": "k13",
"parent": _obj333,
"type": "exit",
"alias": "in",
"_js_name": "_obj335",
"_types": ["indirection", "defaultexit"],
"alt": [""],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k13"] = _obj335;
objectReferences.push(["_obj335", "to", "_obj388"]);
allExits.push(_obj335);
objectsNameMap["k13"] = _obj335;
_obj336 = {
"elementtype": "object",
"name": "Hand Water Pump",
"parent": _obj333,
"type": "object",
"look": "A green hand pump fixed over a well, there is a large lever on the side of it.",
"feature_usegive": true,
"pump": "You crank the handle of the pump and clear, fresh and very cold water spurts out of the spout and down the drain",
"use": function() { OutputText ("You crank the handle of the pump and clear, fresh and very cold water spurts out of the spout and down the drain."); },
"hack": function() { if (Got(_obj360)) {
OutputText ("You swing at the pump with your axe, it makes a large 'CLANG!' noise as you hit it, and it jars your arms terribly, you feel like an idiot.");
}
else if (Got(_obj356)) {
OutputText ("You swing at the pump with your axe, it makes a large 'CLANG' noise as you hit it, and it jars your arms terribly, you feel like an idiot. ");
}
else {
OutputText ("You need a tool to do that, but probably not a great idea anyway!");
} },
"_js_name": "_obj336",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Hand Water Pump"] = _obj336;
allObjects.push(_obj336);
objectsNameMap["Hand Water Pump"] = _obj336;
_obj337 = {
"elementtype": "object",
"name": "Jug full of water",
"parent": _obj333,
"type": "object",
"alias": "Cider Jug (full of freezing cold water)",
"visible": false,
"take": true,
"look": "An quart sized jug of cider, full of freezing cold water. Written on the label it says 'Dicken's Cider, 8.5%, please drink responsibly.'",
"_js_name": "_obj337",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Jug full of water"] = _obj337;
allObjects.push(_obj337);
objectsNameMap["Jug full of water"] = _obj337;
_obj338 = {
"elementtype": "object",
"name": "k14",
"parent": _obj333,
"type": "command",
"anonymous": true,
"pattern": "^fill jug with water$|^pump water into jug$|^put jug under pump$|^put water in jug$|^fill jug$",
"script": function(parameters) { if (Got(_obj391)) {
OutputText ("You place the jug under the spout of the pump and crank the lever, with three pumps the jug is full of freezing cold water, you pick it up");
MakeObjectInvisible (_obj391);
MakeObjectVisible (_obj337);
AddToInventory (_obj337);
}
else {
OutputText ("you are not carrying a jug");
} },
"_js_name": "_obj338",
"_types": ["defaultcommand"]
};
elementsNameMap["k14"] = _obj338;
allCommands.push(_obj338);
objectsNameMap["k14"] = _obj338;
_obj339 = {
"elementtype": "object",
"name": "lever",
"parent": _obj333,
"type": "object",
"look": "The lever of the pump, used to pump the water out.",
"push": "You crank the handle of the pump and clear, fresh and very cold water spurts out of the spout and down the drain",
"pump": "You crank the handle of the pump and clear, fresh and very cold water spurts out of the spout and down the drain",
"crank": "You crank the handle of the pump and clear, fresh and very cold water spurts out of the spout and down the drain",
"pull": "You crank the handle of the pump and clear, fresh and very cold water spurts out of the spout and down the drain",
"feature_usegive": true,
"scenery": true,
"use": function() { OutputText ("You crank the handle of the pump and clear, fresh and very cold water spurts out of the spout and down the drain"); },
"_js_name": "_obj339",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["lever"] = _obj339;
allObjects.push(_obj339);
objectsNameMap["lever"] = _obj339;
_obj340 = {
"elementtype": "object",
"name": "Windmill scenery",
"parent": _obj333,
"type": "object",
"scenery": true,
"alias": "Windmill",
"look": function() { if (GetBoolean(_obj393, "working_miller")) {
OutputText ("The bright red windmill towers above you, it has four large slated wooden sails which are spinning, the saiils and gearing are making a pleasing repetitive , \"Koor-keeer, chick-a-chick..\" noise as they turn.");
}
else {
OutputText ("The bright red windmill towers above you, it has four large slated wooden sails which are stationary even though there is a stiff breeze.");
} },
"_js_name": "_obj340",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Windmill scenery"] = _obj340;
allObjects.push(_obj340);
objectsNameMap["Windmill scenery"] = _obj340;
_obj341 = {
"elementtype": "object",
"name": "k15",
"parent": _obj333,
"type": "exit",
"alias": "north",
"_js_name": "_obj341",
"_types": ["northdirection", "defaultexit"],
"alt": ["n"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k15"] = _obj341;
objectReferences.push(["_obj341", "to", "_obj400"]);
allExits.push(_obj341);
objectsNameMap["k15"] = _obj341;
_obj342 = {
"elementtype": "object",
"name": "k16",
"type": "command",
"anonymous": true,
"property": "sp",
"isverb": true,
"pattern": "^sp (?<object>.*)$",
"defaultexpression": "\"You can't sp \" + object.article + \".\"",
"_js_name": "_obj342",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k16"] = _obj342;
allCommands.push(_obj342);
objectsNameMap["k16"] = _obj342;
_obj343 = {
"elementtype": "object",
"name": "Your Hovel",
"type": "object",
"description": "<br/>You are in your hovel in the northernmost borderlands of the Kingdom of Nowhere.<br/><br/>It is a round wattle and daub hut. There is a fireplace in the middle with a hole in the thatch roof above it acting as a chimney.<br/><br/>Around the circumference of the room there are a few sticks of furniture and rags that represent the totality of your worldly possessions.<br/><br/><i>(type 'hints' for game specific help at anytime</i>)",
"usedefaultprefix": false,
"_js_name": "_obj343",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Your Hovel"] = _obj343;
allObjects.push(_obj343);
objectsNameMap["Your Hovel"] = _obj343;
_obj344 = {
"elementtype": "object",
"name": "fireplace",
"parent": _obj343,
"type": "object",
"alt": ["fire"],
"scenery": true,
"light": "You could rekindle the fire but you decide not to as you are low on fuel, besides you need to get out and about",
"look": function() { if (GetBoolean(_obj354, "taken")) {
OutputText ("A round circle of flat stones with the ashen remains of last night's fire smouldering in the middle. ");
}
else {
OutputText ("A round circle of flat stones with the ashen remains of last night's fire smouldering in the middle. Leaning against the fireplace is a shovel.");
} },
"_js_name": "_obj344",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["fireplace"] = _obj344;
allObjects.push(_obj344);
objectsNameMap["fireplace"] = _obj344;
_obj345 = {
"elementtype": "object",
"name": "furniture",
"parent": _obj343,
"type": "object",
"scenery": true,
"usedefaultprefix": false,
"look": "Furniture might be a rather grand term what consists of a filthy straw bed and a battered wooden chest",
"_js_name": "_obj345",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["furniture"] = _obj345;
allObjects.push(_obj345);
objectsNameMap["furniture"] = _obj345;
_obj346 = {
"elementtype": "object",
"name": "Straw Bed",
"parent": _obj343,
"type": "object",
"scenery": true,
"alt": ["filthy straw bed", "bed", "straw"],
"look": "Several large rectangular bales of hay lashed together, it is blackened with grime and splattered with mud",
"takemsg": "It's too heavy to carry",
"hack": "That would be axe-zessive!",
"_js_name": "_obj346",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Straw Bed"] = _obj346;
allObjects.push(_obj346);
objectsNameMap["Straw Bed"] = _obj346;
_obj347 = {
"elementtype": "object",
"name": "k17",
"parent": _obj343,
"type": "exit",
"alias": "out",
"to": _obj308,
"_js_name": "_obj347",
"_types": ["outdirection", "defaultexit"],
"alt": ["o"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k17"] = _obj347;
allExits.push(_obj347);
objectsNameMap["k17"] = _obj347;
_obj348 = {
"elementtype": "object",
"name": "Rags",
"parent": _obj343,
"type": "object",
"scenery": true,
"take": true,
"feature_usegive": true,
"usedefaultprefix": false,
"hack": "That would be axe-zessive!",
"look": function() { if (Got(_obj348)) {
OutputText ("A few rags of cloth");
}
else {
OutputText ("A pile of rags that were once clothes, now too threadbare to wear");
} },
"selfuseon": {"Dull Glass Sphere": function() { if (Got(_obj348)) {
OutputText ("Using the rags from your home you polish the surface of he sphere until it shines and reflects an inverted curved image of your face.");
RemoveObject (_obj444);
AddToInventory (_obj471);
}
else {
OutputText ("You need something to clean it with, a piece of cloth perhaps?");
} } },
"giveto": {"Wood Gnome Chompsky": function() { OutputText ("<br/>\"Hmm, this was nice cloth once upon a time, but it's too far gone for me to do anything with, sorry\" He hands the rags back to you."); } },
"_js_name": "_obj348",
"_types": ["plural", "defaultobject"],
"gender": "they",
"article": "them",
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Rags"] = _obj348;
allObjects.push(_obj348);
objectsNameMap["Rags"] = _obj348;
_obj349 = {
"elementtype": "object",
"name": "stones",
"parent": _obj343,
"type": "object",
"alias": "stones",
"scenery": true,
"alt": ["stone"],
"look": "A circle of flat whetstones bearing heavy scratch marks.",
"takemsg": "You don't want to carry these around!",
"_js_name": "_obj349",
"_types": ["plural", "defaultobject"],
"gender": "they",
"article": "them",
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["stones"] = _obj349;
allObjects.push(_obj349);
objectsNameMap["stones"] = _obj349;
_obj350 = {
"elementtype": "object",
"name": "Dylan",
"parent": _obj343,
"type": "object",
"look": "It's your faithful canine companion, he's an ageing Boxer mongrel of some sort, he has tan brown fur with a white patch on his chest. He's seen a few too many scrapes and doesn't smell too sweet, but you love him dearly and he's called Dylan.",
"prefix": "",
"alias": "Your Dog",
"alt": ["dylan", "dog"],
"takemsg": "You don't need to carry him, he'll follow you anywhere",
"speak": "Dylan looks up to you and barks excitedly",
"hack": "He's your only friend in the world, you'd never hurt him",
"kill": "",
"stroke": function() { if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("5", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "5");
OutputText ("Dylan nuzzles against your leg and looks up to you with doleful eyes, his tail wagging expectantly. Some of his moulting hair collects in your hand, you shove it in your pocket");
AddToInventory (_obj518);}
else { OutputText ("Dylan nuzzles against your leg and looks up to you with doleful eyes, his tail wagging expectantly."); } },
"_js_name": "_obj350",
"_types": ["namedmale", "defaultobject"],
"usedefaultprefix": false,
"displayverbs": ["Look at", "Speak to"],
"gender": "he",
"article": "him",
"visible": true,
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Dylan"] = _obj350;
allObjects.push(_obj350);
objectsNameMap["Dylan"] = _obj350;
_obj351 = {
"elementtype": "object",
"name": "roof",
"parent": _obj343,
"type": "object",
"visible": true,
"scenery": true,
"look": "The circular roof is made from straw thatch, with a small hole in the centre to let out the smoke from the fire",
"_js_name": "_obj351",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["roof"] = _obj351;
allObjects.push(_obj351);
objectsNameMap["roof"] = _obj351;
_obj352 = {
"elementtype": "object",
"name": "hole",
"parent": _obj343,
"type": "object",
"scenery": true,
"look": "A small hole in the centre of the roof, you made it to let out the smoke from the fire",
"_js_name": "_obj352",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["hole"] = _obj352;
allObjects.push(_obj352);
objectsNameMap["hole"] = _obj352;
_obj353 = {
"elementtype": "object",
"name": "scratch marks",
"parent": _obj343,
"type": "object",
"scenery": true,
"look": "Heavy scratch marks made from the repetitive action of sharpening tools",
"_js_name": "_obj353",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["scratch marks"] = _obj353;
allObjects.push(_obj353);
objectsNameMap["scratch marks"] = _obj353;
_obj354 = {
"elementtype": "object",
"name": "Shovel",
"parent": _obj343,
"type": "object",
"scenery": true,
"look": "A small wooden shovel that you use for removing ashes. It's a ground-breaking design.",
"take": true,
"feature_usegive": true,
"ontake": function() { SetObjectFlagOn (_obj354, "taken"); },
"_js_name": "_obj354",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Shovel"] = _obj354;
allObjects.push(_obj354);
objectsNameMap["Shovel"] = _obj354;
_obj355 = {
"elementtype": "object",
"name": "Battered Wooden Chest",
"parent": _obj343,
"type": "object",
"scenery": false,
"alt": ["wooden chest", "battered chest", "chest"],
"look": "An ancient wooden chest that has been repeatedly patched and repaired. You'll be pleased to know there is no lock.",
"feature_container": true,
"hidechildren": true,
"listchildren": true,
"takemsg": "It's too heavy to carry around",
"displayverbs": ["Look at", "Take", "Open", "Close"],
"inventoryverbs": ["Look at", "Use", "Drop", "Open", "Close"],
"_js_name": "_obj355",
"_types": ["container_closed", "defaultobject"],
"open": true,
"close": true,
"container": true,
"visible": true,
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Battered Wooden Chest"] = _obj355;
allObjects.push(_obj355);
objectsNameMap["Battered Wooden Chest"] = _obj355;
_obj356 = {
"elementtype": "object",
"name": "Blunt Axe",
"parent": _obj355,
"type": "object",
"take": true,
"dropmsg": "You drop the useful looking axe,  a wise move I'm sure",
"look": "An axe with an arms length wooden haft and a steel head with the letter L and the pattern of a rose embossed on it. It is your prized (and only) possession given to you by your father. It's blade is a sharp as Jack after a busy day.",
"alias": "axe",
"feature_usegive": true,
"sharpen": function() { if (_obj245.pov.parent == _obj343) {
OutputText ("You walk over to the hearthstones and sharpen the axe blade on one of them. After a minute or so it gleams with a wicked edge, it's now an axis of evil.<br/><br/>");
RemoveObject (_obj356);
AddToInventory (_obj360);
}
else if (!(_obj245.pov.parent == _obj343)) {
OutputText ("There is nothing here to sharpen it on.");
} },
"selfuseon": {"fallen tree": function() { OutputText ("You swing your axe at the fallen tree, but is too blunt to chop it. "); }, "stones": function() { if (_obj245.pov.parent == _obj343) {
OutputText ("You walk over to the hearthstones and sharpen the axe blade on one of them. After a minute or so it gleams with a wicked edge, it's now an axis of evil.<br/><br/>");
RemoveObject (_obj356);
AddToInventory (_obj360);
}
else if (!(_obj245.pov.parent == _obj343)) {
OutputText ("There are no suitable stones here to sharpen it on.");
} } },
"_js_name": "_obj356",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Blunt Axe"] = _obj356;
allObjects.push(_obj356);
objectsNameMap["Blunt Axe"] = _obj356;
_obj357 = {
"elementtype": "object",
"name": "hay",
"parent": _obj343,
"type": "object",
"alt": ["bales", "bales of hay", "straw"],
"takemsg": "You decide to leave the filthy hay where it is",
"scenery": true,
"_js_name": "_obj357",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["hay"] = _obj357;
allObjects.push(_obj357);
objectsNameMap["hay"] = _obj357;
_obj358 = {
"elementtype": "object",
"name": "player",
"parent": _obj343,
"type": "object",
"look": "You are thin and your skin is grimy, you are wearing ragged grey woollen clothing",
"alt": ["self"],
"pov_look": "You are thin and your skin is grimy, you are wearing grey ragged woollen clothing",
"_js_name": "_obj358",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["player"] = _obj358;
allObjects.push(_obj358);
objectsNameMap["player"] = _obj358;
_obj359 = {
"elementtype": "object",
"name": "k18",
"type": "command",
"anonymous": true,
"property": "sharpen",
"isverb": true,
"pattern": "^sharpen (?<object>.*)$",
"defaultexpression": "\"You can't sharpen \" + object.article + \".\"",
"_js_name": "_obj359",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k18"] = _obj359;
allCommands.push(_obj359);
objectsNameMap["k18"] = _obj359;
_obj360 = {
"elementtype": "object",
"name": "Sharp Axe",
"type": "object",
"look": "An axe with an arms length wooden haft and a sharpened steel head with the letter L and the pattern of a rose embossed on it. It is your prized (and only) possession given to you by your father. It's blade is sharp as frost.",
"take": true,
"feature_usegive": true,
"sharpen": "It's already sharp",
"dropmsg": "You drop the useful looking axe, a wise move I'm sure",
"selfuseon": {"fallen tree": function() { OutputText ("You swing your trusty axe and reduce the tree to four body-length logs");
MakeObjectInvisible (_obj314);
MakeObjectVisible (_obj317); }, "stones": function() { OutputText ("The axe is already sharpened"); } },
"_js_name": "_obj360",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Sharp Axe"] = _obj360;
allObjects.push(_obj360);
objectsNameMap["Sharp Axe"] = _obj360;
_obj361 = {
"elementtype": "object",
"name": "k19",
"type": "command",
"anonymous": true,
"property": "light",
"isverb": true,
"pattern": "^light (?<object>.*)$",
"defaultexpression": "\"You can't light \" + object.article + \".\"",
"_js_name": "_obj361",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k19"] = _obj361;
allCommands.push(_obj361);
objectsNameMap["k19"] = _obj361;
_obj362 = {
"elementtype": "object",
"name": "k20",
"type": "command",
"anonymous": true,
"property": "cut",
"isverb": true,
"pattern": "^cut (?<object>.*)$|^chop (?<g2_map_object>.*)$|^chop down (?<g3_map_object>.*)$|^cut up (?<g4_map_object>.*)$|^chop up (?<g5_map_object>.*)$",
"defaultexpression": "\"You can't cut; chop; chop down; cut up; chop up \" + object.article + \".\"",
"_js_name": "_obj362",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k20"] = _obj362;
allCommands.push(_obj362);
objectsNameMap["k20"] = _obj362;
_obj363 = {
"elementtype": "object",
"name": "k21",
"type": "command",
"anonymous": true,
"property": "stroke",
"isverb": true,
"pattern": "^stroke (?<object>.*)$|^pat (?<g2_map_object>.*)$|^pet (?<g3_map_object>.*)$|^ (?<g4_map_object>.*)$",
"defaultexpression": "\"You can't stroke; pat; pet;  \" + object.article + \".\"",
"_js_name": "_obj363",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k21"] = _obj363;
allCommands.push(_obj363);
objectsNameMap["k21"] = _obj363;
_obj364 = {
"elementtype": "object",
"name": "k22",
"type": "command",
"anonymous": true,
"property": "rub",
"isverb": true,
"pattern": "^rub (?<object>.*)$",
"defaultexpression": "\"You can't rub \" + object.article + \".\"",
"_js_name": "_obj364",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k22"] = _obj364;
allCommands.push(_obj364);
objectsNameMap["k22"] = _obj364;
_obj365 = {
"elementtype": "object",
"name": "k23",
"type": "command",
"anonymous": true,
"pattern": "^hints$",
"script": function(parameters) { OutputText ("<br/>Greetings adventurer, and a warm welcome to my game!<br/><br/>OK, let's try and point you in the right direction.<br/><br/>The object of the game is explore the world, its objects and its characters through typing in commands. <br/><br/>The basic commands you can use are listed below, but there are many others you can use, part of the fun of a text adventure is finding new actions that you can perform, some are crucial to solving puzzles:<br/><br/><b>'Look'</b> Returns a description of the room you are in (which will sometimes change if you have done an action so worth checking often). Room descriptions often contain items that can be taken, (use 'take', or 'get'), normally you need to take an object before you can use it.<br/><br/><b>'Examine'</b> and <b>'Look at' </b> perform the same action (or you can just type <b>x</b> as a shortcut) and should return a description for example 'examine chest' or 'x chest' would both return a description of the item. People can be examined as well as objects.<br/><br/><b>'Open'</b> some objects are containers and need to be opened to reveal the contents.<br/><br/><b>'Use'</b>: some items can be used, e.g. use lamp, other items need a specific verb, for example 'eat apple' might work where 'use apple' will not as it's too vague.<br/><br/><b>'Ask'</b> you can ask characters about objects or people, e.g. 'Ask miller about windmill', sometimes they will have something to say about it, other times not. <br/><br/><b>'Give'</b> you can try giving objects to people who might want them. To do this name the object before the person, e.g. give object X to person Y (give person Y object X won't work for tedious logic reasons!)<br/><br/><b>'Inventory'</b> or <b>'Inv'</b> show what you are carrying, you can examine objects whether you are carrying them or not.<br/><br/><b> Unlike some text adventures, not all items that are in a room are listed as you enter, but they may be mentioned in the room description instead. </b><br/><br/>Some responses and descriptions in the game contain clues to solve the game, others are simply there to add atmosphere or humour. If you are stuck try performing an action that you would do if you were really in the situation described.<br/><br/>The English language is a beautiful but fickle beast, so if a command you type does not work,its sometimes worth trying to say it it a different way<br/><br/>Lastly I have designed this game so you can't die, also it's not possible for you to perform an action which makes the game unsolvable. However if you want to undo an action just type <b>'undo'</b>.<br/><br/>If you are stuck for a long time and need a hint email me: luke.jones@gmail.com. <br/><br/>Good Luck!<br/>"); },
"_js_name": "_obj365",
"_types": ["defaultcommand"]
};
elementsNameMap["k23"] = _obj365;
allCommands.push(_obj365);
objectsNameMap["k23"] = _obj365;
_obj366 = {
"elementtype": "object",
"name": "Northern Woods",
"type": "object",
"description": "<br/>You are on a path in the woods that runs North to South, the trees are densely packed, shards of sunlight stab through the small gaps in the canopy, it is humid in here. The floor of the forest is thick with leaf litter from countless autumns.",
"usedefaultprefix": false,
"prefix": "the",
"_js_name": "_obj366",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Northern Woods"] = _obj366;
allObjects.push(_obj366);
objectsNameMap["Northern Woods"] = _obj366;
_obj367 = {
"elementtype": "object",
"name": "k24",
"parent": _obj366,
"type": "exit",
"alias": "north",
"to": _obj313,
"_js_name": "_obj367",
"_types": ["northdirection", "defaultexit"],
"alt": ["n"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k24"] = _obj367;
allExits.push(_obj367);
objectsNameMap["k24"] = _obj367;
_obj368 = {
"elementtype": "object",
"name": "Twisted Oak",
"parent": _obj366,
"type": "object",
"alt": ["oak", "tree"],
"look": "<br/>An enormous oak tree lies to the side of the path. Its trunk and branches are twisted into contorted and tortured shapes like writhing serpents.<br/><br/>Nestled into the base of the tree is a small blue door.",
"hack": function() { if (Got(_obj356)) {
OutputText ("Your axe is blunt.");
}
else if (Got(_obj360)) {
OutputText ("You swing your axe against the tree, it barely makes a scratch in the bark and jars your arm horribly.");
}
else {
OutputText ("You don't have anything to chop it with.");
} },
"_js_name": "_obj368",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Twisted Oak"] = _obj368;
allObjects.push(_obj368);
objectsNameMap["Twisted Oak"] = _obj368;
_obj369 = {
"elementtype": "object",
"name": "Handwritten Sign",
"parent": _obj366,
"type": "object",
"look": "<br/>In perfect copperplate the sign reads,<br/><b><i><br/> 'Residence of Gnome Chompsky, Master Weaver and Tailor, No Free Papers, Thank You</i></b>'",
"scenery": true,
"takemsg": "it's not yours",
"_js_name": "_obj369",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Handwritten Sign"] = _obj369;
allObjects.push(_obj369);
objectsNameMap["Handwritten Sign"] = _obj369;
_obj370 = {
"elementtype": "object",
"name": "Small Blue Door",
"parent": _obj366,
"type": "object",
"look": "A small arched shaped door around 2 foot high and painted a pale pastel blue colour. There is a handwritten sign next to it.",
"scenery": true,
"knock": function() { if (!(ListContains(ScopeVisible(), _obj371))) {
OutputText ("You knock politely on the door, you can hear the sound of someone running downstairs, the door is yanked open, and standing in the door is a Gnome, behind him you can see stairs leading up into the heart of the tree.<br/><br/>\"Hello traveller!\", says the Gnome, \"What can I do for you?\"<br/><br/>Dylan wanders over and sniffs curiously at the Gnome, the Gnome chuckles and pats him on the nose.<br/><br/>\"I'd invite you in, but you're just too big!\" says the Gnome");
MakeObjectVisible (_obj371);
}
else {
OutputText ("\"I'm here!\" says Chompsky, \"stop knocking on the door!\"");
} },
"knockon": function() { if (!(ListContains(ScopeVisible(), _obj371))) {
OutputText ("You knock politely on the door, you can hear the sound of someone running downstairs, the door is yanked open, and standing in the door is a Gnome, behind him you can see stairs leading up into the heart of the tree.<br/><br/>\"Hello traveller!\", says the Gnome, \"What can I do for you?\"<br/><br/>Dylan wanders over and sniffs curiously at the Gnome, the Gnome chuckles and pats him on the nose.<br/><br/>\"I'd invite you in, but you're just too big!\" says the Gnome");
MakeObjectVisible (_obj371);
}
else {
OutputText ("\"I'm here!\" says Chompsky, \"stop knocking on the door!\"");
} },
"_js_name": "_obj370",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Small Blue Door"] = _obj370;
allObjects.push(_obj370);
objectsNameMap["Small Blue Door"] = _obj370;
_obj371 = {
"elementtype": "object",
"name": "Wood Gnome Chompsky",
"parent": _obj366,
"type": "object",
"look": "<br/>He's just over a foot tall, including his bright red brimless conical cap. He's wearing a pastel blue jacket with a belt fastened at the middle, black trousers and comically big (relative to his stature) black boots. <br/><br/>He has a white beard and a mischievous twinkle in his eyes.",
"visible": false,
"alt": ["gnome", "chomsky"],
"speak": "\"I'm always willing to help a traveller in these woods, what can I do for you?\"",
"usedefaultprefix": false,
"alias": "Gnome Chompsky",
"hack": function() { if (Got(_obj360)) {
OutputText ("You consider a random axe of violence, but it would seem a little axe-cessive.");
}
else if (Got(_obj356)) {
OutputText ("You couldn't cut butter with this axe");
}
else {
OutputText ("You need a weapon to do that, now where did you leave your axe?");
} },
"ask": {"river void broken bridge": function() { OutputText ("<br/>\"Yes I've seen it, must have been some heavy rainfall in the hills. Don't try swimming across, the current is far too strong and the water is deathly cold. Don't hold your breath for the council to fix the bridge anytime soon, all the infrastructure taxes get spent in Lost.\""); }, "weave weaving": function() { OutputText ("<br/>\"My stock and trade, I learnt my craft at the University of Somewhere. I can weave just about anything if the materials are half decent.\""); } },
"_js_name": "_obj371",
"_types": ["male", "defaultobject"],
"displayverbs": ["Look at", "Speak to"],
"gender": "he",
"article": "him",
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Wood Gnome Chompsky"] = _obj371;
allObjects.push(_obj371);
objectsNameMap["Wood Gnome Chompsky"] = _obj371;
_obj372 = {
"elementtype": "object",
"name": "k25",
"parent": _obj366,
"type": "exit",
"alias": "south",
"to": _obj320,
"_js_name": "_obj372",
"_types": ["southdirection", "defaultexit"],
"alt": ["s"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k25"] = _obj372;
allExits.push(_obj372);
objectsNameMap["k25"] = _obj372;
_obj373 = {
"elementtype": "object",
"name": "leaf litter",
"parent": _obj366,
"type": "object",
"look": "The floor of the woods is carpeted in a deep layer of dead leaves, ranging in colour from a deep copper to pale yellow",
"takemsg": "you decide to leave the leaves where they are",
"scenery": true,
"_js_name": "_obj373",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["leaf litter"] = _obj373;
allObjects.push(_obj373);
objectsNameMap["leaf litter"] = _obj373;
_obj374 = {
"elementtype": "object",
"name": "k26",
"type": "command",
"anonymous": true,
"property": "knockon",
"isverb": true,
"pattern": "^knock on (?<object>.*)$|^tap on (?<g2_map_object>.*)$|^tap (?<g3_map_object>.*)$",
"defaultexpression": "\"You can't knock on; tap on; tap \" + object.article + \".\"",
"_js_name": "_obj374",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k26"] = _obj374;
allCommands.push(_obj374);
objectsNameMap["k26"] = _obj374;
_obj375 = {
"elementtype": "object",
"name": "k27",
"type": "command",
"anonymous": true,
"property": "weave",
"isverb": true,
"pattern": "^weave (?<object>.*)$|^make rope out of (?<g2_map_object>.*)$|^make rope from (?<g3_map_object>.*)$|^weave a rope out of (?<g4_map_object>.*)$|^ (?<g5_map_object>.*)$",
"defaultexpression": "\"You can't weave; make rope out of; make rope from; weave a rope out of; \" + object.article + \".\"",
"_js_name": "_obj375",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k27"] = _obj375;
allCommands.push(_obj375);
objectsNameMap["k27"] = _obj375;
_obj376 = {
"elementtype": "object",
"name": "Rope",
"type": "object",
"usedefaultprefix": false,
"prefix": "a",
"look": "A strong coil of rope weaved from reeds",
"take": true,
"feature_usegive": true,
"use": true,
"selfuseon": {"Logs": function() { OutputText ("You lash the logs together with the rope, you now have what could very generously be described as a raft. Dylan eyes it suspiciously. ");
RemoveObject (_obj317);
RemoveObject (_obj376);
AddToInventory (_obj377); } },
"_js_name": "_obj376",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Rope"] = _obj376;
allObjects.push(_obj376);
objectsNameMap["Rope"] = _obj376;
_obj377 = {
"elementtype": "object",
"name": "Raft",
"type": "object",
"take": true,
"look": "Your 'artisan' raft, made from four body length logs lashed together with rope",
"feature_usegive": true,
"volume": 1,
"use": function() { if (_obj245.pov.parent == _obj327) {
if (Got(_obj354)) {
OutputText ("<br/>With some trepidation you launch your raft and jump on, Dylan whimpers and jumps on wth you. Using the shovel as a make shift oar you paddle furiously against the current. Utterly exhausted and shivering you arrive at the Southern Bank of the river and jump off, Dylan follows.<br/>");
MoveObject (_obj358, _obj379);
}
else {
OutputText ("<br/>You start to launch the raft, but just in the nick of time you realise that you don't anything to use a paddle, without one the current will take you downstream and to certain death.<br/>");
}
}
else if (_obj245.pov.parent == _obj379) {
if (Got(_obj354)) {
OutputText ("<br/>With some trepidation you launch your raft and jump on, Dylan whimpers and jumps on wth you. Using the shovel as a make shift oar you paddle furiously against the current. Utterly exhausted and shivering you arrive at the Northern Bank of the river and jump off, Dylan follows.");
MoveObject (_obj358, _obj327);
}
else {
OutputText ("<br/>You start to launch the raft, but just in the nick of time you realise that you don't anything to use a paddle, without one the current will take you downstream and to certain death.");
}
}
else if (_obj245.pov.parent == _obj400) {
OutputText ("<br/>For second you consider setting sail on your raft, before you come to your senses. Looking at the crashing rolling waves one word repeats in your head 'nope. nope. nope'.");
}
else if (_obj245.pov.parent == _obj479) {
OutputText ("<br/>You launch your raft upon the cold deep pool, Dylan loyally jumps on with you. You float motionless upon the pool and consider the futility of your actions. After a few minutes you're bored stiff and climb out of the raft and back on to the side of the pool.");
}
else {
OutputText ("<br/>You consider inventing a new sport called 'land rafting' but decide better of it");
} },
"selfuseon": {"River Void": function() { if (Got(_obj354)) {
OutputText ("With some trepidation you launch your raft and jump on, Dylan whimpers and jumps on wth you. Using the shovel as a make shift oar you paddle furiously against the current. Utterly exhausted and shivering you arrive at the Southern Bank of the river and jump off, Dylan follows.");
MoveObject (_obj358, _obj379);
}
else {
OutputText ("You start to launch the raft, but just in the nick of time you realise that you don't anything to use a paddle, without one the current will take you downstream and to certain death.");
} } },
"_js_name": "_obj377",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Raft"] = _obj377;
allObjects.push(_obj377);
objectsNameMap["Raft"] = _obj377;
_obj378 = {
"elementtype": "object",
"name": "k28",
"type": "command",
"anonymous": true,
"property": "lashtogether",
"isverb": true,
"pattern": "^lash together (?<object>.*)$",
"defaultexpression": "\"You can't lash together \" + object.article + \".\"",
"_js_name": "_obj378",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k28"] = _obj378;
allCommands.push(_obj378);
objectsNameMap["k28"] = _obj378;
_obj379 = {
"elementtype": "object",
"name": "Southbank of the River Void",
"type": "object",
"usedefaultprefix": false,
"descprefix": "You are at",
"prefix": "the",
"description": "<br/>You are on the Southbank of the River Void. The river is roaring past with a fierce current.",
"_js_name": "_obj379",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Southbank of the River Void"] = _obj379;
allObjects.push(_obj379);
objectsNameMap["Southbank of the River Void"] = _obj379;
_obj380 = {
"elementtype": "object",
"name": "River Void1",
"parent": _obj379,
"type": "object",
"alt": ["river", "void", "riverbank"],
"look": "The River Void is fast, deep and wide. The water level is usually high and it is roaring as it flows past. The bridge across has collapsed. ",
"alias": "River Void",
"usedefaultprefix": false,
"prefix": "the",
"_js_name": "_obj380",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["River Void1"] = _obj380;
allObjects.push(_obj380);
objectsNameMap["River Void1"] = _obj380;
_obj381 = {
"elementtype": "object",
"name": "k29",
"parent": _obj379,
"type": "exit",
"alias": "southeast",
"_js_name": "_obj381",
"_types": ["southeastdirection", "defaultexit"],
"alt": ["se"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k29"] = _obj381;
objectReferences.push(["_obj381", "to", "_obj435"]);
allExits.push(_obj381);
objectsNameMap["k29"] = _obj381;
_obj382 = {
"elementtype": "object",
"name": "k30",
"parent": _obj379,
"type": "command",
"anonymous": true,
"pattern": "^swim$|^swim across$|^wade across$|^swim across river$|^wade across river$",
"script": function(parameters) { OutputText ("It's far too dangerous to swim across"); },
"_js_name": "_obj382",
"_types": ["defaultcommand"]
};
elementsNameMap["k30"] = _obj382;
allCommands.push(_obj382);
objectsNameMap["k30"] = _obj382;
_obj383 = {
"elementtype": "object",
"name": "Broken Bridge1",
"parent": _obj379,
"type": "object",
"look": "A wooden footbridge, which has collapsed in the middle leaving a yawning gap down to the dangerous river below. What a terrible thing to happen, you can't get over it.",
"fix": "It's beyond repair",
"jump": "You take a run up to the bridge, but as you approach the gap you realise you'll never make it, and just manage to stop in time. You retreat to the safety of the riverbank.",
"alias": "Broken Bridge",
"hack": function() { if (Got(_obj360)) {
OutputText ("You consider hacking up the bridge, but is");
}
else if (Got(_obj356)) {
OutputText ("Your axe is too blunt");
}
else {
OutputText ("You need a tool to do that");
} },
"_js_name": "_obj383",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Broken Bridge1"] = _obj383;
allObjects.push(_obj383);
objectsNameMap["Broken Bridge1"] = _obj383;
_obj384 = {
"elementtype": "object",
"name": "k31",
"type": "command",
"anonymous": true,
"property": "hack",
"isverb": true,
"pattern": "^hack (?<object>.*)$|^chop (?<g2_map_object>.*)$|^cut (?<g3_map_object>.*)$",
"defaultexpression": "\"You can't hack; chop; cut \" + object.article + \".\"",
"_js_name": "_obj384",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k31"] = _obj384;
allCommands.push(_obj384);
objectsNameMap["k31"] = _obj384;
_obj385 = {
"elementtype": "object",
"name": "k32",
"type": "command",
"anonymous": true,
"property": "lash",
"isverb": true,
"pattern": "^lash (?<object>.*)$|^lash together (?<g2_map_object>.*)$",
"defaultexpression": "\"You can't lash; lash together \" + object.article + \".\"",
"_js_name": "_obj385",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k32"] = _obj385;
allCommands.push(_obj385);
objectsNameMap["k32"] = _obj385;
_obj386 = {
"elementtype": "object",
"name": "k33",
"type": "command",
"anonymous": true,
"property": "fix",
"isverb": true,
"pattern": "^fix (?<object>.*)$",
"defaultexpression": "\"You can't fix \" + object.article + \".\"",
"_js_name": "_obj386",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k33"] = _obj386;
allCommands.push(_obj386);
objectsNameMap["k33"] = _obj386;
_obj387 = {
"elementtype": "object",
"name": "k34",
"type": "command",
"anonymous": true,
"property": "twist",
"isverb": true,
"pattern": "^twist (?<object>.*)$",
"defaultexpression": "\"You can't twist \" + object.article + \".\"",
"_js_name": "_obj387",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k34"] = _obj387;
allCommands.push(_obj387);
objectsNameMap["k34"] = _obj387;
_obj388 = {
"elementtype": "object",
"name": "Windmill",
"type": "object",
"usedefaultprefix": false,
"alias": "The Windmill",
"description": function() { if (ListContains(ScopeVisible(), _obj393)) {
OutputText ("You are inside the windmill, in the middle of the room are the enormous grinding stones with a huge wooden axle leading up into the ceiling. <br/><br/>Also in the room is a wooden table, next to which stands Wendy the Miller.");
if (GetBoolean(_obj393, "working")) {
OutputText ("You are inside the windmill, in the middle of the room are the enormous grinding stones with a huge wooden axle leading up into the ceiling. The stones are turning, and you can hear the \"Koor-keeer, chick-a-chick..\" noise of the sails and gears turning.<br/><br/>Also in the room is a wooden table, at which stands Wendy the Miller.");
}
}
else {
OutputText ("You are inside the windmill, in the middle of the room are the enormous grinding stones with a huge wooden axle leading up into the ceiling. <br/><br/>Also in the room is a wooden table, at which sits Wendy the Miller, fast asleep and snoring like a congested hippo.");
} },
"_js_name": "_obj388",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Windmill"] = _obj388;
allObjects.push(_obj388);
objectsNameMap["Windmill"] = _obj388;
_obj389 = {
"elementtype": "object",
"name": "k35",
"parent": _obj388,
"type": "exit",
"alias": "out",
"to": _obj333,
"_js_name": "_obj389",
"_types": ["outdirection", "defaultexit"],
"alt": ["o"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k35"] = _obj389;
allExits.push(_obj389);
objectsNameMap["k35"] = _obj389;
_obj390 = {
"elementtype": "object",
"name": "Wooden Table",
"parent": _obj388,
"type": "object",
"feature_container": true,
"hidechildren": false,
"listchildren": true,
"look": function() { if (!(ListContains(ScopeVisible(), _obj393))) {
if (!(GetBoolean(_obj391, "jug_taken"))) {
OutputText ("It's a plain wooden table made from pine, on top of the table is Wendy's slumped head and an empty jug of cider");
}
else {
OutputText ("It's a plain wooden table made from pine, on top of the table is Wendy's slumped head");
}
}
else {
OutputText ("A plain wooden table made from pine");
} },
"_js_name": "_obj390",
"_types": ["surface", "defaultobject"],
"isopen": true,
"transparent": true,
"contentsprefix": "on which there is",
"container": true,
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"open": false,
"close": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"description": "",
"scenery": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Wooden Table"] = _obj390;
allObjects.push(_obj390);
objectsNameMap["Wooden Table"] = _obj390;
_obj391 = {
"elementtype": "object",
"name": "Empty Jug Of Cider",
"parent": _obj390,
"type": "object",
"visible": true,
"scenery": true,
"look": "An empty quart sized jug of cider. Written on the label it says 'Dicken's Cider, 8.5%, please drink responsibly.'",
"take": true,
"feature_usegive": true,
"ontake": function() { SetObjectFlagOn (_obj391, "jug_taken"); },
"selfuseon": {"Hand Water Pump": function() { OutputText ("You place the jug under the spout of the pump and crank the lever, with three pumps the jug is full of freezing cold water");
MakeObjectInvisible (_obj391);
MakeObjectVisible (_obj337); } },
"_js_name": "_obj391",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Empty Jug Of Cider"] = _obj391;
allObjects.push(_obj391);
objectsNameMap["Empty Jug Of Cider"] = _obj391;
_obj392 = {
"elementtype": "object",
"name": "Drunk Miller",
"parent": _obj388,
"type": "object",
"feature_usegive": false,
"alias": "Wendy Miller",
"shoutat": "You shout at the top of your voice, but Wendy doesn't stir. Dylan whimpers and nuzzles your leg for reassurance.",
"alt": ["miller", "wendy"],
"look": "A stern looking dark haired lady, she is wearing a pale blue shin length smock, a red neckerchief, and a brown Quaker style hat. She is currently sound asleep and snoring at an unbelievable volume. A fog of cider fumes is in the air around her.",
"screamat": "You scream at the top of your lungs, but Wendy doesn't stir. Dylan whimpers and nuzzles your leg for reassurance.",
"shake": "You gently shake the Miller but she doesn't stir",
"push": "You give the Miller a gentle push but she doesn't stir",
"pull": "You give the Miller a gentle pull but she doesn't stir",
"slap": "You consider slapping the Miller around the face, but it doesn't seem right",
"usedefaultprefix": false,
"hack": function() { if (Got(_obj360)) {
OutputText ("homicidal murder of innocent people isn't really your scene, and it would seem a little axe-cessive!");
}
else if (Got(_obj356)) {
OutputText ("You couldn't cut butter with this axe");
}
else {
OutputText ("You need a weapon to do that, now where did you leave your axe?");
} },
"_js_name": "_obj392",
"_types": ["female", "defaultobject"],
"displayverbs": ["Look at", "Speak to"],
"gender": "she",
"article": "her",
"visible": true,
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Drunk Miller"] = _obj392;
allObjects.push(_obj392);
objectsNameMap["Drunk Miller"] = _obj392;
_obj393 = {
"elementtype": "object",
"name": "Awake Miller",
"parent": _obj388,
"type": "object",
"alias": "Wendy Miller",
"visible": false,
"look": "A stern looking dark haired lady, she is wearing a pale blue shin length smock, a red neckerchief, and a brown Quaker style hat that is dripping water on to the floor.",
"alt": ["wendy", "miller"],
"speak": "\"Greetings traveller\" says Wendy",
"hack": function() { if (Got(_obj360)) {
OutputText ("homicidal murder of innocent people isn't really your scene, and it would seem a little axe-cessive!");
}
else if (Got(_obj356)) {
OutputText ("You couldn't cut butter with this axe");
}
else {
OutputText ("You need a weapon to do that, now where did you leave your axe?");
} },
"ask": {"windmill": function() { OutputText ("<br/>\"Fabulous contraption isn't it? There's rumours from Lost of a new technology coming to replace 'em, something to do with fire and steam, sounds hideous.\""); }, "cider": function() { OutputText ("<br/>\"Yes it's a bit of weakness of mine, but well, you can't be good all the time can you?\""); }, "mouse": function() { OutputText ("<br/>\"That damn creature, clip-clippety-clopping all over the place, does me head in!\""); }, "axe": function() { OutputText ("<br/>\"Only two things in life are certain: death and axes. The former usually follows the latter.\""); }, "cooper the cooper": function() { OutputText ("<br/>Wendy blushes slightly, <br/>\"Yes he's a good friend of mine, he was here last night, we had a fair few pints of cider, I hope he doesn't feel as rough as me today\""); }, "fishing rod": function() { if (Got(_obj324)) {
OutputText ("<br/>\"Looks like it's broken dear, I can't fix it but I hear there is a travelling tinker in the area\"");
}
else if (Got(_obj430)) {
OutputText ("<br/>\"Not my idea of fun, horrible wriggly, slimy fish, yuck!\"");
}
else {
OutputText ("<br/>\"popular sport, especially at the beach north of here\"");
} }, "broken bridge": function() { OutputText ("<br/>\"ooh, now that is a shame, nothing ever seems to get fixed anymore, whatever happened to civic pride eh?\""); }, "bony king": function() { OutputText ("<br/>\"well he's a fair ruler, not exactly mister dynamic, but he's kept the peace all these years\""); } },
"_js_name": "_obj393",
"_types": ["namedfemale", "defaultobject"],
"usedefaultprefix": false,
"displayverbs": ["Look at", "Speak to"],
"gender": "she",
"article": "her",
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Awake Miller"] = _obj393;
allObjects.push(_obj393);
objectsNameMap["Awake Miller"] = _obj393;
_obj394 = {
"elementtype": "object",
"name": "k36",
"parent": _obj388,
"type": "command",
"anonymous": true,
"pattern": "^pour water on miller$|^pour water over miller$|^throw water over miller$|^pour jug on wendy$|^pour jug on miller$|^empty jug over miller$|^empty jug over miller's head$|^soak miller with water$|^wake miller with water$|^throw water at miller$|^throw water$|^pour water on wendy$|^pour water over wendy$|^throw water at wendy$|^throw water over wendy$|^pour jug of water over wendy$|^pour jug over wendy$|^pour jug of water over miller$|^pour jug over miller$|^soak wendy with water$",
"script": function(parameters) { if (Got(_obj337)) {
OutputText ("With some trepidation you empty the jug of freezing cold water over the Miller's head. With a jolt she wakes up, shrieks and jumps out of her chair. Just as she is about to start shouting at you Dylan bounds over to her, wagging his tail and looking at her with his doleful eyes, \"What the hell..I..er...Oh! Aren't you an adorable little pooch! Aren't you? Aren't you? Who's a lovely pooch?\"<br/><br/>The Miller looks up at you and says, \"Er, bit of a late night on the cider, please don't tell anyone, what I can I do for you?\"");
MakeObjectInvisible (_obj337);
MakeObjectInvisible (_obj392);
MakeObjectVisible (_obj393);
}
else {
OutputText ("Nice idea, but you're not carrying any water");
} },
"_js_name": "_obj394",
"_types": ["defaultcommand"]
};
elementsNameMap["k36"] = _obj394;
allCommands.push(_obj394);
objectsNameMap["k36"] = _obj394;
_obj395 = {
"elementtype": "object",
"name": "k37",
"parent": _obj388,
"type": "exit",
"alias": "up",
"_js_name": "_obj395",
"_types": ["updirection", "defaultexit"],
"alt": ["u"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k37"] = _obj395;
objectReferences.push(["_obj395", "to", "_obj445"]);
allExits.push(_obj395);
objectsNameMap["k37"] = _obj395;
_obj396 = {
"elementtype": "object",
"name": "Stairs",
"parent": _obj388,
"type": "object",
"scenery": false,
"usedefaultprefix": false,
"prefix": "some",
"look": function() { if (ListContains(ScopeVisible(), _obj397)) {
OutputText ("Wooden stairs leading up to the top floor of the Windmill, you can see a mouse, there, there on the stairs, right there.");
}
else {
OutputText ("Wooden stairs leading up to the top floor of the Windmill.");
} },
"_js_name": "_obj396",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Stairs"] = _obj396;
allObjects.push(_obj396);
objectsNameMap["Stairs"] = _obj396;
_obj397 = {
"elementtype": "object",
"name": "Mouse",
"parent": _obj388,
"type": "object",
"look": "A tiny grey-furred mouse, who looks to all the world as if it's wearing tiny little clogs, it's making a 'clip-clippety clop' noise as it scurries up and down the stairs.",
"scenery": true,
"hack": function() { if (Got(_obj360)) {
OutputText ("You consider a random axe of violence, but it would seem a little axe-cessive.");
}
else if (Got(_obj356)) {
OutputText ("You couldn't cut butter with this axe");
}
else {
OutputText ("You need a weapon to do that, now where did you leave your axe?");
} },
"_js_name": "_obj397",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Mouse"] = _obj397;
allObjects.push(_obj397);
objectsNameMap["Mouse"] = _obj397;
_obj398 = {
"elementtype": "object",
"name": "k38",
"type": "command",
"anonymous": true,
"property": "fill",
"isverb": true,
"pattern": "^fill (?<object>.*)$",
"defaultexpression": "\"You can't fill \" + object.article + \".\"",
"_js_name": "_obj398",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k38"] = _obj398;
allCommands.push(_obj398);
objectsNameMap["k38"] = _obj398;
_obj399 = {
"elementtype": "object",
"name": "k39",
"type": "command",
"anonymous": true,
"property": "shoutat",
"isverb": true,
"pattern": "^shout at (?<object>.*)$",
"defaultexpression": "\"You can't shout at \" + object.article + \".\"",
"_js_name": "_obj399",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k39"] = _obj399;
allCommands.push(_obj399);
objectsNameMap["k39"] = _obj399;
_obj400 = {
"elementtype": "object",
"name": "Sandy Beach",
"type": "object",
"description": "<br/>You are on long, bleak, sandy beach on the shore of the Sea of Emptiness. There is a brisk and bracing (i.e. bloody freezing) sea-breeze.<br/><br/> Dylan bounds around in circles in the sand wagging his tail.",
"alias": "Desolate Beach",
"usedefaultprefix": false,
"prefix": "The",
"descprefix": "You are at",
"_js_name": "_obj400",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Sandy Beach"] = _obj400;
allObjects.push(_obj400);
objectsNameMap["Sandy Beach"] = _obj400;
_obj401 = {
"elementtype": "object",
"name": "Bottle",
"parent": _obj400,
"type": "object",
"scenery": false,
"alt": ["wooden chest", "battered chest", "chest"],
"look": "<br/>A blue glass bottle with the word \"FLY\" embossed on it.",
"feature_container": true,
"hidechildren": true,
"listchildren": true,
"takemsg": "You pick it up.",
"take": true,
"volume": 1,
"displayverbs": ["Look at", "Take", "Open", "Close"],
"inventoryverbs": ["Look at", "Use", "Drop", "Open", "Close"],
"_js_name": "_obj401",
"_types": ["container_closed", "defaultobject"],
"open": true,
"close": true,
"container": true,
"visible": true,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"usedefaultprefix": true,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Bottle"] = _obj401;
allObjects.push(_obj401);
objectsNameMap["Bottle"] = _obj401;
_obj402 = {
"elementtype": "object",
"name": "Scroll",
"parent": _obj401,
"type": "object",
"take": true,
"dropmsg": "You drop the useful looking axe,  a wise move I'm sure",
"look": "You unfurl the scroll of paper it reads, <br/><br><br/><i><b>\"Help! We're under siege, the Bony King has been imprisoned in his Castle. General D'sarray and the armed forces have assumed control\"</b></i></b><br/><br/>You let out an audible groan and say to yourself. 'let me get this straight, if I don't deliver the letter then the King will have me killed, if on the otherhand I do try to deliver it then the General will have me killed.'<br/><br/>You turn the scroll over and on the reverse side there is a printed score of music, titled \"<b><i>Adagio in G Minor, by Albinoni</i></b>\", you vaguely remember the piece from the piano lessons your father gave you, back in more comfortable times.",
"alias": "Scroll of paper",
"feature_usegive": true,
"read": "You unfurl the scroll of paper it reads, <br>  <br> <i><b>\"Help! We're under siege, the Bony King has been imprisoned in his Castle. General D'sarray and the armed forces have assumed control\"</b></i></b><br><br>  You let out an audible groan and say to yourself. 'let me get this straight, if I don't deliver the letter then the King will have me killed, if on the otherhand I do try to deliver it then the General will have me killed.'<br><br>  You turn the scroll over and on the reverse side there is a printed score of music, titled \"<b><i>Adagio in G Minor, by Albinoni</i></b>\", you vaguely remember the piece from the piano lessons your father gave you, back in more comfortable times.",
"volume": 1,
"selfuseon": {"fallen tree": function() { OutputText ("You swing your axe at the fallen tree, but is too blunt to chop it. "); } },
"_js_name": "_obj402",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Scroll"] = _obj402;
allObjects.push(_obj402);
objectsNameMap["Scroll"] = _obj402;
_obj403 = {
"elementtype": "object",
"name": "k40",
"parent": _obj400,
"type": "exit",
"alias": "south",
"to": _obj333,
"_js_name": "_obj403",
"_types": ["southdirection", "defaultexit"],
"alt": ["s"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k40"] = _obj403;
allExits.push(_obj403);
objectsNameMap["k40"] = _obj403;
_obj404 = {
"elementtype": "object",
"name": "Empty Sea",
"parent": _obj400,
"type": "object",
"alias": "Sea of Emptiness",
"look": "The sea stretches as far as the horizon. A powerful surf is roaring and rolling before pounding into the shore, then receding for a few seconds and crashing in again.",
"usedefaultprefix": false,
"prefix": "The",
"_js_name": "_obj404",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Empty Sea"] = _obj404;
allObjects.push(_obj404);
objectsNameMap["Empty Sea"] = _obj404;
_obj405 = {
"elementtype": "object",
"name": "k41",
"parent": _obj400,
"type": "command",
"anonymous": true,
"pattern": "^swim$",
"script": function(parameters) { OutputText ("No chance. Even if you had the strength to get past the breakers, you would surely freeze to death."); },
"_js_name": "_obj405",
"_types": ["defaultcommand"]
};
elementsNameMap["k41"] = _obj405;
allCommands.push(_obj405);
objectsNameMap["k41"] = _obj405;
_obj406 = {
"elementtype": "object",
"name": "sand",
"parent": _obj400,
"type": "object",
"scenery": true,
"look": "Soft sand, gives a cheerful tone to a desolate place, sandguine you could say.",
"_js_name": "_obj406",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["sand"] = _obj406;
allObjects.push(_obj406);
objectsNameMap["sand"] = _obj406;
_obj407 = {
"elementtype": "object",
"name": "Pub",
"type": "object",
"alias": "Merry Jack's Inn",
"description": "You are inside a proper old boozer. You are luckily enough to live before the smoking ban so there is no stench of urinals and stale beer, just lovely stale smoke.<br/><br/>There is a new-fangled invention called carpet on the floor, it is sticky underfoot. There are wooden benches and stools. The Barman is behind the bar polishing glasses with a face as long as a wet weekend in Coventry. <br/><br/>",
"_js_name": "_obj407",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Pub"] = _obj407;
allObjects.push(_obj407);
objectsNameMap["Pub"] = _obj407;
_obj408 = {
"elementtype": "object",
"name": "Pool Table",
"parent": _obj407,
"type": "object",
"look": "A traditional pub pool table, 7 x 4 foot. The green baize is in decent enough condition, and with only a few drink stains",
"play": function() { OutputText ("You pick up the pool cue and look down its shaft, it's straight as a die. You check the tip and it is secure and properly rounded.<br/><br/>You grab the chalk and carefully stoke the tip with it and blow off the excess. <br/><br/>You spend a minute setting up the balls correctly, then taking careful aim you hit the cue ball, your cue rips into the baize, and the cue ball shoots into the air and smashes the glass that the Landlord is holding. <br/><br/>With a face like thunder the Landlord walks over to the pool table, firmly takes the cue from you and places a sign on the table reading \"Out of Order\".");
MakeObjectInvisible (_obj408);
MakeObjectVisible (_obj417);
IncreaseObjectCounter (_obj407, "fun"); },
"_js_name": "_obj408",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Pool Table"] = _obj408;
allObjects.push(_obj408);
objectsNameMap["Pool Table"] = _obj408;
_obj409 = {
"elementtype": "object",
"name": "Out of tune Piano",
"parent": _obj407,
"type": "object",
"visible": false,
"look": "A beautiful old upright Feurich piano in burnish walnut",
"play": function() { OutputText ("You used to play a little when you were younger, you sit down and start to plonk your way through Maple Leaf Rag, but the piano is horribly out of tune. The Landlord eyes you with a world weary expression.<br/><br/>Suddenly Gerald the Mouse appears.");
MoveObjectHere (_obj486); },
"_js_name": "_obj409",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Out of tune Piano"] = _obj409;
allObjects.push(_obj409);
objectsNameMap["Out of tune Piano"] = _obj409;
_obj410 = {
"elementtype": "object",
"name": "One Armed Bandit",
"parent": _obj407,
"type": "object",
"look": "On the end of the bar is a One Armed Bandit machine, it's metal and looks like it weighs a tonne. There is a lever sticking out of the side of it, on the front is a glass window looking into three reels with symbols on. <br/><br/>Written on the front it says \"Skulls and Axes\" match three symbols to win!",
"play": function() { IncreaseObjectCounter (_obj410, "one_spin");
if (GetInt(_obj410, "one_spin") == 1) {
OutputText ("There are three credits left on the machine. You pull the arm on the machine for the first play, the reels whirl and spin...<br/><br/>The first reel clonks to stop = Skull....<br/>....The second reel clonks to a stop = Skull...<br/>...The third reel clonks to a stop = Axe<br/><br/>No Win");
}
else if (GetInt(_obj410, "one_spin") == 2) {
OutputText ("There are two credits left on the machine. You pull the arm on the machine for the second play, the reels whirl and spin...<br/><br/>The first reel clonks to stop = Axe....<br/>....The second reel clonks to a stop = Axe...<br/>...The third reel clonks to a stop = Skull<br/><br/>No Win");
}
else if (GetInt(_obj410, "one_spin") == 3) {
OutputText ("There is one credit left on the machine. You pull the arm on the machine for the final play, the reels whirl and spin...<br/><br/>The first reel clonks to stop = Skull....<br/>....The second reel clonks to a stop = Skull...<br/>...The third reel clonks to a stop = Skull !<br/><br/>There is a satisfying Ker-Chunk, Ker-Chunk, Ker-Chunk noise and three coins are deposited in the tray. You place them in your pocket.<br/><br/>The Landlord walks across to the machine. Muttering under his breath he locks it shut and places an 'Out of Order' sign across it.");
MakeObjectInvisible (_obj410);
AddToInventory (_obj425);
MakeObjectVisible (_obj411);
}
IncreaseObjectCounter (_obj407, "fun"); },
"_js_name": "_obj410",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["One Armed Bandit"] = _obj410;
allObjects.push(_obj410);
objectsNameMap["One Armed Bandit"] = _obj410;
_obj411 = {
"elementtype": "object",
"name": "Out of Order One Armed Bandit",
"parent": _obj407,
"type": "object",
"alias": "One Armed Bandit",
"look": "On the end of the bar is a One Armed Bandit machine, it's metal and looks like it weighs a tonne. There is a lever sticking out of the side of it, on the front is a glass window looking into three reels with symbols on. <br/><br/>Written on the front it says \"Skulls and Axes\" match three symbols to win!<br/><br/>Unfortunately it is locked up and an \"Out of Order\" signs hangs from it.",
"unlock": "You place your hand on it and the Landlord immediately shouts across, \"HEY! Leave that damn thing alone!\"",
"smash": "You go to grab the machine and the Landlord immediately shouts across, \"HEY! Leave that damn thing alone!\"",
"visible": false,
"hack": function() { if (Got(_obj360)) {
OutputText ("You pull out your axe and take aim at the One Armed Bandit, and the Landlord immediately shouts across, \"HEY! Leave that damn thing alone!\"");
}
else {
OutputText ("You are not carrying your axe");
} },
"_js_name": "_obj411",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Out of Order One Armed Bandit"] = _obj411;
allObjects.push(_obj411);
objectsNameMap["Out of Order One Armed Bandit"] = _obj411;
_obj412 = {
"elementtype": "object",
"name": "Jack The Landlord",
"parent": _obj407,
"type": "object",
"look": "'Merry' by name but not by nature it seems. As you look at him, he stares back and lets out an exacerbated sigh of such length you wonder if he has sprung a leak. ",
"alt": ["landlord", "barman", "jack", "the landlord", "the barman"],
"hack": function() { if (Got(_obj360)) {
OutputText ("You consider a random axe of violence, but it would seem a little axe-cessive.");
}
else if (Got(_obj356)) {
OutputText ("You couldn't cut butter with this axe");
}
else {
OutputText ("You need a weapon to do that, now where did you leave your axe?");
} },
"_js_name": "_obj412",
"_types": ["namedmale", "defaultobject"],
"usedefaultprefix": false,
"displayverbs": ["Look at", "Speak to"],
"gender": "he",
"article": "him",
"visible": true,
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Jack The Landlord"] = _obj412;
allObjects.push(_obj412);
objectsNameMap["Jack The Landlord"] = _obj412;
_obj413 = {
"elementtype": "object",
"name": "Dartboard",
"parent": _obj407,
"type": "object",
"alt": ["darts"],
"look": "A cork and wire dartboard, 17 3\u20444 inches in diameter and divided into 20 radial sections. ",
"play": function() { if (GetInt(_obj413, "throws") == 0) {
OutputText ("You've not played darts in long time, but have always fancied yourself a good shot. You pick up the three darts and taking careful aim throw the first one...<br/><br/>....It bounces off the wall above the board and lands in the Pool table..The Landlord walks over and removes it, eying you wearily.");
AddToInventory (_obj584);
IncreaseObjectCounter (_obj413, "throws");
}
else if (GetInt(_obj413, "throws") == 1) {
OutputText ("Ok, you've got your eye in now...you throw the second dart..<br/><br/>... it flies though the air, bounces off one of the wires and embeds itself in the bar. The Landlord walks over and removes it, cursing under his breath.");
AddToInventory (_obj585);
IncreaseObjectCounter (_obj413, "throws");
MakeObjectInvisible (_obj584);
}
else if (GetInt(_obj413, "throws") == 2) {
OutputText ("Feeling embarrassed and aware of the Landlord glaring at you, you take a deep breath and throw the last dart...<br/><br/>..it flys out of your hand and lands plumb in the middle of the treble-twenty area! In your relief you fist pump the air. The Landlord walks over and says Nice throwing.. and then take the remaining dart and hangs a sign on the dartboard reading, Do Not Touch!.");
MakeObjectInvisible (_obj413);
MakeObjectVisible (_obj414);
IncreaseObjectCounter (_obj407, "fun");
MakeObjectInvisible (_obj585);
} },
"_js_name": "_obj413",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Dartboard"] = _obj413;
allObjects.push(_obj413);
objectsNameMap["Dartboard"] = _obj413;
_obj414 = {
"elementtype": "object",
"name": "Out of Order Dartboard",
"parent": _obj407,
"type": "object",
"look": "A cork and wire dartboard, 17 3\u20444 inches in diameter and divided into 20 radial sections. Hanging on the dartboard is a sign reading \"Do not touch!\"",
"alias": "Dartboard",
"visible": false,
"alt": ["darts"],
"play": "The landlord has confiscated the darts, probably best to leave it",
"_js_name": "_obj414",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Out of Order Dartboard"] = _obj414;
allObjects.push(_obj414);
objectsNameMap["Out of Order Dartboard"] = _obj414;
_obj415 = {
"elementtype": "object",
"name": "Tuned Piano",
"parent": _obj407,
"type": "object",
"visible": false,
"look": "A beautiful old upright Feurich piano in burnish walnut, now perfectly in tune",
"play": function() { if (Got(_obj402)) {
if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("6", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "6");
OutputText ("You sit down at the piano, and remembering the message in the bottle you pull out the scroll and begin to play the score, \"Adagio in G minor by Albinoni\".<br/><br/>Your sight-reading skills are rusty but your fingers somehow remember the tune, the haunting melody fills the pub. Looking over to the bar you can see the Landlord's astonished face.<br/><br/>When you've finished the piece the Landlord walks over, inspects the script and says, \"Well, well, well, I should have recognised you, but its been a long time. Listen the armed forces still loyal to the King are camped to the far south on the border with Somewhere, we need to get a message to them to attack tomorrow at dawn\"<br/><br/>\"You've done well getting here to far, take this note and get it to the Loyalist as fast as possible\", \"I'm off to organise the resistance forces still hiding out in the city\"");
MakeObjectInvisible (_obj412);
SetObjectFlagOn (_obj407, "done");
AddToInventory (_obj560);}
else { OutputText ("<br/>No time for that now, you need to get the message to Loyalist forces!"); }
}
else {
OutputText ("<br/>You sit down at the piano and play through \"Maple Leaf Rag\" from memory, the piano fills the room with the melody, but the Landlord looks unmoved.");
} },
"_js_name": "_obj415",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Tuned Piano"] = _obj415;
allObjects.push(_obj415);
objectsNameMap["Tuned Piano"] = _obj415;
_obj416 = {
"elementtype": "object",
"name": "k42",
"parent": _obj407,
"type": "exit",
"alias": "west",
"_js_name": "_obj416",
"_types": ["westdirection", "defaultexit"],
"alt": ["w"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k42"] = _obj416;
objectReferences.push(["_obj416", "to", "_obj535"]);
allExits.push(_obj416);
objectsNameMap["k42"] = _obj416;
_obj417 = {
"elementtype": "object",
"name": "Broken Pool Table",
"parent": _obj407,
"type": "object",
"visible": false,
"alias": "Pool Table",
"_js_name": "_obj417",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Broken Pool Table"] = _obj417;
allObjects.push(_obj417);
objectsNameMap["Broken Pool Table"] = _obj417;
_obj418 = {
"elementtype": "object",
"name": "piano appear",
"parent": _obj407,
"type": "turnscript",
"enabled": true,
"script": function() { if (GetInt(_obj407, "fun") == 5) {
if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("7", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "7");
OutputText ("<br/>Suddenly the doors of the pub fly open and in comes one very tall guy and one very short, huffing and puffing as they manoeuvre a piano into the pub.<br/><br/>\"Here you go Jack\" the short guys shouts, \"Will settle up with you in the week\", and they both leave.");
MakeObjectVisible (_obj409);}

} },
"_js_name": "_obj418",
"_types": []
};
elementsNameMap["piano appear"] = _obj418;
allTurnScripts.push(_obj418);
objectsNameMap["piano appear"] = _obj418;
_obj419 = {
"elementtype": "object",
"name": "Pub Gnome",
"parent": _obj407,
"type": "object",
"alias": "Gnome Chompsky",
"visible": true,
"look": "<br/>He's just over a foot tall, including his bright red brimless conical cap. He's wearing a pastel blue jacket with a belt fastened at the middle, black trousers and comically big (relative to his stature) black boots. <br/><br/>He has a white beard and a mischievous twinkle in his eyes, he drinking a pint of dark porter",
"speak": "\"Hello again there traveller!\"",
"_js_name": "_obj419",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Pub Gnome"] = _obj419;
allObjects.push(_obj419);
objectsNameMap["Pub Gnome"] = _obj419;
_obj420 = {
"elementtype": "object",
"name": "k43",
"parent": _obj407,
"type": "command",
"anonymous": true,
"pattern": "^buy drink$|^order drink$|^order pint$|^buy pint$",
"script": function(parameters) { if (ListContains(ScopeVisible(), _obj412)) {
if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("8", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "8");
OutputText ("<br/>The landlord looks at you and sighs, \"you've found me in one of my better moods, here, just this once, on the house\".<br/><br/>He grabs a pint glass, and with three pumps of the beer tap fills it up with a lovely looking pint of IPA with a proper foamy head.<br/><br/>You are so thirsty and weary from your travels you down it all in a matter of seconds, it's wonderful");}
else { OutputText ("<br/>\"You don't have enough money\" says Jack, \"and you've had your charity\"<br/>"); }
}
else {
OutputText ("<br/>There is no sign of the Landlord, and you're no thief, besides you've got things to do!");
} },
"_js_name": "_obj420",
"_types": ["defaultcommand"]
};
elementsNameMap["k43"] = _obj420;
allCommands.push(_obj420);
objectsNameMap["k43"] = _obj420;
_obj421 = {
"elementtype": "object",
"name": "k44",
"type": "command",
"anonymous": true,
"property": "hackt",
"isverb": true,
"pattern": "^hackt (?<object>.*)$",
"defaultexpression": "\"You can't hackt \" + object.article + \".\"",
"_js_name": "_obj421",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k44"] = _obj421;
allCommands.push(_obj421);
objectsNameMap["k44"] = _obj421;
_obj422 = {
"elementtype": "object",
"name": "k45",
"type": "command",
"anonymous": true,
"property": "pump",
"isverb": true,
"pattern": "^pump (?<object>.*)$",
"defaultexpression": "\"You can't pump \" + object.article + \".\"",
"_js_name": "_obj422",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k45"] = _obj422;
allCommands.push(_obj422);
objectsNameMap["k45"] = _obj422;
_obj423 = {
"elementtype": "object",
"name": "k46",
"type": "command",
"anonymous": true,
"property": "crank",
"isverb": true,
"pattern": "^crank (?<object>.*)$",
"defaultexpression": "\"You can't crank \" + object.article + \".\"",
"_js_name": "_obj423",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k46"] = _obj423;
allCommands.push(_obj423);
objectsNameMap["k46"] = _obj423;
_obj424 = {
"elementtype": "object",
"name": "k47",
"type": "command",
"anonymous": true,
"property": "play",
"isverb": true,
"pattern": "^play (?<object>.*)$",
"defaultexpression": "\"You can't play \" + object.article + \".\"",
"_js_name": "_obj424",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k47"] = _obj424;
allCommands.push(_obj424);
objectsNameMap["k47"] = _obj424;
_obj425 = {
"elementtype": "object",
"name": "Three Coins",
"type": "object",
"take": true,
"look": "Three silver 1 zilch coins, the currency of Nowhere. They have a portrait of the skeletal 'Bony' King on the obverse and an Axe on the other side. Inscribed around the edge it reads, \"Quidquid latinae dictum set, altrum sonar \"",
"feature_usegive": true,
"alt": ["coin", "coins", "money", "dosh"],
"usedefaultprefix": false,
"giveto": {"Beppe": function() { OutputText ("<br/>\"Grazie mille!\" says Beppe, <br/><br/>He scoops a huge pizza out of the oven with his peal, places it in a cardboard tray, closes the lid and hands it to you.");
AddToInventory (_obj553);
MakeObjectInvisible (_obj425); } },
"_js_name": "_obj425",
"_types": ["plural", "defaultobject"],
"gender": "they",
"article": "them",
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Three Coins"] = _obj425;
allObjects.push(_obj425);
objectsNameMap["Three Coins"] = _obj425;
_obj426 = {
"elementtype": "object",
"name": "k48",
"type": "command",
"anonymous": true,
"property": "smash",
"isverb": true,
"pattern": "^smash (?<object>.*)$",
"defaultexpression": "\"You can't smash \" + object.article + \".\"",
"_js_name": "_obj426",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k48"] = _obj426;
allCommands.push(_obj426);
objectsNameMap["k48"] = _obj426;
_obj427 = {
"elementtype": "object",
"name": "Sack of Wheat",
"type": "object",
"take": true,
"feature_usegive": true,
"look": "A small hessian bag of wheat",
"eat": "You nibble a few grains of wheat, but they are too tough to eat",
"volume": 1,
"giveto": {"Awake Miller": function() { OutputText ("\"I can mill this for you no problem, about time I got to work anyway, hang on.\"<br/><br/> The miller walks over to the wall and pulls a hidden lever, after a few seconds the grindstone begins to move, and you can hear the sails  and gears making a pleasing repetitive , \"Koor-keeer, chick-a-clunk..\" noise as they spin round.<br/><br/>Wendy empties the wheat into the hopper, and in a few seconds has filled a small sack with flour which she hands to you.");
RemoveObject (_obj427);
AddToInventory (_obj429);
SetObjectFlagOn (_obj393, "working_miller"); } },
"_js_name": "_obj427",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Sack of Wheat"] = _obj427;
allObjects.push(_obj427);
objectsNameMap["Sack of Wheat"] = _obj427;
_obj428 = {
"elementtype": "object",
"name": "k49",
"type": "command",
"anonymous": true,
"property": "feed",
"isverb": true,
"pattern": "^feed (?<object>.*)$",
"defaultexpression": "\"You can't feed \" + object.article + \".\"",
"_js_name": "_obj428",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k49"] = _obj428;
allCommands.push(_obj428);
objectsNameMap["k49"] = _obj428;
_obj429 = {
"elementtype": "object",
"name": "Sack of Flour",
"type": "object",
"look": "A brown hessian sack of flour, the label on the bag reads, \"Product of Coley's Mill, the taste of Yeasterday\"",
"feature_usegive": true,
"take": true,
"eat": "It belongs to the Tinker",
"volume": 1,
"giveto": {"Tinker": function() { OutputText ("\"Ah, excellent, thank you! In return I've finished fixing your fishing rod, here\" and he hands it to you.");
RemoveObject (_obj429);
AddToInventory (_obj430); } },
"_js_name": "_obj429",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Sack of Flour"] = _obj429;
allObjects.push(_obj429);
objectsNameMap["Sack of Flour"] = _obj429;
_obj430 = {
"elementtype": "object",
"name": "Fixed Fishing Rod",
"type": "object",
"alias": "Fishing Rod",
"take": true,
"feature_usegive": true,
"look": "A bamboo fishing rod, with a cork handle. It has a line and hook, and a now fully functional reel.",
"volume": 1,
"giveto": {"__dummyKey": function() {  } },
"_js_name": "_obj430",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Fixed Fishing Rod"] = _obj430;
allObjects.push(_obj430);
objectsNameMap["Fixed Fishing Rod"] = _obj430;
_obj431 = {
"elementtype": "object",
"name": "k50",
"type": "command",
"anonymous": true,
"property": "screamat",
"isverb": true,
"pattern": "^scream at (?<object>.*)$",
"defaultexpression": "\"You can't scream at \" + object.article + \".\"",
"_js_name": "_obj431",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k50"] = _obj431;
allCommands.push(_obj431);
objectsNameMap["k50"] = _obj431;
_obj432 = {
"elementtype": "object",
"name": "k51",
"type": "command",
"anonymous": true,
"property": "shake",
"isverb": true,
"pattern": "^shake (?<object>.*)$",
"defaultexpression": "\"You can't shake \" + object.article + \".\"",
"_js_name": "_obj432",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k51"] = _obj432;
allCommands.push(_obj432);
objectsNameMap["k51"] = _obj432;
_obj433 = {
"elementtype": "object",
"name": "k52",
"type": "command",
"anonymous": true,
"property": "slap",
"isverb": true,
"pattern": "^slap (?<object>.*)$",
"defaultexpression": "\"You can't slap \" + object.article + \".\"",
"_js_name": "_obj433",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k52"] = _obj433;
allCommands.push(_obj433);
objectsNameMap["k52"] = _obj433;
_obj434 = {
"elementtype": "object",
"name": "k53",
"type": "command",
"anonymous": true,
"pattern": "^shout$",
"script": function(parameters) { if (!(_obj245.pov.parent == _obj388)) {
OutputText ("You shout, Dylan whimpers at your side, It doesn't achieve much, perhaps you should try a calmer approach");
}
else if (_obj245.pov.parent == _obj388) {
if (ListContains(ScopeVisible(), _obj393)) {
OutputText ("You shout, Dylan whimpers, Wendy looks alarmed and asks if you are ok.");
}
else {
OutputText ("You shout, but the Miller doesn't stir from her slumber.");
}
} },
"_js_name": "_obj434",
"_types": ["defaultcommand"]
};
elementsNameMap["k53"] = _obj434;
allCommands.push(_obj434);
objectsNameMap["k53"] = _obj434;
_obj435 = {
"elementtype": "object",
"name": "Southern Woodland Dell",
"type": "object",
"description": "A small secluded grassy hollow, there is thick lush grass under foot. <br/><br/>You can see a Horse drawn caravan, and a Horse unhitched from it. <br/><br/>Sat on the caravan steps is a bearded man in ragged clothing, using your legendary powers of deduction (by reading the writing on the side of the caravan) you deduce that he is a travelling Tinker.<br/><br/>",
"usedefaultprefix": false,
"prefix": "The",
"_js_name": "_obj435",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Southern Woodland Dell"] = _obj435;
allObjects.push(_obj435);
objectsNameMap["Southern Woodland Dell"] = _obj435;
_obj436 = {
"elementtype": "object",
"name": "Horse Drawn Caravan",
"parent": _obj435,
"type": "object",
"look": "<br/>A horseshose shaped cylindrical wooden caravan. It's body is pale green and the ribbing is painted red. It has large yellow cartwheels shod with metal. On the side is a lettering reading \"All smithing and repair work undertaken, enquire with driver\"",
"_js_name": "_obj436",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Horse Drawn Caravan"] = _obj436;
allObjects.push(_obj436);
objectsNameMap["Horse Drawn Caravan"] = _obj436;
_obj437 = {
"elementtype": "object",
"name": "Tinker",
"parent": _obj435,
"type": "object",
"look": "A friendly looking wiry built chap in his mid-fifties, he has a wiry black beard, a battered derby hat, he's smoking a clay pipe and playing with a backgammon set. ",
"speak": "\"Greetings\" says the Tinker",
"hack": function() { if (Got(_obj360)) {
OutputText ("You consider a random axe of violence, but it would seem a little axe-cessive.");
}
else if (Got(_obj356)) {
OutputText ("You couldn't cut butter with this axe");
}
else {
OutputText ("You need a weapon to do that, now where did you leave your axe?");
} },
"ask": {"horse dobby": function() { OutputText ("<br/>\"She's a beauty ain't she? Runs like the wind when she has the mind to, my late wife named her Dobby\""); }, "backgammon": function() { OutputText ("<br/>\"A pleasant way to pass the time, the concentration calms my mind, more skill in the game than most folks think\""); }, "caravan": function() { OutputText ("<br/>\"Hand-built by my Grandfather, back when the Bony King was a child, and the world was a gentler place\" "); } },
"_js_name": "_obj437",
"_types": ["male", "defaultobject"],
"displayverbs": ["Look at", "Speak to"],
"gender": "he",
"article": "him",
"visible": true,
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Tinker"] = _obj437;
allObjects.push(_obj437);
objectsNameMap["Tinker"] = _obj437;
_obj438 = {
"elementtype": "object",
"name": "Horse",
"parent": _obj435,
"type": "object",
"look": "A beautiful Irish Cob horse, standing 14 hands tall and piebald with white patches scattered over its black body. It has a silky long black and white mane, and white feathering hair on its lower legs. It looks at you, snorts gently and nods its head.<br/>",
"alias": "Horse",
"stroke": "You stroke the horse, its hair is silky and warm, you can feel the contours of its muscles, it nickers and nuzzles against your hand. \"He's a beauty, isn't he\", says the Tinker, \"He seems to like you!\"",
"alt": ["dobby"],
"feed": function() { if (Got(_obj315)) {
OutputText ("You place the apple in the flat palm of your hand and offer it up to the horse. Its lips tickle your hand as it picks it up, it munches it noisily. You smell the tart tang of the apple as it's masticated. <br/><br/>The horse eyes you and gently snorts. You've made a friend.");
SetObjectFlagOn (_obj438, "mates");
}
else {
OutputText ("Sadly you don't have anything to feed the horse with.");
} },
"ride": function() { if (GetBoolean(_obj438, "mates")) {
if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("9", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "9");
OutputText ("<br/>Grabbing hold of Dylan you mount the horse, and the horse starts walking North. then trotting, then cantering, and very quickly you are at full galloping speed and struggling to cling on to it and to Dylan.");
SetTimeout (1, function (result) { OutputText ("<br/><b>You are at the Southbank of the River Void.</b><br/><br/>The horse shows no sign of slowing down as you head towards the river edge, the horse leaps without hestitation and you are flying high across the river. You let out an involuntary yell of fear. Dylan whimpers.<br/>"); });
SetTimeout (8, function (result) { OutputText ("<br/>You land on the <b> Northern Bank of The River Void </b>, still clinging on to the horse that is still in full gallop, its hooves pounding the ground with a noise like rolling thunder"); });
SetTimeout (15, function (result) { OutputText ("<br/><b>You are at the Woodland Clearing,</b><br/><br/>You are now moving at breakneck speed, the wind whistles past your ears and you find it hard to catch your breath. Dylan's tongue is hanging out of his mouth, as his ears flap around in the breeze, he seems to be enjoying it now!<br/><br/>"); });
SetTimeout (22, function (result) { OutputText ("<br/><b>You are at the Northern Woods </b><br/><br/>You can just make out the blurred image of an astonished looking Gnome as you tear past the Twisted Oak tree. Dylan barks a greeting to him.<br/><br/>"); });
SetTimeout (29, function (result) { OutputText ("<b>You are at the Southern Meadow</b><br/><br/>With still no slowing in the pace of the horse. You cling on for grim death.<br/><br/>"); });
SetTimeout (36, function (result) { OutputText ("<br/><b>You are at the Northern Meadow outside your Hovel </b><br/><br/>Suddenly the horse rears to a stop, whinnying so loudly the whole kingdom must have heard it. The sudden stop nearly sends you flying off. <br/><br/>You cling on, muttering curses and silent prayers under your breath. Thank goodness that's over. <br/><br/>Shaking with adrenaline you take the opportunity to dismount from the horse. Dylan jumps down to the ground by your side, his tail wagging.<br/><br/>The Horse slowly turns around to face South, paws the ground with its hoof, and then starts moving again breaking into a gallop and it's off out of sight.<br/><br/>");
MoveObject (_obj358, _obj308); });}
else { OutputText ("In a moment of madness you think it would be a good idea to ride the horse again, but sanity prevails and you decide against another equine suicide attempt. Dylan whines in disappointment."); }
}
else {
OutputText ("You attempt to climb onto the horse, but it backs away.<br/><br/>You haven't gained its trust yet.");
} },
"hack": function() { if (Got(_obj360)) {
OutputText ("You consider a random axe of violence, but it would seem a little axe-cessive.");
}
else if (Got(_obj356)) {
OutputText ("You couldn't cut butter with this axe");
}
else {
OutputText ("You need a weapon to do that, now where did you leave your axe?");
} },
"_js_name": "_obj438",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Horse"] = _obj438;
allObjects.push(_obj438);
objectsNameMap["Horse"] = _obj438;
_obj439 = {
"elementtype": "object",
"name": "k54",
"parent": _obj435,
"type": "exit",
"alias": "northwest",
"to": _obj379,
"_js_name": "_obj439",
"_types": ["northwestdirection", "defaultexit"],
"alt": ["nw"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k54"] = _obj439;
allExits.push(_obj439);
objectsNameMap["k54"] = _obj439;
_obj440 = {
"elementtype": "object",
"name": "k55",
"parent": _obj435,
"type": "exit",
"alias": "south",
"_js_name": "_obj440",
"_types": ["southdirection", "defaultexit"],
"alt": ["s"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k55"] = _obj440;
objectReferences.push(["_obj440", "to", "_obj454"]);
allExits.push(_obj440);
objectsNameMap["k55"] = _obj440;
_obj441 = {
"elementtype": "object",
"name": "Backgammon",
"parent": _obj435,
"type": "object",
"alias": "Backgammon set",
"look": "A beautiful wooden backgammon set, consisting of a wooden board, two sets of 15 checkers, two pairs of dice, a doubling cube, and dice cups.",
"scenery": true,
"visible": true,
"takemsg": "It's not yours",
"play": function() { if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("10", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "10");
OutputText ("You while away a pleasant half hour playing Backgammon with the Tinker, just for fun not money. The Tinker regales you with tales of his many travels as he comprehensively thrashes you from pillar to post");}
else { OutputText ("You'd love to sit around playing more Backgammon and shooting the breeze, but you've got to deliver that damn letter."); } },
"_js_name": "_obj441",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Backgammon"] = _obj441;
allObjects.push(_obj441);
objectsNameMap["Backgammon"] = _obj441;
_obj442 = {
"elementtype": "object",
"name": "k56",
"type": "command",
"anonymous": true,
"pattern": "^scream$",
"script": function(parameters) { if (!(_obj245.pov.parent == _obj388)) {
OutputText ("You let out an ear-piercing scream, Dylan cowers at your side, It doesn't achieve much, perhaps you should try a calmer approach");
}
else if (_obj245.pov.parent == _obj388) {
if (ListContains(ScopeVisible(), _obj393)) {
OutputText ("You let out an ear-piercing scream, Dylan cowers, Wendy looks alarmed and asks if you are ok.");
}
else {
OutputText ("You let out an ear-piercing scream, but the Miller doesn't stir from her slumber.");
}
} },
"_js_name": "_obj442",
"_types": ["defaultcommand"]
};
elementsNameMap["k56"] = _obj442;
allCommands.push(_obj442);
objectsNameMap["k56"] = _obj442;
_obj443 = {
"elementtype": "object",
"name": "k57",
"type": "command",
"anonymous": true,
"pattern": "^dig$|^dig sand$",
"script": function(parameters) { if (!(Got(_obj354))) {
OutputText ("You don't have anything to dig with");
}
else if (Got(_obj354)) {
if (!(_obj245.pov.parent == _obj400)) {
OutputText ("The ground is too hard to dig with your shovel");
}
else {
if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("11", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "11");
OutputText ("You dig in the sand and find a small smooth glass sphere, you pick it up.");
AddToInventory (_obj444);}
else { OutputText ("You dig in the sand but find nothing"); }
}
} },
"_js_name": "_obj443",
"_types": ["defaultcommand"]
};
elementsNameMap["k57"] = _obj443;
allCommands.push(_obj443);
objectsNameMap["k57"] = _obj443;
_obj444 = {
"elementtype": "object",
"name": "Dull Glass Sphere",
"type": "object",
"take": true,
"look": "A fist sized glass sphere, it is perfectly smooth and round, but has a smeared and dirty surface. ",
"alias": "Glass Sphere",
"volume": 1,
"clean": function() { if (_obj245.pov.parent == _obj459) {
if (Got(_obj348)) {
OutputText ("Using the rags from your home you polish the surface of the sphere until it is smooth, a bright ethereal light emanates from within and lights up the room.");
RemoveObject (_obj444);
AddToInventory (_obj475);
ShowRoomDescription();
}
else {
OutputText ("You need something to clean it with, a piece of cloth perhaps?");
}
}
else {
OutputText ("Using the rags from your home you polish the surface of he sphere until it shines and reflects an inverted curved image of your face.");
AddToInventory (_obj471);
RemoveObject (_obj444);
} },
"polish": function() { if (_obj245.pov.parent == _obj459) {
if (Got(_obj348)) {
OutputText ("Using the rags from your home you polish the surface of the sphere until it is smooth, a bright ethereal light emanates from within and lights up the room.");
RemoveObject (_obj444);
AddToInventory (_obj475);
}
else {
OutputText ("You need something to clean it with, a piece of cloth perhaps?");
}
}
else {
OutputText ("Using the rags from your home you polish the surface of the sphere until it shines and reflects an inverted curved image of your face.");
AddToInventory (_obj471);
RemoveObject (_obj444);
} },
"wipe": function() { if (_obj245.pov.parent == _obj459) {
if (Got(_obj348)) {
OutputText ("Using the rags from your home you polish the surface of the sphere until it is smooth, a bright ethereal light emanates from within and lights up the room.");
RemoveObject (_obj444);
AddToInventory (_obj475);
}
else {
OutputText ("You need something to clean it with, a piece of cloth perhaps?");
}
}
else {
OutputText ("Using the rags from your home you polish the surface of the sphere until it shines and reflects an inverted curved image of your face.");
AddToInventory (_obj471);
RemoveObject (_obj444);
} },
"rub": function() { if (_obj245.pov.parent == _obj459) {
if (Got(_obj348)) {
OutputText ("Using the rags from your home you polish the surface of the sphere until it is smooth, a bright ethereal light emanates from within and lights up the room.");
RemoveObject (_obj444);
AddToInventory (_obj475);
}
else {
OutputText ("You need something to clean it with, a piece of cloth perhaps?");
}
}
else {
OutputText ("Using the rags from your home you polish the surface of the sphere until it shines and reflects an inverted curved image of your face.");
AddToInventory (_obj471);
RemoveObject (_obj444);
} },
"_js_name": "_obj444",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Dull Glass Sphere"] = _obj444;
allObjects.push(_obj444);
objectsNameMap["Dull Glass Sphere"] = _obj444;
_obj445 = {
"elementtype": "object",
"name": "Loft",
"type": "object",
"alias": "Top floor of Windmill",
"usedefaultprefix": false,
"prefix": "The",
"description": function() { if (GetBoolean(_obj393, "working_miller")) {
OutputText ("You are inside the top floor of the windmill, the dome roof curves above you, and on one wall you can see the spinning horizontal sail shaft where it enters and connects via a gear to the vertical shaft leading straight down to the grinding room below. There is a creaking and groaning noise as the whole mechanism turns..");
}
else {
OutputText ("You are inside the top floor of the windmill, the dome roof curves above you, and on one wall you can see the stationary horizontal sail shaft where it enters and connects via a gear to the vertical shaft leading straight down to the grinding room below.");
} },
"_js_name": "_obj445",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Loft"] = _obj445;
allObjects.push(_obj445);
objectsNameMap["Loft"] = _obj445;
_obj446 = {
"elementtype": "object",
"name": "k58",
"parent": _obj445,
"type": "exit",
"alias": "down",
"to": _obj388,
"_js_name": "_obj446",
"_types": ["downdirection", "defaultexit"],
"alt": ["d"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k58"] = _obj446;
allExits.push(_obj446);
objectsNameMap["k58"] = _obj446;
_obj447 = {
"elementtype": "object",
"name": "Set Mousetrap",
"parent": _obj445,
"type": "object",
"alias": "Mousetrap",
"takemsg": "You decide to leave the mousetrap where it is",
"alt": ["trap", "mouse trap"],
"look": function() { OutputText ("A wooden spring loaded mouse trap, with a piece of cheese as bait. You consider these traps rather cruel, so you decide to caerphilly unset the trap and place the piece of cheese in your pocket.");
AddToInventory (_obj451);
MakeObjectVisible (_obj448);
MakeObjectInvisible (_obj447); },
"_js_name": "_obj447",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Set Mousetrap"] = _obj447;
allObjects.push(_obj447);
objectsNameMap["Set Mousetrap"] = _obj447;
_obj448 = {
"elementtype": "object",
"name": "unset mousetrap",
"parent": _obj445,
"type": "object",
"alias": "Mousetrap",
"look": "A wooden spring loaded mousetrap, that you have unset.",
"takemsg": "You decide to leave the mouse trap where it is",
"set": "You consider these traps to be cruel so you don't set it",
"visible": false,
"alt": ["trap", "mouse trap"],
"_js_name": "_obj448",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["unset mousetrap"] = _obj448;
allObjects.push(_obj448);
objectsNameMap["unset mousetrap"] = _obj448;
_obj449 = {
"elementtype": "object",
"name": "Gears",
"parent": _obj445,
"type": "object",
"scenery": true,
"look": function() { if (GetBoolean(_obj393, "working_miller")) {
OutputText ("The spinning horizontal sail shaft enters the windmill and connects via a gear to the vertical shaft leading straight down to the grinding room below. There is a creaking and groaning noise as the whole mechanism turns..<br/>");
}
else {
OutputText ("The stationary horizontal sail shaft enters the windmill and connects via a gear to the vertical shaft leading straight down to the grinding room below.");
} },
"_js_name": "_obj449",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Gears"] = _obj449;
allObjects.push(_obj449);
objectsNameMap["Gears"] = _obj449;
_obj450 = {
"elementtype": "object",
"name": "Shaft",
"parent": _obj445,
"type": "object",
"scenery": true,
"alt": ["mechanism"],
"look": function() { if (GetBoolean(_obj393, "working_miller")) {
OutputText ("The spinning horizontal sail shaft enters the windmill and connects via a gear to the vertical shaft leading straight down to the grinding room below. There is a creaking and groaning noise as the whole mechanism turns..<br/>");
}
else {
OutputText ("The stationary horizontal sail shaft enters the windmill and connects via a gear to the vertical shaft leading straight down to the grinding room below.");
} },
"_js_name": "_obj450",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Shaft"] = _obj450;
allObjects.push(_obj450);
objectsNameMap["Shaft"] = _obj450;
_obj451 = {
"elementtype": "object",
"name": "Lump of Cheese",
"type": "object",
"take": true,
"feature_usegive": true,
"look": "A small piece of cheese that you stole from a mousetrap, it's not your cheese, in fact it's Nacho Cheese.",
"alias": "Lump of cheese",
"giveto": {"Mouse": function() { if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("12", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "12");
OutputText ("You break a small piece off the lump of cheese and give it to the mouse. The mouse reaches up with it's little front paws, grabs the cheese, gobbles it down, then gives a tiny squeak of appreciation.<br/><br/>Somewhere from the folds of its fur it produces a tiny business card and holds it up to you, you take it. The mouse scurries off out of sight.");
AddToInventory (_obj465);
MakeObjectInvisible (_obj397);
SetObjectFlagOn (_obj397, "mouse_mate");
if (GetInt(_obj456, "feed") == 3) {
MoveObject (_obj470, _obj454);
}}
else { OutputText ("You break a small piece off the lump of cheese and give it to the mouse. The mouse reaches up with it's little front paws, grabs the cheese, gobbles it down, then gives a tiny squeak of appreciation.<br/><br/>"); } }, "Cavern Mouse": function() { MakeObjectInvisible (_obj470);
OutputText ("You break a small piece off the lump of cheese and give it to the mouse. The mouse reaches up with it's little front paws, grabs the cheese, gobbles it down, then gives a tiny squeak of appreciation.<br/><br/>It then draws its tiny sword, dashes fearlessly over to the Cat and stabs it in the nose with his tiny sword. The Cat is stunned for a moment and then erupts in screeching anger, swiping at the mouse, Gerald parries expertly with his shield and dashes away, the Cat shoots off in chase.");
UnlockExit (_obj455);
MakeObjectInvisible (_obj456); }, "Piano Tuner Mouse": function() { MakeObjectInvisible (_obj409);
MakeObjectVisible (_obj415);
OutputText ("You break a small piece off the lump of cheese and give it to the mouse. The mouse reaches up with it's little front paws, grabs the cheese, gobbles it down, then gives a tiny squeak of appreciation.<br/><br/>Gerald opens the lid of the piano and jumps inside, there a commotion of plinking, plonking and squeaking. Then Gerald reappears, jumps on to the keyboard and plays a sweet rendition of \"Old Amsterdam\" by running around and stamping on the keys with his feet.<br/><br/>The Landlord gives a small slow sarcastic round of applause. The Mouse takes a bow, gives the Landlord the finger and dashes off.");
MakeObjectInvisible (_obj486); }, "Scuba Mouse": function() { OutputText ("You break a small piece off the lump of cheese and give it to the mouse. The mouse reaches up with it's little front paws, grabs the cheese, removes his tiny respirator from his mouth, gobbles it down, then gives a tiny squeak of appreciation.<br/><br/>Replacing his respirator Gerald performs a perfect back flip into the pool and disappears beneath its surface. After a few moments you notice a loud gurgling sound a a whirpool forming on the surface of the pool, the water level is going down.<br/><br/>As the last of the water disappears down a large hole in the floor of the pool you see Gerald brandishing what appears to be an oversized bathroom plug on a chain. Gerald waves at you and disappears down the hole.<br/>");
MakeObjectInvisible (_obj487);
MakeExitVisible (_obj481);
SetObjectFlagOn (_obj479, "drained");
MakeObjectVisible (_obj482);
MakeObjectVisible (_obj483);
MakeObjectInvisible (_obj485); }, "Knight Mouse": function() { OutputText ("You break a small piece off the lump of cheese and give it to the mouse. The mouse reaches up with it's little front paws which are wearing adorable tiny gauntlets, takes the cheese, raises his visor and gobbles it down, and then gives a tiny squeak of appreciation, and with a salute closes his visor.<br/><br/>Aiming his lance at the General on the other side of the square, Gerald runs at full charge. <br/><br/>Just as Gerald reaches the General he is spotted, the General takes a swing with his foot and with sickening force kicks Gerald so hard that he goes flying into the air and over the castle walls.<br/><br/>Dylan wimpers, tears well in your eyes and a violent rage burns in your heart.<br/><br/>\"Rodent scum,\" grunts the General. <br/><br/>");
SetObjectFlagOn (_obj561, "mouse_dead");
MakeObjectInvisible (_obj561); } },
"_js_name": "_obj451",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Lump of Cheese"] = _obj451;
allObjects.push(_obj451);
objectsNameMap["Lump of Cheese"] = _obj451;
_obj452 = {
"elementtype": "object",
"name": "k59",
"type": "command",
"anonymous": true,
"property": "set",
"isverb": true,
"pattern": "^set (?<object>.*)$",
"defaultexpression": "\"You can't set \" + object.article + \".\"",
"_js_name": "_obj452",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k59"] = _obj452;
allCommands.push(_obj452);
objectsNameMap["k59"] = _obj452;
_obj453 = {
"elementtype": "object",
"name": "k60",
"type": "command",
"anonymous": true,
"property": "jump",
"isverb": true,
"pattern": "^jump (?<object>.*)$|^jump across (?<g2_map_object>.*)$|^jump over (?<g3_map_object>.*)$",
"defaultexpression": "\"You can't jump; jump across; jump over \" + object.article + \".\"",
"_js_name": "_obj453",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k60"] = _obj453;
allCommands.push(_obj453);
objectsNameMap["k60"] = _obj453;
_obj454 = {
"elementtype": "object",
"name": "Outside The Forsaken Cavern",
"type": "object",
"descprefix": "You are",
"description": function() { if (ListContains(ScopeVisible(), _obj456)) {
OutputText ("You are at the entrance to a cave, its pitch black narrow mouth entrance seems to suck all the light out of the world with no glimpse given of the cavern's interior. <br/><br/>Blocking the entrance is a cat.<br/><br/>Dylan is trembling at your side.<br/>");
}
else {
OutputText ("You are at the entrance to a cave, its pitch black narrow mouth entrance seems to suck all the light out of the world with no glimpse given of the cavern's interior. <br/><br/><br/>");
} },
"_js_name": "_obj454",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Outside The Forsaken Cavern"] = _obj454;
allObjects.push(_obj454);
objectsNameMap["Outside The Forsaken Cavern"] = _obj454;
_obj455 = {
"elementtype": "object",
"name": "guarded entrance",
"parent": _obj454,
"type": "exit",
"alias": "in",
"locked": true,
"lockmessage": "You step towards the entrance to the cave, Dylan whimpers but loyally follows at your side, the cat hisses at you, you take another step forward and the cat swipes at your feet, scratching you painfully with its razor sharp claws, you jump back and decide against trying that again!",
"_js_name": "_obj455",
"_types": ["indirection", "defaultexit"],
"alt": [""],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["guarded entrance"] = _obj455;
objectReferences.push(["_obj455", "to", "_obj459"]);
allExits.push(_obj455);
objectsNameMap["guarded entrance"] = _obj455;
_obj456 = {
"elementtype": "object",
"name": "Cat",
"parent": _obj454,
"type": "object",
"alias": "Jasper The Cat",
"look": "A mean looking Bengal Cat, light brown and spotted like a leopard. It flashes its needle like teeth at you, and then looks at Dylan and scrunches up its nose in distain. ",
"usedefaultprefix": false,
"stroke": "You nervously approach the Cat, and reach out your hand. The Cat hisses violently at you and glancing at its teeth and claws you decide better of it.",
"_js_name": "_obj456",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Cat"] = _obj456;
allObjects.push(_obj456);
objectsNameMap["Cat"] = _obj456;
_obj457 = {
"elementtype": "object",
"name": "k61",
"parent": _obj454,
"type": "exit",
"alias": "north",
"to": _obj435,
"_js_name": "_obj457",
"_types": ["northdirection", "defaultexit"],
"alt": ["n"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k61"] = _obj457;
allExits.push(_obj457);
objectsNameMap["k61"] = _obj457;
_obj458 = {
"elementtype": "object",
"name": "k62",
"parent": _obj454,
"type": "exit",
"alias": "east",
"_js_name": "_obj458",
"_types": ["eastdirection", "defaultexit"],
"alt": ["e"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k62"] = _obj458;
objectReferences.push(["_obj458", "to", "_obj554"]);
allExits.push(_obj458);
objectsNameMap["k62"] = _obj458;
_obj459 = {
"elementtype": "object",
"name": "Inside The Forsaken Cavern",
"type": "object",
"dark": true,
"description": "You are inside a large cavern carved out of limestone, the light from your sphere casts strange shadows from the long stalactites fingers that must have taken centuries to form. <br/><br/>Above you hangs a huge Bat, below it there is a large pile of droppings.<br/><br/>You can make out an exit to the South, and the exit Out.<br/><br/>",
"usedefaultprefix": false,
"descprefix": "You are ",
"darkroomdescription": function() { if (Got(_obj471)) {
OutputText ("The cavern is pitch black, you can just make out the dim light coming from the narrow passageway leading back to the entrance. There is an acrid sour smell in here and you can hear something that sounds like breathing coming from somewhere above you. <br/><br/>You glance down a notice a light shining from your pocket, you pull out the Glass Sphere and it lights up the cavern.<br/><br/>");
RemoveObject (_obj471);
AddToInventory (_obj475);
ShowRoomDescription();
}
else {
OutputText ("The cavern is pitch black, you can just make out the dim light coming from the narrow passageway leading back to the entrance. There is an acrid sour smell in here and you can hear something that sounds like breathing coming from somewhere above you.");
} },
"_js_name": "_obj459",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Inside The Forsaken Cavern"] = _obj459;
allObjects.push(_obj459);
objectsNameMap["Inside The Forsaken Cavern"] = _obj459;
_obj460 = {
"elementtype": "object",
"name": "k63",
"parent": _obj459,
"type": "exit",
"alias": "out",
"lightsource": true,
"lightstrength": "weak",
"to": _obj454,
"_js_name": "_obj460",
"_types": ["outdirection", "defaultexit"],
"alt": ["o"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k63"] = _obj460;
allExits.push(_obj460);
objectsNameMap["k63"] = _obj460;
_obj461 = {
"elementtype": "object",
"name": "Bat",
"parent": _obj459,
"type": "object",
"alias": "Batbat",
"look": "An enormous fruit bat hangs from the roof of the cave. It is at least a metre in length with folded leathery wings that must span twice that. It has huge bulbous black eyes that stare back at you. For some inexplicable reason it is wearing rubber suit and cape, the hood has pointy ears and there is a bat symbol on its chest.<br/><br/>",
"alt": ["bat"],
"speak": function() { if (GetInt(_obj461, "riddle") == 0) {
OutputText ("\"Greetings traveller\" says the Bat (in an outrageous Transylvanian accent), \"It's many moons since this cave saw light, Ah! Ah! Ah!\", \"I hope you've not come to steal my treasure!\" the Bat points one of its large curved fingers at the pile of droppings. \"Only de vise deserve such a reward.\" \"Answer these riddles three and the guano yours will be.\" \"Are you ready?\"");
getinput_async (function(result) { switch (LCase(result)) {
case "yes":
case "Yes":
case "YES":
OutputText ("<br/>\"I\u2019m usually round but I\u2019m not the moon<br/>I tell people something but I don\u2019t have a mouth<br/>I have a face but I don\u2019t have any eyes\"<br/>");
getinput_async (function(result) { switch (LCase(result)) {
case "clock":
case "a clock":
case "a clock face":
case "a watch":
case "a watch face'":
case "watch":
OutputText ("<br/>\"Correct! Viser than you appear it seems\", 'Speak to me again ven you are ready for de second riddle\"");
IncreaseObjectCounter (_obj461, "riddle");
break;
default:
OutputText ("<br/>\"No, that's not right\", \"Speak to me ven you are ready to try again.\"");
} });
break;
default:
OutputText ("<br/>\"Speak to me again ven you are ready\"");
} });
}
else if (GetInt(_obj461, "riddle") == 1) {
OutputText ("<br/>\"Hello again, Riddle two you have reached, listen carefully\",<br/><br/>\"I have several faces but I\u2019m not a crowd<br/>I\u2019m covered in spots but I don\u2019t have acne<br/>I\u2019m sometimes blown on but I\u2019m not hot. <br/><br/>Vhat Am I?\"<br/>");
getinput_async (function(result) { switch (LCase(result)) {
case "dice":
case "die":
case "a dice":
case "a die":
OutputText ("<br/>\"Correct again young traveller!\", \"Speak to me again ven you are ready for the third and final test\"");
IncreaseObjectCounter (_obj461, "riddle");
break;
default:
OutputText ("<br/>\"No, that's not right\", \"Speak to me ven you are ready to try again.\"");
} });
}
else if (GetInt(_obj461, "riddle") == 2) {
OutputText ("<br/>\"Greetings, listen carefully to your third and final test\"<br/><br/>\"I\u2019m red but I\u2019m not a strawberry<br/>I have different types but I\u2019m not an apple<br/>Lose too much of me and you cease to be<br/><br/>Vhat am I?\"");
getinput_async (function(result) { switch (LCase(result)) {
case "blood":
case "Blood":
OutputText ("<br/>\"Correct for the third time!\" \"I will trust that you did not cheat\" <br/><br/>\"Help yourself to my precious pile, and fair you well on your travels, this land could do with a few more smart people\".");
IncreaseObjectCounter (_obj461, "riddle");
SetObjectFlagOn (_obj461, "solved");
MakeObjectInvisible (_obj462);
MakeObjectVisible (_obj464);
break;
default:
OutputText ("<br/>\"No, that's not right\", \"Speak to me when you are ready to try again.\"");
} });
}
else {
OutputText ("\"Greetings oh vise one\"");
} },
"hack": function() { if (Got(_obj360)) {
OutputText ("You consider a random axe of violence, but it would seem a little axe-cessive.");
}
else if (Got(_obj356)) {
OutputText ("You couldn't cut butter with this axe");
}
else {
OutputText ("You need a weapon to do that, now where did you leave your axe?");
} },
"kill": function() { if (Got(_obj360)) {
OutputText ("You consider a random axe of violence, but it would seem a little axe-cessive.");
}
else if (Got(_obj356)) {
OutputText ("You couldn't cut butter with this axe");
}
else {
OutputText ("You need a weapon to do that, now where did you leave your axe?");
} },
"_js_name": "_obj461",
"_types": ["male", "defaultobject"],
"displayverbs": ["Look at", "Speak to"],
"gender": "he",
"article": "him",
"visible": true,
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Bat"] = _obj461;
allObjects.push(_obj461);
objectsNameMap["Bat"] = _obj461;
_obj462 = {
"elementtype": "object",
"name": "Guano unsolved",
"parent": _obj459,
"type": "object",
"alias": "Bat Droppings",
"alt": ["guano", "droppings", "pile"],
"usedefaultprefix": false,
"take": false,
"takemsg": "You attempt to grab some of the guano, but quick as a flash the Bat throws something at your head, it smacks you with violent force and then returns to the Bat's claw like a boomerang. \"I am the Night!\" mumbles the Bat in a low voice.",
"look": "A large pile of slightly steaming, thin sausage shaped, black bat droppings.",
"_js_name": "_obj462",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Guano unsolved"] = _obj462;
allObjects.push(_obj462);
objectsNameMap["Guano unsolved"] = _obj462;
_obj463 = {
"elementtype": "object",
"name": "k64",
"parent": _obj459,
"type": "exit",
"alias": "south",
"_js_name": "_obj463",
"_types": ["southdirection", "defaultexit"],
"alt": ["s"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k64"] = _obj463;
objectReferences.push(["_obj463", "to", "_obj476"]);
allExits.push(_obj463);
objectsNameMap["k64"] = _obj463;
_obj464 = {
"elementtype": "object",
"name": "Guano solved",
"parent": _obj459,
"type": "object",
"alias": "Bat Droppings",
"alt": ["guano", "droppings", "pile"],
"usedefaultprefix": false,
"takemsg": "",
"visible": false,
"feature_usegive": true,
"look": "A large pile of thin sausage shaped black bat droppings",
"drop": false,
"take": function() { if (Got(_obj325)) {
OutputText ("<br/>You scoop up some of the precious Bat Guano with the empty chipped mug");
RemoveObject (_obj325);
AddToInventory (_obj489);
}
else {
OutputText ("You need something to carry the droppings in, you mug!");
} },
"_js_name": "_obj464",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Guano solved"] = _obj464;
allObjects.push(_obj464);
objectsNameMap["Guano solved"] = _obj464;
_obj465 = {
"elementtype": "object",
"name": "Business Card",
"type": "object",
"take": true,
"look": "A tiny business card, made of exquisite silken paper. In a minute gothic script it reads, <br/><br/><center>_______________________________________________________________________</center><br/><br/><br/><center><b><i>'Gerald T. Mouse, freelance adventurer, no quest too great or small.' <br/><br/>'Payment in cheese only!'</i></b></center><br/><br/><br/><center>________________________________________________________________</center>",
"alt": ["card"],
"_js_name": "_obj465",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Business Card"] = _obj465;
allObjects.push(_obj465);
objectsNameMap["Business Card"] = _obj465;
_obj466 = {
"elementtype": "object",
"name": "k65",
"type": "command",
"anonymous": true,
"pattern": "^fish$|^cast$|^use rod$|^cast rod$|^cast line$|^use fishing rod$",
"script": function(parameters) { if (Got(_obj430)) {
if (_obj245.pov.parent == _obj379) {
if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("13", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "13");
OutputText ("You cast your rod and the spinner flies above the water, lands with a splash and sinks out of sight, pulling the line behind it.<br/><br/>You hold the rod tightly and wait, the current is pulling strongly on the line.<br/><br/>You wait...and wait...and wait..Dylan pads around impatiently...and you wait..and the suddenly there is tremendous pull on the line and you struggle to hold on to the rod.<br/><br/>Pulling back on the rod you heave a large struggling Golden Fish on to the bank. You dispatch it with a clean blow and pick it up.");
AddToInventory (_obj467);}
else { OutputText ("You cast your rod and the spinner flies above the water, lands with a splash and sinks out of sight, pulling the line behind it.<br/>You hold the rod tightly and wait, the current is pulling strongly on the line.<br/><br/>You wait...and wait...and wait..Dylan pads around impatiently...and you wait..and then decide to give up. All you are going to catch here is a cold."); }
}
else if (_obj245.pov.parent == _obj327) {
if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("14", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "14");
OutputText ("You cast your rod and the spinner flies above the water, lands with a splash and sinks out of sight, pulling the line behind it.<br/><br/>You hold the rod tightly and wait, the current is pulling strongly on the line.<br/><br/>You wait...and wait...and wait..Dylan pads around impatiently...and you wait..and the suddenly there is tremendous pull on the line and you struggle to hold on to the rod.<br/><br/>Pulling back on the rod you heave a large struggling Silver Fish on to the bank. You dispatch it with a clean blow and pick it up.");
AddToInventory (_obj468);}
else { OutputText ("You cast your rod and the spinner flies above the water, lands with a splash and sinks out of sight, pulling the line behind it.<br/><br/>You hold the rod tightly and wait, the current is pulling strongly on the line.<br/><br/>You wait...and wait...and wait..Dylan pads around impatiently...and you wait..and then decide to give up. All you are going to catch here is a cold."); }
}
else if (_obj245.pov.parent == _obj400) {
if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("15", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "15");
OutputText ("You cast your rod and the spinner flies above the crashing waves, lands with a splash and sinks out of sight, pulling the line behind it.<br/><br/>You hold the rod tightly and wait, the surf is pulling strongly on the line.<br/><br/>You wait...and wait...and wait..Dylan digs around in the sand impatiently...and you wait..and the suddenly there is tremendous pull on the line and you struggle to hold on to the rod.<br/><br/>Pulling back on the rod you heave a large struggling Copper Fish on to the bank. You dispatch it with a clean blow and pick it up.");
AddToInventory (_obj469);}
else { OutputText ("You cast your rod and the spinner flies above the waves, lands with a splash and sinks out of sight, pulling the line behind it.<br/><br/>You hold the rod tightly and wait, the surf is pulling strongly on the line.<br/><br/>You wait...and wait...and wait..Dylan digs around in the sand impatiently...and you wait..and then decide to give up. All you are going to catch here is a cold."); }
}
else if (_obj245.pov.parent == _obj479) {
if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("16", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "16");
OutputText ("You cast your rod and the spinner flies above the water, lands with a splash and sinks out of sight, pulling the line behind it.<br/><br/>You hold the rod and wait, pulling on the line occasionally to move the spinner as there is no current here.<br/><br/>You wait...and wait...and wait..Dylan pads around the bottom of the stairs impatiently...and you wait..and wait. You're beginning to give up when suddenly Gerald the Mouse appears at your side.");
MoveObjectHere (_obj487);}

}
else {
OutputText ("You consider investing a new sport of dry fishing, but decide better of it");
}
}
else if (Got(_obj324)) {
OutputText ("Your fishing rod is broken");
}
else {
OutputText ("You don't have a fishing rod");
} },
"_js_name": "_obj466",
"_types": ["defaultcommand"]
};
elementsNameMap["k65"] = _obj466;
allCommands.push(_obj466);
objectsNameMap["k65"] = _obj466;
_obj467 = {
"elementtype": "object",
"name": "Golden Fish",
"type": "object",
"take": true,
"feature_usegive": true,
"look": "A large golden fish, its iridescent scales sparkle in the light",
"giveto": {"Cat": function() { OutputText ("At arms length you drop the Gold Fish near to the Cat. The cat sniffs and then wolfs down the fish in three bites. ");
RemoveObject (_obj467);
IncreaseObjectCounter (_obj456, "feed");
if (GetInt(_obj456, "feed") == 3) {
if (GetBoolean(_obj397, "mouse_mate")) {
MoveObjectHere (_obj470);
OutputText ("<br/>Just as you have given up hope of placating the damn Cat, Gerald the mouse appears, instead of clogs he is now wearing a tiny musketeer costume. He is carrying a tiny shield and a sword at his side.");
}
else {
OutputText ("<br/>Well feeding the cat hasn't worked out, perhaps you need a friend to help you out, you might find one in a windy place");
}
} }, "Dylan": function() { OutputText ("Dylan sniffs the fish, and looks at you with a puzzled expression"); } },
"_js_name": "_obj467",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Golden Fish"] = _obj467;
allObjects.push(_obj467);
objectsNameMap["Golden Fish"] = _obj467;
_obj468 = {
"elementtype": "object",
"name": "Silver Fish",
"type": "object",
"take": true,
"feature_usegive": true,
"look": "A large silver coloured fish, its iridescent scales sparkle in the light",
"giveto": {"Cat": function() { RemoveObject (_obj468);
OutputText ("At arms length you drop the Silver Fish near to the Cat. The cat sniffs and then wolfs down the fish in three bites. ");
IncreaseObjectCounter (_obj456, "feed");
if (GetInt(_obj456, "feed") == 3) {
if (GetBoolean(_obj397, "mouse_mate")) {
MoveObjectHere (_obj470);
OutputText ("<br/>Just as you have given up hope of placating the damn Cat, Gerald the mouse appears, instead of clogs he is now wearing a tiny musketeer costume. He is carrying a tiny shield and a sword at his side.");
}
else {
OutputText ("<br/>Well feeding the cat hasn't worked out, perhaps you need a friend to help you out, you might find one in a windy place");
}
} }, "Dylan": function() { OutputText ("Dylan sniffs the fish, and looks at you with a puzzled expression"); } },
"_js_name": "_obj468",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Silver Fish"] = _obj468;
allObjects.push(_obj468);
objectsNameMap["Silver Fish"] = _obj468;
_obj469 = {
"elementtype": "object",
"name": "Copper Fish",
"type": "object",
"take": true,
"feature_usegive": true,
"look": "A large copper coloured fish, its iridescent scales sparkle in the light",
"giveto": {"Cat": function() { OutputText ("At arms length you drop the Copper Fish near to the Cat. The cat sniffs and then wolfs down the fish in three bites. ");
RemoveObject (_obj469);
IncreaseObjectCounter (_obj456, "feed");
if (GetInt(_obj456, "feed") == 3) {
if (GetBoolean(_obj397, "mouse_mate")) {
OutputText ("<br/>Just as you have given up hope of placating the damn Cat, Gerald the mouse appears, instead of clogs he is now wearing a tiny musketeer costume. He is carrying a tiny shield and a sword at his side.");
MoveObjectHere (_obj470);
}
else {
OutputText ("<br/>Well feeding the cat hasn't worked out, perhaps you need a friend to help you out, you might find one in a windy place");
}
} }, "Dylan": function() { OutputText ("Dylan sniffs the fish, and looks at you with a puzzled expression"); } },
"_js_name": "_obj469",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Copper Fish"] = _obj469;
allObjects.push(_obj469);
objectsNameMap["Copper Fish"] = _obj469;
_obj470 = {
"elementtype": "object",
"name": "Cavern Mouse",
"type": "object",
"alias": "Gerald The Mouse",
"alt": ["mouse", "Gerald"],
"look": "Gerald is wearing a red musketeer costume, with a black belt and black boots, he is wielding a tiny beveled metal shield with a fleur-de-lis design and has a tiny sword at his side. He is also wearing a musketeer hat, with purple ribbon, a silver buckle and a white feather sticking up at the back. He cuts a fine dash!",
"usedefaultprefix": false,
"hack": function() { if (Got(_obj360)) {
OutputText ("You consider a random axe of violence, but it would seem a little axe-cessive.");
}
else if (Got(_obj356)) {
OutputText ("You couldn't cut butter with this axe");
}
else {
OutputText ("You need a weapon to do that, now where did you leave your axe?");
} },
"_js_name": "_obj470",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Cavern Mouse"] = _obj470;
allObjects.push(_obj470);
objectsNameMap["Cavern Mouse"] = _obj470;
_obj471 = {
"elementtype": "object",
"name": "Shiny Glass Sphere",
"type": "object",
"look": "A fist sized glass sphere, it is perfectly smooth and round, it has a highly polished surface. It reflects a curved and inverted image of the landscape.",
"polish": "It's already polished clean",
"clean": "It's already clean and shiny",
"wipe": "It's already clean and shiny",
"take": true,
"volume": 1,
"_js_name": "_obj471",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Shiny Glass Sphere"] = _obj471;
allObjects.push(_obj471);
objectsNameMap["Shiny Glass Sphere"] = _obj471;
_obj472 = {
"elementtype": "object",
"name": "k66",
"type": "command",
"anonymous": true,
"property": "clean",
"isverb": true,
"pattern": "^clean (?<object>.*)$",
"defaultexpression": "\"You can't clean \" + object.article + \".\"",
"_js_name": "_obj472",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k66"] = _obj472;
allCommands.push(_obj472);
objectsNameMap["k66"] = _obj472;
_obj473 = {
"elementtype": "object",
"name": "k67",
"type": "command",
"anonymous": true,
"property": "polish",
"isverb": true,
"pattern": "^polish (?<object>.*)$",
"defaultexpression": "\"You can't polish \" + object.article + \".\"",
"_js_name": "_obj473",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k67"] = _obj473;
allCommands.push(_obj473);
objectsNameMap["k67"] = _obj473;
_obj474 = {
"elementtype": "object",
"name": "k68",
"type": "command",
"anonymous": true,
"property": "wipe",
"isverb": true,
"pattern": "^wipe (?<object>.*)$",
"defaultexpression": "\"You can't wipe \" + object.article + \".\"",
"_js_name": "_obj474",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k68"] = _obj474;
allCommands.push(_obj474);
objectsNameMap["k68"] = _obj474;
_obj475 = {
"elementtype": "object",
"name": "Torch",
"type": "object",
"take": true,
"feature_lightdark": true,
"lightstrength": "strong",
"lightsource": true,
"alias": "Shiny Glass Sphere",
"drop": true,
"dropmsg": "",
"polish": "It's already polished and clean",
"clean": "It's already shiny and clean",
"wipe": "It's already shiny and clean",
"volume": 1,
"look": function() { if (_obj245.pov.parent == _obj459) {
OutputText ("A fist sized glass sphere, it is perfectly smooth and round, it is shining with a bright ethereal light.");
}
else {
OutputText ("A fist sized glass sphere, it is perfectly smooth and round, it has a highly polished surface. It reflects a curved and inverted image of the landscape.");
} },
"_js_name": "_obj475",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"dark": false,
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Torch"] = _obj475;
allObjects.push(_obj475);
objectsNameMap["Torch"] = _obj475;
_obj476 = {
"elementtype": "object",
"name": "Stone Stairs",
"type": "object",
"usedefaultprefix": false,
"descprefix": "You are at the top of the",
"description": "You are stood at the top of a huge spiral stone staircase carved out of the rock, somewhere below you can hear the sound of dripping water.",
"dark": true,
"darkroomdescription": "It is pitch black here, you attempt to move but trip on a step, it's too dangerous without light.",
"_js_name": "_obj476",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Stone Stairs"] = _obj476;
allObjects.push(_obj476);
objectsNameMap["Stone Stairs"] = _obj476;
_obj477 = {
"elementtype": "object",
"name": "k69",
"parent": _obj476,
"type": "exit",
"alias": "north",
"to": _obj459,
"_js_name": "_obj477",
"_types": ["northdirection", "defaultexit"],
"alt": ["n"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k69"] = _obj477;
allExits.push(_obj477);
objectsNameMap["k69"] = _obj477;
_obj478 = {
"elementtype": "object",
"name": "k70",
"parent": _obj476,
"type": "exit",
"alias": "down",
"_js_name": "_obj478",
"_types": ["downdirection", "defaultexit"],
"alt": ["d"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k70"] = _obj478;
objectReferences.push(["_obj478", "to", "_obj479"]);
allExits.push(_obj478);
objectsNameMap["k70"] = _obj478;
_obj479 = {
"elementtype": "object",
"name": "Well of Desolation",
"type": "object",
"descprefix": "You are in",
"dark": true,
"darkroomdescription": "It is pitch black here, all you can make out is the dripping of water.",
"alias": "The Giant's Bathroom",
"usedefaultprefix": false,
"description": function() { if (GetBoolean(_obj479, "drained")) {
OutputText ("A huge underground pit that has been drained of water. Its very cold in here and your breath mists in the air.<br/><br/>Dylan is shivering");
}
else {
OutputText ("A huge underground pool, there is a steady drip of water from the stalactites above. The water looks extremely cold and deep. Your breath mists in the air.<br/><br/>Dylan is shivering.");
} },
"_js_name": "_obj479",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Well of Desolation"] = _obj479;
allObjects.push(_obj479);
objectsNameMap["Well of Desolation"] = _obj479;
_obj480 = {
"elementtype": "object",
"name": "k71",
"parent": _obj479,
"type": "exit",
"alias": "up",
"to": _obj476,
"_js_name": "_obj480",
"_types": ["updirection", "defaultexit"],
"alt": ["u"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k71"] = _obj480;
allExits.push(_obj480);
objectsNameMap["k71"] = _obj480;
_obj481 = {
"elementtype": "object",
"name": "plug",
"parent": _obj479,
"type": "exit",
"alias": "down",
"visible": false,
"_js_name": "_obj481",
"_types": ["downdirection", "defaultexit"],
"alt": ["d"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["plug"] = _obj481;
objectReferences.push(["_obj481", "to", "_obj490"]);
allExits.push(_obj481);
objectsNameMap["plug"] = _obj481;
_obj482 = {
"elementtype": "object",
"name": "Plughole",
"parent": _obj479,
"type": "object",
"alias": "hole",
"scenery": false,
"look": "A plug shaped hole, pitch black inside, there appear to be a few long strands of hair attached to it.",
"visible": false,
"_js_name": "_obj482",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Plughole"] = _obj482;
allObjects.push(_obj482);
objectsNameMap["Plughole"] = _obj482;
_obj483 = {
"elementtype": "object",
"name": "Giants Hair",
"parent": _obj479,
"type": "object",
"alias": "Giant's Hair",
"look": "A few fine strands of very long grey hair, tough as rope.",
"take": true,
"visible": false,
"feature_usegive": true,
"giveto": {"Pub Gnome": function() { OutputText ("\"Well, well, well, what do we have here! Giant's hair, rare stuff this, makes the best rope known to man, let's see what we can do\"<br/><br/>With astonishing speed and dexterity the Gnome twists and plaits and weaves the strands of hair together into a long, thin, but incredibly strong rope, he hands it to you.<br/>");
AddToInventory (_obj578);
RemoveObject (_obj483); } },
"_js_name": "_obj483",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Giants Hair"] = _obj483;
allObjects.push(_obj483);
objectsNameMap["Giants Hair"] = _obj483;
_obj484 = {
"elementtype": "object",
"name": "k72",
"parent": _obj479,
"type": "command",
"anonymous": true,
"pattern": "^swim$|^dive$",
"script": function(parameters) { OutputText ("<br/>You dip an exploratory toe into the water, it is so cold it numbs your entire foot, you decide against getting further in."); },
"_js_name": "_obj484",
"_types": ["defaultcommand"]
};
elementsNameMap["k72"] = _obj484;
allCommands.push(_obj484);
objectsNameMap["k72"] = _obj484;
_obj485 = {
"elementtype": "object",
"name": "pool",
"parent": _obj479,
"type": "object",
"alias": "pool",
"scenery": true,
"alt": ["water"],
"swim": "You dip an exploratory toe into the water, it is so cold it numbs your foot, you decide against getting further in.",
"dive": " You dip an exploratory toe into the water, it is so cold it numbs your entire foot, you decide against getting further in.",
"wade": " You dip an exploratory toe into the water, it is so cold it numbs your entire foot, you decide against getting further in.",
"wadeinto": " You dip an exploratory toe into the water, it is so cold it numbs your entire foot, you decide against getting further in.",
"swimacross": " You dip an exploratory toe into the water, it is so cold it numbs your entire foot, you decide against getting further in.",
"diveinto": " You dip an exploratory toe into the water, it is so cold it numbs your entire foot, you decide against getting further in.",
"look": "<br/>A huge underground pool, there is a steady drip of water from the stalactites above. The water looks extremely cold and deep. Your breath mists in the air.",
"_js_name": "_obj485",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["pool"] = _obj485;
allObjects.push(_obj485);
objectsNameMap["pool"] = _obj485;
_obj486 = {
"elementtype": "object",
"name": "Piano Tuner Mouse",
"type": "object",
"look": "It's Gerald the Mouse, he's wearing a smart grey suit and half-moon spectacles, and he's carrying a small metal lever.",
"hack": function() { if (Got(_obj360)) {
OutputText ("You consider a random axe of violence, but it would seem a little axe-cessive.");
}
else if (Got(_obj356)) {
OutputText ("You couldn't cut butter with this axe");
}
else {
OutputText ("You need a weapon to do that, now where did you leave your axe?");
} },
"_js_name": "_obj486",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Piano Tuner Mouse"] = _obj486;
allObjects.push(_obj486);
objectsNameMap["Piano Tuner Mouse"] = _obj486;
_obj487 = {
"elementtype": "object",
"name": "Scuba Mouse",
"type": "object",
"look": "It's Gerald the Mouse, this time he is wearing a full scuba suit, complete with flippers, mask, and a respirator connected by tiny rubber hoses to two bright yellow oxygen tanks on his back. He gives you a thumps-up sign.",
"alias": "Gerald The Mouse",
"hack": function() { if (Got(_obj360)) {
OutputText ("You consider a random axe of violence, but it would seem a little axe-cessive.");
}
else if (Got(_obj356)) {
OutputText ("You couldn't cut butter with this axe");
}
else {
OutputText ("You need a weapon to do that, now where did you leave your axe?");
} },
"_js_name": "_obj487",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Scuba Mouse"] = _obj487;
allObjects.push(_obj487);
objectsNameMap["Scuba Mouse"] = _obj487;
_obj488 = {
"elementtype": "object",
"name": "k73",
"type": "command",
"anonymous": true,
"property": "ride",
"isverb": true,
"pattern": "^ride (?<object>.*)$",
"defaultexpression": "\"You can't ride \" + object.article + \".\"",
"_js_name": "_obj488",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k73"] = _obj488;
allCommands.push(_obj488);
objectsNameMap["k73"] = _obj488;
_obj489 = {
"elementtype": "object",
"name": "Chipped Mug With Guano",
"type": "object",
"look": "An old brown clay mug, chipped on the rim. On the side it reads 'Mug puns are tea-dious'. It is full of sightly steaming Bat Guano",
"take": true,
"feature_usegive": true,
"alias": "Chipped Mug (filled with Bat Guano)",
"alt": ["guano", "droppings"],
"drop": function() { if (_obj245.pov.parent == _obj554) {
if (_obj245.pov.parent == _obj554) {

}
OutputText ("You pour the Bat Guano on to the clump of horehound, just at that moment there is a convenient brief shower of rain. The leaves of the horehound plump up and unfurl before your eyes.");
RemoveObject (_obj489);
MakeObjectInvisible (_obj557);
MakeObjectVisible (_obj558);
}
else {
MoveObjectHere (_obj489);
OutputText ("<br/>dropped");
} },
"selfuseon": {"Horehound sick": function() { RemoveObject (_obj489);
AddToInventory (_obj325);
MakeObjectInvisible (_obj557);
MakeObjectVisible (_obj558);
OutputText ("You pour the Bat Guano on to the clump of horehound, just at that moment there is a convenient brief shower of rain. The leaves of the horehound plump up and unfurl before your eyes."); } },
"_js_name": "_obj489",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Chipped Mug With Guano"] = _obj489;
allObjects.push(_obj489);
objectsNameMap["Chipped Mug With Guano"] = _obj489;
_obj490 = {
"elementtype": "object",
"name": "Top of the Stone Slide",
"type": "object",
"descprefix": "You are at the",
"dark": true,
"darkroomdescription": "It is pitch-back here, you the floor feels damp and slimy underfoot.",
"description": "You are at the top of a U-shaped spiral slide carved out of the stone, presumably used to drain the water from the floor above.  The surface is slimy and slippery underfoot",
"_js_name": "_obj490",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Top of the Stone Slide"] = _obj490;
allObjects.push(_obj490);
objectsNameMap["Top of the Stone Slide"] = _obj490;
_obj491 = {
"elementtype": "object",
"name": "k74",
"parent": _obj490,
"type": "exit",
"alias": "up",
"to": _obj479,
"_js_name": "_obj491",
"_types": ["updirection", "defaultexit"],
"alt": ["u"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k74"] = _obj491;
allExits.push(_obj491);
objectsNameMap["k74"] = _obj491;
_obj492 = {
"elementtype": "object",
"name": "k75",
"parent": _obj490,
"type": "exit",
"alias": "down",
"runscript": true,
"script": function() { OutputText ("You start to gingerly descend down the slippery spiral slope, but as you turn a corner you loose your footing and behind slipping and sliding down, building up speed at an alarming rate. <br/><br/>Dylan come bounding after you, looses his balance and careers into your back. You cling on to Dylan and together you speed down the slide until you see an oval of daylight getting larger, you are spat out at high velocity into the daylight, luckily the ground is soft and boggy and you land without injury, blinking in the daylight. Dylan licks your face.");
MoveObject (_obj358, _obj495); },
"_js_name": "_obj492",
"_types": ["downdirection", "defaultexit"],
"alt": ["d"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k75"] = _obj492;
objectReferences.push(["_obj492", "to", "_obj495"]);
allExits.push(_obj492);
objectsNameMap["k75"] = _obj492;
_obj493 = {
"elementtype": "object",
"name": "k76",
"parent": _obj490,
"type": "command",
"anonymous": true,
"_js_name": "_obj493",
"_types": ["defaultcommand"],
"pattern": "^$"
};
elementsNameMap["k76"] = _obj493;
allCommands.push(_obj493);
objectsNameMap["k76"] = _obj493;
_obj494 = {
"elementtype": "object",
"name": "k77",
"parent": _obj490,
"type": "command",
"anonymous": true,
"pattern": "^slide$",
"script": function(parameters) { OutputText ("Grabbing hold of Dylan you launch yourself down the spiral slide. building up speed at an alarming rate. <br/><br/>You cling on to Dylan and together you career down the slide until you see an oval of daylight getting larger, you are spat out at high velocity into the daylight, luckily the ground is soft and boggy and you land without injury, blinking in the daylight. Dylan licks your face.");
MoveObject (_obj358, _obj495); },
"_js_name": "_obj494",
"_types": ["defaultcommand"]
};
elementsNameMap["k77"] = _obj494;
allCommands.push(_obj494);
objectsNameMap["k77"] = _obj494;
_obj495 = {
"elementtype": "object",
"name": "Midland Marshes",
"type": "object",
"usedefaultprefix": false,
"descprefix": "You are in the",
"description": "A bleak wetland with long grasses, and low growing shrubs and bracken. Far on the horizon you can just make out the silhouette of the the City of Lost. <br/><br/>To the southeast you can see a Brewery, with steam and smoke rising from several chimneys on the roof, there is the smell of yeast and hops in the air.",
"_js_name": "_obj495",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Midland Marshes"] = _obj495;
allObjects.push(_obj495);
objectsNameMap["Midland Marshes"] = _obj495;
_obj496 = {
"elementtype": "object",
"name": "k78",
"parent": _obj495,
"type": "exit",
"alias": "up",
"locked": true,
"lockmessage": "It is too steep and slippery to go up this way",
"to": _obj490,
"_js_name": "_obj496",
"_types": ["updirection", "defaultexit"],
"alt": ["u"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k78"] = _obj496;
allExits.push(_obj496);
objectsNameMap["k78"] = _obj496;
_obj497 = {
"elementtype": "object",
"name": "City of Lost",
"parent": _obj495,
"type": "object",
"scenery": true,
"look": "The silhouette of the City of Lost is on the horizon, its been many years since you saw it. It invokes both dread and painful nostalgia. Amongst the building shapes you can make out the crenelations of the King's Castle walls and keep.",
"alt": ["horizon", "silhouette"],
"_js_name": "_obj497",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["City of Lost"] = _obj497;
allObjects.push(_obj497);
objectsNameMap["City of Lost"] = _obj497;
_obj498 = {
"elementtype": "object",
"name": "k79",
"parent": _obj495,
"type": "exit",
"alias": "southeast",
"_js_name": "_obj498",
"_types": ["southeastdirection", "defaultexit"],
"alt": ["se"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k79"] = _obj498;
objectReferences.push(["_obj498", "to", "_obj509"]);
allExits.push(_obj498);
objectsNameMap["k79"] = _obj498;
_obj499 = {
"elementtype": "object",
"name": "k80",
"parent": _obj495,
"type": "exit",
"alias": "south",
"_js_name": "_obj499",
"_types": ["southdirection", "defaultexit"],
"alt": ["s"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k80"] = _obj499;
objectReferences.push(["_obj499", "to", "_obj530"]);
allExits.push(_obj499);
objectsNameMap["k80"] = _obj499;
_obj500 = {
"elementtype": "object",
"name": "k81",
"parent": _obj495,
"type": "exit",
"alias": "north",
"_js_name": "_obj500",
"_types": ["northdirection", "defaultexit"],
"alt": ["n"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k81"] = _obj500;
objectReferences.push(["_obj500", "to", "_obj554"]);
allExits.push(_obj500);
objectsNameMap["k81"] = _obj500;
_obj501 = {
"elementtype": "object",
"name": "Brewery",
"type": "object",
"alias": "Banks's Brewery",
"description": "The room is dominated by huge towering metal tanks, connected by a complicated system of pipes and valves. You can make out what you assume is a Mash Tun (you can see workmen up at the top pouring grain and water into it) which in turn is connected to a huge Brewing Kettle and a Fermentation Tank.",
"usedefaultprefix": false,
"descprefix": "You are inside",
"_js_name": "_obj501",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Brewery"] = _obj501;
allObjects.push(_obj501);
objectsNameMap["Brewery"] = _obj501;
_obj502 = {
"elementtype": "object",
"name": "k82",
"parent": _obj501,
"type": "exit",
"alias": "out",
"_js_name": "_obj502",
"_types": ["outdirection", "defaultexit"],
"alt": ["o"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k82"] = _obj502;
objectReferences.push(["_obj502", "to", "_obj509"]);
allExits.push(_obj502);
objectsNameMap["k82"] = _obj502;
_obj503 = {
"elementtype": "object",
"name": "k83",
"parent": _obj501,
"type": "exit",
"alias": "north",
"_js_name": "_obj503",
"_types": ["northdirection", "defaultexit"],
"alt": ["n"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k83"] = _obj503;
objectReferences.push(["_obj503", "to", "_obj519"]);
allExits.push(_obj503);
objectsNameMap["k83"] = _obj503;
_obj504 = {
"elementtype": "object",
"name": "Brewing Kettle",
"parent": _obj501,
"type": "object",
"scenery": true,
"look": "A huge metal cylinder tank, connected by pipework to the Mash Tun and the Fermentation Tank",
"_js_name": "_obj504",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Brewing Kettle"] = _obj504;
allObjects.push(_obj504);
objectsNameMap["Brewing Kettle"] = _obj504;
_obj505 = {
"elementtype": "object",
"name": "Fermentation Tank",
"parent": _obj501,
"type": "object",
"look": "A huge metal cylinder, attached by pipework to the Brewing Kettle",
"_js_name": "_obj505",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Fermentation Tank"] = _obj505;
allObjects.push(_obj505);
objectsNameMap["Fermentation Tank"] = _obj505;
_obj506 = {
"elementtype": "object",
"name": "Mash Tun",
"parent": _obj501,
"type": "object",
"look": "A huge metal cylinder, at the top you can see workmen pouring grain and water into it. It is connected by pipes to the Brewing Kettle.",
"_js_name": "_obj506",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Mash Tun"] = _obj506;
allObjects.push(_obj506);
objectsNameMap["Mash Tun"] = _obj506;
_obj507 = {
"elementtype": "object",
"name": "Pint Glass",
"parent": _obj501,
"type": "object",
"take": true,
"feature_container": true,
"open": false,
"close": false,
"transparent": true,
"maxobjects": 3,
"maxvolume": 0,
"containermaxobjects": "",
"containerfullmessage": "it won't fit",
"displayverbs": ["Look at", "Take", "Open", "Close"],
"inventoryverbs": ["Look at", "Use", "Drop", "Open", "Close"],
"look": function() { if (Got(_obj507)) {
OutputText ("A dimpled glass pint mug, it has a pleasant weight to it.");
}
else {
OutputText ("A dimpled glass pint mug");
} },
"_js_name": "_obj507",
"_types": ["container_limited", "defaultobject"],
"addscript": function() { var activecontainer = this;
var correct = true;
while (DoesInherit(activecontainer, "container_base")) {
if (HasInt(activecontainer, "maxvolume")) {
if (GetVolume(object, true) + GetVolume(activecontainer, false) > activecontainer.maxvolume) {
var correct = false;
if (HasString(this, "containerfullmessage")) {
var message = this.containerfullmessage;
}
else {
var message = overloadedFunctions.DynamicTemplate("ContainerFull", this);
}
}
}
var activecontainer = activecontainer.parent;
}
var children = GetDirectChildren(this);
if (listcount(children) >= this.maxobjects) {
var correct = false;
if (HasString(this, "containerfullmessage")) {
var message = this.containerfullmessage;
}
else {
var message = overloadedFunctions.DynamicTemplate("MaxObjectsInContainer", this);
}
}
if (correct == false) {
OutputText (message);
}
else {
set(object, "parent", this);
OutputText (Template("Done"));
} },
"isopen": true,
"container": true,
"visible": true,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Pint Glass"] = _obj507;
allObjects.push(_obj507);
objectsNameMap["Pint Glass"] = _obj507;
_obj508 = {
"elementtype": "object",
"name": "workmen",
"parent": _obj501,
"type": "object",
"scenery": true,
"look": "<br/>A couple of stout workmen are topping up the mash tun, ale in a day's work for them",
"_js_name": "_obj508",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["workmen"] = _obj508;
allObjects.push(_obj508);
objectsNameMap["workmen"] = _obj508;
_obj509 = {
"elementtype": "object",
"name": "Brewery Yard",
"type": "object",
"alias": "Banks's Brewery Yard",
"description": function() { if (ListContains(ScopeVisible(), _obj513)) {
OutputText ("A cobbled yard, full of barrels of Banks's bitter and sacks of barley. In one corner of the yard is a Cooper making more barrels. <br/><br/>The yard is full of workers streaming in and out of the main brewery itself, carrying sacks, rolling barrels, bring supplies to the Cooper, it's a busy old place and these guys are grafting hard, you can hear them puffing and see them wipe their brows of sweat. ");
}
else {
OutputText ("A cobbled yard, full of workers just standing around, there doesn't appear to much work going on here at all.<br/><br/>In the corner you can see a very pale looking Cooper, sat next to pile of half made barrels.");
} },
"_js_name": "_obj509",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Brewery Yard"] = _obj509;
allObjects.push(_obj509);
objectsNameMap["Brewery Yard"] = _obj509;
_obj510 = {
"elementtype": "object",
"name": "Hungover Cooper",
"parent": _obj509,
"type": "object",
"alias": "The Cooper",
"look": "The Cooper is wearing blue denim dungarees, a plaid red and black shirt and a flat cap. His skin is palid pale and green around the gills, he is sweating profusely, groaning and holding his brow. He's not doing any work.",
"speak": "\"My poor head! That damn Miller and her cider, horrible gut rotting stuff, I should have stuck with the Banks's, I can't see or think straight to work, the Gaffer is going to fire me if I can't shift this hangover.\" The thought of the drink brings another wave of nausea over the poor chap and he sways on his stool.",
"usedefaultprefix": false,
"_js_name": "_obj510",
"_types": ["male", "defaultobject"],
"displayverbs": ["Look at", "Speak to"],
"gender": "he",
"article": "him",
"visible": true,
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Hungover Cooper"] = _obj510;
allObjects.push(_obj510);
objectsNameMap["Hungover Cooper"] = _obj510;
_obj511 = {
"elementtype": "object",
"name": "k84",
"parent": _obj509,
"type": "exit",
"alias": "northwest",
"to": _obj495,
"_js_name": "_obj511",
"_types": ["northwestdirection", "defaultexit"],
"alt": ["nw"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k84"] = _obj511;
allExits.push(_obj511);
objectsNameMap["k84"] = _obj511;
_obj512 = {
"elementtype": "object",
"name": "k85",
"parent": _obj509,
"type": "exit",
"alias": "in",
"to": _obj501,
"_js_name": "_obj512",
"_types": ["indirection", "defaultexit"],
"alt": [""],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k85"] = _obj512;
allExits.push(_obj512);
objectsNameMap["k85"] = _obj512;
_obj513 = {
"elementtype": "object",
"name": "Cured Cooper",
"parent": _obj509,
"type": "object",
"visible": false,
"look": "The Cooper is wearing blue denim dungarees, a plaid red and black shirt and a flat cap. He's hard at work making barrels.",
"usedefaultprefix": false,
"alias": "The Cooper",
"_js_name": "_obj513",
"_types": ["male", "defaultobject"],
"displayverbs": ["Look at", "Speak to"],
"gender": "he",
"article": "him",
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Cured Cooper"] = _obj513;
allObjects.push(_obj513);
objectsNameMap["Cured Cooper"] = _obj513;
_obj514 = {
"elementtype": "object",
"name": "half made barrels",
"parent": _obj509,
"type": "object",
"alias": "barrels",
"look": "A stack of barrels in various stages of completion, but none of them are finished",
"scenery": true,
"fix": "you don't have the materials or the skills",
"make": "you don't have the materials or the skills",
"takemsg": "you don't need them",
"_js_name": "_obj514",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["half made barrels"] = _obj514;
allObjects.push(_obj514);
objectsNameMap["half made barrels"] = _obj514;
_obj515 = {
"elementtype": "object",
"name": "made barrels",
"parent": _obj509,
"type": "object",
"alias": "barrels",
"look": "Barrels, barrels everywhere; some standing in the yard waiting to be shipped out, others being carried out of the brewery by the workers. The Cooper is hard a work keeping a fresh supply coming",
"visible": false,
"scenery": true,
"takemsg": "you don't need them",
"_js_name": "_obj515",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["made barrels"] = _obj515;
allObjects.push(_obj515);
objectsNameMap["made barrels"] = _obj515;
_obj516 = {
"elementtype": "object",
"name": "stool",
"parent": _obj509,
"type": "object",
"scenery": true,
"look": "A three-legged joined wooden stool, The Cooper is sat on it",
"takemsg": "The Cooper is using it to sit on",
"_js_name": "_obj516",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["stool"] = _obj516;
allObjects.push(_obj516);
objectsNameMap["stool"] = _obj516;
_obj517 = {
"elementtype": "object",
"name": "workers",
"parent": _obj509,
"type": "object",
"scenery": true,
"look": function() { if (ListContains(ScopeVisible(), _obj513)) {
OutputText (" The workers are grafting hard to catch up with the lost work time");
}
else {
OutputText ("The workers are stood around idle, no barrels means no work to do");
} },
"_js_name": "_obj517",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["workers"] = _obj517;
allObjects.push(_obj517);
objectsNameMap["workers"] = _obj517;
_obj518 = {
"elementtype": "object",
"name": "hair of dog",
"type": "object",
"alias": "Dog Hair",
"take": true,
"look": "A few strands of Dylan's brown and white hair",
"_js_name": "_obj518",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["hair of dog"] = _obj518;
allObjects.push(_obj518);
objectsNameMap["hair of dog"] = _obj518;
_obj519 = {
"elementtype": "object",
"name": "Brewery Canteen",
"type": "object",
"usedefaultprefix": false,
"descprefix": "You are in the",
"alias": "Brewery Kitchen",
"description": "<br/>It's the staff kitchen, industrial, stainless steel everywhere and clean as a whistle.",
"_js_name": "_obj519",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Brewery Canteen"] = _obj519;
allObjects.push(_obj519);
objectsNameMap["Brewery Canteen"] = _obj519;
_obj520 = {
"elementtype": "object",
"name": "Fridge",
"parent": _obj519,
"type": "object",
"feature_container": true,
"hidechildren": true,
"listchildren": true,
"displayverbs": ["Look at", "Take", "Open", "Close"],
"inventoryverbs": ["Look at", "Use", "Drop", "Open", "Close"],
"_js_name": "_obj520",
"_types": ["container_closed", "defaultobject"],
"open": true,
"close": true,
"container": true,
"visible": true,
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Fridge"] = _obj520;
allObjects.push(_obj520);
objectsNameMap["Fridge"] = _obj520;
_obj521 = {
"elementtype": "object",
"name": "Celery",
"parent": _obj520,
"type": "object",
"take": true,
"alias": "Stick of Celery",
"look": " A long fibrous green stalk tapering into yellow leaves",
"_js_name": "_obj521",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Celery"] = _obj521;
allObjects.push(_obj521);
objectsNameMap["Celery"] = _obj521;
_obj522 = {
"elementtype": "object",
"name": "Freezer",
"parent": _obj519,
"type": "object",
"feature_container": true,
"hidechildren": true,
"listchildren": true,
"displayverbs": ["Look at", "Take", "Open", "Close"],
"inventoryverbs": ["Look at", "Use", "Drop", "Open", "Close"],
"_js_name": "_obj522",
"_types": ["container_closed", "defaultobject"],
"open": true,
"close": true,
"container": true,
"visible": true,
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Freezer"] = _obj522;
allObjects.push(_obj522);
objectsNameMap["Freezer"] = _obj522;
_obj523 = {
"elementtype": "object",
"name": "Ice",
"parent": _obj522,
"type": "object",
"take": true,
"usedefaultprefix": false,
"alias": "Ice Cubes",
"look": "It's ice, ice baby!",
"_js_name": "_obj523",
"_types": ["plural", "defaultobject"],
"gender": "they",
"article": "them",
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Ice"] = _obj523;
allObjects.push(_obj523);
objectsNameMap["Ice"] = _obj523;
_obj524 = {
"elementtype": "object",
"name": "Cupboard",
"parent": _obj519,
"type": "object",
"feature_container": true,
"hidechildren": true,
"listchildren": true,
"displayverbs": ["Look at", "Take", "Open", "Close"],
"inventoryverbs": ["Look at", "Use", "Drop", "Open", "Close"],
"_js_name": "_obj524",
"_types": ["container_closed", "defaultobject"],
"open": true,
"close": true,
"container": true,
"visible": true,
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Cupboard"] = _obj524;
allObjects.push(_obj524);
objectsNameMap["Cupboard"] = _obj524;
_obj525 = {
"elementtype": "object",
"name": "Toms",
"parent": _obj524,
"type": "object",
"alias": "Tin of Tomato Juice",
"feature_container": true,
"feature_usegive": true,
"take": true,
"volume": 1,
"displayverbs": ["Look at", "Take", "Open", "Close"],
"inventoryverbs": ["Look at", "Use", "Drop", "Open", "Close"],
"openscript": function() { if (Got(_obj528)) {
HelperOpenObject (_obj525);
OutputText ("With some effort you open the tin with the can opener");
}
else {
OutputText ("You need something to open the can with");
} },
"look": function() { if (Contains (_obj525,_obj526)) {
OutputText ("A full tin of tomato juice. ");
}
else {
OutputText ("An empty tomato juice can");
} },
"_js_name": "_obj525",
"_types": ["openable", "defaultobject"],
"open": true,
"close": true,
"visible": true,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Toms"] = _obj525;
allObjects.push(_obj525);
objectsNameMap["Toms"] = _obj525;
_obj526 = {
"elementtype": "object",
"name": "tomato juice",
"parent": _obj525,
"type": "object",
"usedefaultprefix": false,
"look": "Bright red tomato juice, it has a tangy sweet smell",
"_js_name": "_obj526",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["tomato juice"] = _obj526;
allObjects.push(_obj526);
objectsNameMap["tomato juice"] = _obj526;
_obj527 = {
"elementtype": "object",
"name": "Drawer",
"parent": _obj519,
"type": "object",
"feature_container": true,
"hidechildren": true,
"listchildren": true,
"displayverbs": ["Look at", "Take", "Open", "Close"],
"inventoryverbs": ["Look at", "Use", "Drop", "Open", "Close"],
"_js_name": "_obj527",
"_types": ["container_closed", "defaultobject"],
"open": true,
"close": true,
"container": true,
"visible": true,
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Drawer"] = _obj527;
allObjects.push(_obj527);
objectsNameMap["Drawer"] = _obj527;
_obj528 = {
"elementtype": "object",
"name": "Can Opener",
"parent": _obj527,
"type": "object",
"take": true,
"alt": [],
"look": "A metal butterfly can opener",
"_js_name": "_obj528",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Can Opener"] = _obj528;
allObjects.push(_obj528);
objectsNameMap["Can Opener"] = _obj528;
_obj529 = {
"elementtype": "object",
"name": "k86",
"parent": _obj519,
"type": "exit",
"alias": "south",
"to": _obj501,
"_js_name": "_obj529",
"_types": ["southdirection", "defaultexit"],
"alt": ["s"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k86"] = _obj529;
allExits.push(_obj529);
objectsNameMap["k86"] = _obj529;
_obj530 = {
"elementtype": "object",
"name": "Outside City Gates",
"type": "object",
"description": "You are outside the city walls of Lost. There is a City Guard in front of you, and behind him a set of huge wrought-iron gates.",
"descprefix": "You are ",
"_js_name": "_obj530",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Outside City Gates"] = _obj530;
allObjects.push(_obj530);
objectsNameMap["Outside City Gates"] = _obj530;
_obj531 = {
"elementtype": "object",
"name": "k87",
"parent": _obj530,
"type": "exit",
"alias": "north",
"to": _obj495,
"_js_name": "_obj531",
"_types": ["northdirection", "defaultexit"],
"alt": ["n"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k87"] = _obj531;
allExits.push(_obj531);
objectsNameMap["k87"] = _obj531;
_obj532 = {
"elementtype": "object",
"name": "gates",
"parent": _obj530,
"type": "exit",
"alias": "south",
"locked": true,
"lockmessage": "\"Halt!\" barks the Guard, \"I'm under strict orders not to allow any northerners into the city\"",
"_js_name": "_obj532",
"_types": ["southdirection", "defaultexit"],
"alt": ["s"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["gates"] = _obj532;
objectReferences.push(["_obj532", "to", "_obj535"]);
allExits.push(_obj532);
objectsNameMap["gates"] = _obj532;
_obj533 = {
"elementtype": "object",
"name": "City Guard",
"parent": _obj530,
"type": "object",
"look": "One of the General's goons, with a jobsworth moronic grin on his face, as with most of these types if he ever had a brain cell it died of loneliness a long long time ago. <br/><br/>His CV no doubt lists following orders and stabbing things with the pointy end of his sword as his favourite hobbies.",
"speak": "\"Move away peasant, leave good, remain bad\"",
"_js_name": "_obj533",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["City Guard"] = _obj533;
allObjects.push(_obj533);
objectsNameMap["City Guard"] = _obj533;
_obj534 = {
"elementtype": "object",
"name": "gate",
"parent": _obj530,
"type": "object",
"alias": "Wrought Iron Gate",
"scenery": true,
"look": "A huge wrought iron gate, you can see the city plaza through the bars. It is at least 12 feet high, so there's no chance of climbing over it. The iron bars have been expertly bent into the shape of a spiders web.",
"_js_name": "_obj534",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["gate"] = _obj534;
allObjects.push(_obj534);
objectsNameMap["gate"] = _obj534;
_obj535 = {
"elementtype": "object",
"name": "City Plaza",
"type": "object",
"description": "Large open public space, and the heart of the city. Doesn't seem to be many people around though, perhaps they are hiding from the army. <br/><br/>On the south side of the square there is a row of soldiers on horseback, blocking the path to the castle drawbridge.<br/><br/>In the centre of the square there is a fountain, underneath which you can see an emaciated pigeon pecking at a few biscuit crumbs.",
"_js_name": "_obj535",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["City Plaza"] = _obj535;
allObjects.push(_obj535);
objectsNameMap["City Plaza"] = _obj535;
_obj536 = {
"elementtype": "object",
"name": "k88",
"parent": _obj535,
"type": "exit",
"alias": "north",
"to": _obj530,
"_js_name": "_obj536",
"_types": ["northdirection", "defaultexit"],
"alt": ["n"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k88"] = _obj536;
allExits.push(_obj536);
objectsNameMap["k88"] = _obj536;
_obj537 = {
"elementtype": "object",
"name": "k89",
"parent": _obj535,
"type": "exit",
"alias": "east",
"to": _obj407,
"_js_name": "_obj537",
"_types": ["eastdirection", "defaultexit"],
"alt": ["e"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k89"] = _obj537;
allExits.push(_obj537);
objectsNameMap["k89"] = _obj537;
_obj538 = {
"elementtype": "object",
"name": "k90",
"parent": _obj535,
"type": "exit",
"alias": "west",
"_js_name": "_obj538",
"_types": ["westdirection", "defaultexit"],
"alt": ["w"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k90"] = _obj538;
objectReferences.push(["_obj538", "to", "_obj544"]);
allExits.push(_obj538);
objectsNameMap["k90"] = _obj538;
_obj539 = {
"elementtype": "object",
"name": "Sick Pigeon Jon",
"parent": _obj535,
"type": "object",
"alias": "Pigeon Jon",
"visible": true,
"scenery": true,
"look": "A skinny grey city pigeon with a grumpy demeanour ",
"speak": function() { if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("17", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "17");
OutputText ("<br/>\"Coo! Coo! It's a fucking Coup! Ha ha ha, you took your time getting here, thanks for carrying the letter, couldn't be arsed lugging that thing around!\" \"My names Jon and I'm a fucking pigeon!\" The pigeon then descends into an alarming coughing fit.");}
else { OutputText ("<br/>\"My names Jon and I'm a fucking pigeon!\" *cough cough, ack!\""); } },
"askdefault": function() { OutputText ("<br/>\"fucked if I know anything about that\""); },
"hack": function() { if (Got(_obj360)) {
OutputText ("<br/>You swing your axe at the pigeon, the pigeon effortlessly dodges the blow, \"Ha ha, too fucking slow axe boy!\" \"cough, cough, hack\"");
}
else {
OutputText ("You need a weapon first, now where did you leave your axe?");
} },
"ask": {"bony king": function() { OutputText ("<br/>\"He's banged up in the prison, he refused to invade the Kingdom of Somewhere, made the General furious, that hawk hasn't had a decent war in decades and finally snapped.\" Once again the pigeon starts coughing in an alarming fashion."); }, "biscuit crumbs": function() { OutputText ("<br/>\"They're my biscuit crumbs, fuck you. I'm bloody starving, no people means no litter means hungry Jon\" *hack, hack, cough*"); }, "General D'sarray": function() { OutputText ("<br/>\"That Warmongering fucknugget! Tried to convince the King that Somewhere are developing Weapons of Mass Destruction, the King was having none of it without evidence\" *cough, cough, hack*"); }, "wendy miller": function() { OutputText ("<br/>\"A kindly lass, she sometime feeds me biscuits, but boy is she a fiend for the cider!\" *cough, cough, splutter*"); }, "bat batbat": function() { OutputText ("<br/>\"Oh you've met that nutter then? Fruitbat? Fruitcake more like! Ha ha ha!\" *cough, hack, cough*"); }, "cough": function() { OutputText ("<br/>\"Oh you noticed did you? Driving me nuts, still you know what they say, 'It's not the cough that carries you off, it's the coffin they carry you off in! Ha Ha Ha!\" *Cough, cough, hack*"); } },
"_js_name": "_obj539",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Sick Pigeon Jon"] = _obj539;
allObjects.push(_obj539);
objectsNameMap["Sick Pigeon Jon"] = _obj539;
_obj540 = {
"elementtype": "object",
"name": "Biscuit crumbs",
"parent": _obj535,
"type": "object",
"scenery": true,
"look": "A few tiny crumbs of biscuit",
"takemsg": "You stoop down to pick it up but the pigeon exclaims, \"These are my biscuit crumbs, fuck off, *hack hack, cough*\". The murderous glint in the pigeon's eye persuades you to leave the crumbs on the ground.",
"_js_name": "_obj540",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Biscuit crumbs"] = _obj540;
allObjects.push(_obj540);
objectsNameMap["Biscuit crumbs"] = _obj540;
_obj541 = {
"elementtype": "object",
"name": "Fountain",
"parent": _obj535,
"type": "object",
"look": "The tall fountain consists of a tower of stacked marble skulls, decending in size to the top. Water pours from the eye sockets of one skull into a hole in the cranium of the one below. <br/><br/>The city planners really took the King's nickname to heart, although a sense of the morbid has always characterised this country well before his reign. ",
"_js_name": "_obj541",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Fountain"] = _obj541;
allObjects.push(_obj541);
objectsNameMap["Fountain"] = _obj541;
_obj542 = {
"elementtype": "object",
"name": "Well Pigeon Jon",
"parent": _obj535,
"type": "object",
"visible": false,
"scenery": false,
"alias": "Pigeon Jon",
"look": "A grey city pigeon with a grumpy demeanour, and splattered with pieces of cheese and tomato sauce ",
"ask": {"bony king": function() { OutputText ("<br/>\"He's banged up in the prison, he refused to invade the Kingdom of Somewhere, made the General furious, that hawk hasn't had a decent war in decades and finally snapped.\" "); }, "biscuit crumbs": function() { OutputText ("\"They're my biscuit crumbs, fuck you.\""); }, "General D'sarray": function() { OutputText ("<br/>\"That Warmongering fucknugget! Tried to convince the King that Somewhere are developing Weapons of Mass Destruction, the King was having none of it without evidence\" "); }, "wendy miller": function() { OutputText ("<br/>\"A kindly lass, she sometime feeds me biscuits, but boy is she a fiend for the cider!\""); }, "bat batbat": function() { OutputText ("<br/>\"Oh you've met that nutter then? Fruitbat? Fruitcake more like! Ha ha ha!\" *cough, hack, cough*"); } },
"_js_name": "_obj542",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Well Pigeon Jon"] = _obj542;
allObjects.push(_obj542);
objectsNameMap["Well Pigeon Jon"] = _obj542;
_obj543 = {
"elementtype": "object",
"name": "General",
"parent": _obj535,
"type": "object",
"alias": "General D'sarray",
"visible": false,
"look": "An ugly bloated porcine looking army general. His drab olive uniform is festooned with medals and gold braiding, he has a swagger stick under one arm and is wearing black jackboots, and a black hat with a red front and more gold braiding.",
"speak": "Move along citizen, or I'll have you thrown in irons",
"cut": function() { if (Got(_obj360)) {
if (GetBoolean(_obj561, "mouse_dead")) {
OutputText ("In your grief and anger you grab hold of your axe and charge recklessly at the General with a furious Dylan by your side, yelling \"Kiss my shiny metal axe you bastard!\" but you are quickly overpowered by the guards and knocked unconscious.");
MoveObject (_obj573, _obj564);
OutputText ("<br/>You slowly come round and realise you are in a dark and dank prison cell, it stinks in here. <br/><br/>Dylan is pawing at your chest, you sit up, with your head still spinning you hear a voice you've not heard in years, \"Hello my child\" says the Bony King. \"Hello Dad\", you reply.<br/>");
ChangePOV (_obj573);
SetObjectFlagOn (_obj564, "visited");
MakeObjectInvisible (_obj358);
}
else {
OutputText ("You consider attacking the General directly, but calmly decide it would be a foolish move, even if you could take him on, he is surrounded by his burly looking men.");
}
}
else {
OutputText ("You need a tool for that, now where did you leave your axe?");
} },
"attack": function() { if (Got(_obj360)) {
if (GetBoolean(_obj561, "mouse_dead")) {
OutputText ("In your grief and anger you grab hold of your axe and charge recklessly at the General with a furious Dylan by your side, yelling \"Kiss my shiny metal axe you bastard!\" but you are quickly overpowered by the guards and knocked unconscious.");
MoveObject (_obj573, _obj564);
OutputText ("You slowly come round and realise you are in a dark and dank prison cell, it stinks in here. <br/><br/>Dylan is pawing at your chest, you sit up, with your head still spinning you hear a voice you've not heard in years, \"Hello my child\" says the Bony King. \"Hello Dad\", you reply.<br/>");
ChangePOV (_obj573);
SetObjectFlagOn (_obj564, "visited");
MakeObjectInvisible (_obj358);
}
else {
OutputText ("You consider attacking the General directly, but calmly decide it would be a foolish move, even if you could take him on, he is surrounded by his burly looking men.");
}
}
else {
OutputText ("You need a tool for that, now where did you leave your axe?");
} },
"kill": function() { if (Got(_obj360)) {
if (GetBoolean(_obj561, "mouse_dead")) {
OutputText ("In your grief and anger you grab hold of your axe and charge recklessly at the General with a furious Dylan by your side, yelling \"Kiss my shiny metal axe you bastard!\" but you are quickly overpowered by the guards and knocked unconscious.");
MoveObject (_obj573, _obj564);
OutputText ("<br/>You slowly come round and realise you are in a dark and dank prison cell, it stinks in here. <br/><br/>Dylan is pawing at your chest, you sit up, with your head still spinning you hear a voice you've not heard in years, \"Hello my child\" says the Bony King. \"Hello Dad\", you reply.<br/>");
ChangePOV (_obj573);
SetObjectFlagOn (_obj564, "visited");
MakeObjectInvisible (_obj358);
}
else {
OutputText ("You consider attacking the General directly, but calmly decide it would be a foolish move, even if you could take him on, he is surrounded by his burly looking men.");
}
}
else {
OutputText ("You need a tool for that, now where did you leave your axe?");
} },
"_js_name": "_obj543",
"_types": ["male", "defaultobject"],
"displayverbs": ["Look at", "Speak to"],
"gender": "he",
"article": "him",
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["General"] = _obj543;
allObjects.push(_obj543);
objectsNameMap["General"] = _obj543;
_obj544 = {
"elementtype": "object",
"name": "Pizzaria",
"type": "object",
"alias": "Beppe's Pizzaria",
"description": "There is a heavenly smell of dough, cheese and woodsmoke in here. Behind the counter you can see the owner Beppe removing pizzas from the oven with a long peal.",
"_js_name": "_obj544",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Pizzaria"] = _obj544;
allObjects.push(_obj544);
objectsNameMap["Pizzaria"] = _obj544;
_obj545 = {
"elementtype": "object",
"name": "k91",
"parent": _obj544,
"type": "exit",
"alias": "east",
"to": _obj535,
"_js_name": "_obj545",
"_types": ["eastdirection", "defaultexit"],
"alt": ["e"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k91"] = _obj545;
allExits.push(_obj545);
objectsNameMap["k91"] = _obj545;
_obj546 = {
"elementtype": "object",
"name": "Beppe",
"parent": _obj544,
"type": "object",
"look": "A dark and swarthy type with a roman nose and a friendly grin. He's wearing chef whites and a white cap.",
"_js_name": "_obj546",
"_types": ["namedmale", "defaultobject"],
"usedefaultprefix": false,
"displayverbs": ["Look at", "Speak to"],
"gender": "he",
"article": "him",
"visible": true,
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Beppe"] = _obj546;
allObjects.push(_obj546);
objectsNameMap["Beppe"] = _obj546;
_obj547 = {
"elementtype": "object",
"name": "Counter",
"parent": _obj544,
"type": "object",
"look": "A wooden counter with a hammered zinc top, there is a sign reading, <br/><b><i><br/><center>'Beppe's stupendo pizza<br/><br/>Piccolo - 1 Zilch<br/><br/>Medio - 2 Zilch<br/><br/>Gigantesco! - 3 Zilch'</i></b></center><br/>",
"_js_name": "_obj547",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Counter"] = _obj547;
allObjects.push(_obj547);
objectsNameMap["Counter"] = _obj547;
_obj548 = {
"elementtype": "object",
"name": "Prison",
"type": "object",
"alias": "Prison Cell 37927b",
"description": "<br/>A dark and dank prison cell, with filthy straw on the hard stone floor, the walls of the cell is in the form of an iron cage.",
"enter": function() { SetTurnTimeout (5, function (result) { OutputText ("You hear a rattle of keys and a guard appears at the door to the cell, behind him you can see two armed soldiers \"Time to meet your maker, traitor scum\"<br/><br/>You are lead out of the cell to the castle courtyard. Dylan brushes against your leg for reassurance as you walk.");
MoveObject (_obj573, _obj563);
MoveObject (_obj565, _obj563); }); },
"_js_name": "_obj548",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Prison"] = _obj548;
allObjects.push(_obj548);
objectsNameMap["Prison"] = _obj548;
_obj549 = {
"elementtype": "object",
"name": "pile of stones",
"parent": _obj548,
"type": "object",
"alias": "pile of stones",
"look": "The stones you removed to make the hole, what a waste of time that was.",
"takemsg": "you don't need them",
"_js_name": "_obj549",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["pile of stones"] = _obj549;
allObjects.push(_obj549);
objectsNameMap["pile of stones"] = _obj549;
_obj550 = {
"elementtype": "object",
"name": "lower straw",
"parent": _obj548,
"type": "object",
"alias": "filthy straw",
"scenery": true,
"move": "moving the straw reveals an impressively well built and impenetrable stone floor",
"look": "Blackened filthy straw, it stinks and is sticky to the touch",
"take": true,
"takemsg": "Moving aside the straw reveals an immaculate and impenetrable stone floor",
"_js_name": "_obj550",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["lower straw"] = _obj550;
allObjects.push(_obj550);
objectsNameMap["lower straw"] = _obj550;
_obj551 = {
"elementtype": "object",
"name": "floor1",
"parent": _obj548,
"type": "object",
"alias": "floor",
"scenery": true,
"look": "You examine the floor, moving aside the straw reveals an immaculate and impenetrable stone floor",
"_js_name": "_obj551",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["floor1"] = _obj551;
allObjects.push(_obj551);
objectsNameMap["floor1"] = _obj551;
_obj552 = {
"elementtype": "object",
"name": "bars",
"parent": _obj548,
"type": "object",
"look": "Thick iron bars, it would take a month of Sundays to file your way though one of them, even if you had the tools",
"scenery": true,
"_js_name": "_obj552",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["bars"] = _obj552;
allObjects.push(_obj552);
objectsNameMap["bars"] = _obj552;
_obj553 = {
"elementtype": "object",
"name": "Huge Pizza",
"type": "object",
"take": true,
"feature_container": true,
"open": false,
"openmsg": "You decide to leave it shut to keep the pizza hot.",
"feature_usegive": true,
"look": "A huge cardboard pizza box with a picture of Venice on the front, steam is escaping from the lovely pizza inside, it smells heavenly.",
"feature_edible": true,
"eat": "You'd love to eat it, but perhaps someone else needs it more",
"displayverbs": ["Look at", "Take", "Open", "Close"],
"inventoryverbs": ["Look at", "Use", "Drop", "Open", "Close"],
"giveto": {"Sick Pigeon Jon": function() { SetObjectFlagOn (_obj539, "fed");
OutputText ("<br/>\"Fuck me, now you're talking\" says the pigeon...*hack* *splutter*, \"I haven't eaten properly in weeks\"<br/><br/>The pigeon dives into the pizza, there is a blur of wings, feathers, feet and beak, small pieces of cheese and dough fly into the air. After a few minutes the pizza is gone and a fatter looking pigeon is now standing there.");
RemoveObject (_obj553); }, "Well Pigeon Jon": function() { SetObjectFlagOn (_obj542, "fed");
OutputText ("<br/>\"Fuck me, now you're talking\" says the pigeon... \"I haven't eaten properly in weeks\"<br/><br/>The pigeon dives into the pizza, there is a blur of wings, feathers, feet and beak, small pieces of cheese and dough fly into the air. After a few minutes the pizza is gone and a fatter looking pigeon is now standing there.");
RemoveObject (_obj553); } },
"_js_name": "_obj553",
"_types": ["container_closed", "defaultobject"],
"close": true,
"container": true,
"visible": true,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_switchable": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Huge Pizza"] = _obj553;
allObjects.push(_obj553);
objectsNameMap["Huge Pizza"] = _obj553;
_obj554 = {
"elementtype": "object",
"name": "Withered Heath",
"type": "object",
"usedefaultprefix": false,
"descprefix": "You are in the",
"description": "A god-forsaken stretch of land on the side of the cavern hill. There is some horehound growing here",
"_js_name": "_obj554",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Withered Heath"] = _obj554;
allObjects.push(_obj554);
objectsNameMap["Withered Heath"] = _obj554;
_obj555 = {
"elementtype": "object",
"name": "k92",
"parent": _obj554,
"type": "exit",
"alias": "west",
"to": _obj454,
"_js_name": "_obj555",
"_types": ["westdirection", "defaultexit"],
"alt": ["w"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k92"] = _obj555;
allExits.push(_obj555);
objectsNameMap["k92"] = _obj555;
_obj556 = {
"elementtype": "object",
"name": "k93",
"parent": _obj554,
"type": "exit",
"alias": "south",
"to": _obj495,
"_js_name": "_obj556",
"_types": ["southdirection", "defaultexit"],
"alt": ["s"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["k93"] = _obj556;
allExits.push(_obj556);
objectsNameMap["k93"] = _obj556;
_obj557 = {
"elementtype": "object",
"name": "Horehound sick",
"parent": _obj554,
"type": "object",
"alias": "Clump of Withered Horehound",
"look": "A clump of withered horehound, a herb of the mint family, you've often used it yourself to ease a cough, but this clump is no good, the leaves are all shrivelled up.",
"takemsg": "There is no point in taking any of it, it's sick and withered",
"_js_name": "_obj557",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Horehound sick"] = _obj557;
allObjects.push(_obj557);
objectsNameMap["Horehound sick"] = _obj557;
_obj558 = {
"elementtype": "object",
"name": "Horehound Well",
"parent": _obj554,
"type": "object",
"visible": false,
"look": "A healthy specimen of horehound with plump leaves and white flowers, a herb of the mint family, you've often used it yourself to ease a cough.",
"alias": "Horehound",
"takemsg": "",
"feature_usegive": true,
"usedefaultprefix": false,
"prefix": "some",
"take": function() { if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("18", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "18");
OutputText ("You pick some of the horehound");}
else { OutputText ("You take it"); }
AddToInventory (_obj558); },
"giveto": {"Sick Pigeon Jon": function() { OutputText ("\"What this herbal shite when it's at home?\" Says Jon, \"Only joking, horehound weed aint' it. The Pigeon pecks a small corner of leaf,  \"well it tastes like crap but I'll try anything to shift this damn cough\"<br/><br/>The pigeon pecks and chews at the leaves for a few minutes, and his breathing seems to ease, \"Thanks\" he says, \"Don't take my swearing personally, you're a decent fucker\"");
MakeObjectInvisible (_obj539);
MakeObjectVisible (_obj542);
RemoveObject (_obj558); } },
"_js_name": "_obj558",
"_types": ["plural", "defaultobject"],
"gender": "they",
"article": "them",
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Horehound Well"] = _obj558;
allObjects.push(_obj558);
objectsNameMap["Horehound Well"] = _obj558;
_obj559 = {
"elementtype": "object",
"name": "k94",
"parent": _obj554,
"type": "command",
"anonymous": true,
"pattern": "^put guano on horehound$|^pour guano on horehound$|^pour guano on ground$|^put guano on ground$|^empty mug on horehound$|^empty mug on ground$",
"script": function(parameters) { if (Got(_obj489)) {
OutputText ("You pour the Bat Guano on to the clump of horehound, just at that moment there is a convenient brief shower of rain. The leaves of the horehound plump up and unfurl before your eyes.");
RemoveObject (_obj489);
MakeObjectInvisible (_obj557);
MakeObjectVisible (_obj558);
}
else {
OutputText ("you're not carrying that, nice idea though");
} },
"_js_name": "_obj559",
"_types": ["defaultcommand"]
};
elementsNameMap["k94"] = _obj559;
allCommands.push(_obj559);
objectsNameMap["k94"] = _obj559;
_obj560 = {
"elementtype": "object",
"name": "message",
"type": "object",
"alias": "Message for Loyalist Forces",
"look": "A tiny scroll of paper, in minute writing it reads:<br/><br/> \"<b>Attack at dawn, resistance ready, J.J</b>\"",
"feature_usegive": true,
"take": true,
"giveto": {"Sick Pigeon Jon": function() { if (GetBoolean(_obj539, "fed")) {
OutputText ("<br/>\"You've got to be fucking joking if you think I'm carrying that, *cough* *cough* *cough* \"I appreciate the food but I can barely walk without getting out of breath, this damn cough.\"");
}
else {
OutputText ("<br/>\"You've got to be fucking joking if you think I'm carrying that, *cough* *cough* *cough* \"I haven't eaten properly in weeks and I can barely walk without getting out of breath, this damn cough.\"");
} }, "Well Pigeon Jon": function() { if (GetBoolean(_obj542, "fed")) {
OutputText ("<br/>You place the message in a small leather tube on the pigeon's leg<br/><br/><br/>\"Fuck's sake\" says the Pigeon. \"Another message to deliver, well if it means the city gets back to normal and the litter returns I guess I'm game\".<br/><br/>The pigeon takes a long run up, beats its wings furiously and manages to get it's pizza laden body airborne, as it disappears South you can hear its faint voice on the wind, \"Fuuuuck Yooouu!\"<br/><br/>Just at that moment General D'sarray enters the City Plaza.");
MakeObjectVisible (_obj543);
SetTurnTimeout (1, function (result) { OutputText ("<br/>You hear a small clanking noise and looking down you see that Gerald the Mouse has appeared by your side");
MoveObjectHere (_obj561); });
MakeObjectInvisible (_obj542);
MakeObjectInvisible (_obj560);
}
else if (GetBoolean(_obj539, "fed")) {
OutputText ("<br/>You place the message in a small leather tube on the pigeon's leg<br/><br/><br/>\"Fuck's sake\" says the Pigeon. \"Another message to deliver, well if it means the city gets back to normal and the litter returns I guess I'm game\".<br/><br/>The pigeon takes a long run up, beats its wings furiously and manages to get it's pizza laden body airborne, as it disappears South you can hear its faint voice on the wind, \"Fuuuuck Yooouu!\"<br/><br/>Just at that moment General D'sarray enters the City Plaza.");
MakeObjectVisible (_obj543);
SetTurnTimeout (1, function (result) { OutputText ("<br/>You hear a small clanking noise and looking down you see that Gerald the Mouse has appeared by your side");
MoveObjectHere (_obj561); });
MakeObjectInvisible (_obj542);
MakeObjectInvisible (_obj560);
}
else {
OutputText ("<br/>\"You've got to be joking if you think I'm carrying that, I haven't eaten properly in weeks, I'm weak as a fucking kitten\"");
} } },
"_js_name": "_obj560",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["message"] = _obj560;
allObjects.push(_obj560);
objectsNameMap["message"] = _obj560;
_obj561 = {
"elementtype": "object",
"name": "Knight Mouse",
"type": "object",
"look": "It's Gerald the Mouse, this time he is wearing a full suit of armour, including helmet with the visor down. He is holding a lance in one hand and a shield in the other.",
"_js_name": "_obj561",
"_types": ["male", "defaultobject"],
"displayverbs": ["Look at", "Speak to"],
"gender": "he",
"article": "him",
"visible": true,
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Knight Mouse"] = _obj561;
allObjects.push(_obj561);
objectsNameMap["Knight Mouse"] = _obj561;
_obj562 = {
"elementtype": "object",
"name": "k95",
"type": "command",
"anonymous": true,
"property": "attack",
"isverb": true,
"pattern": "^attack (?<object>.*)$",
"defaultexpression": "\"You can't attack \" + object.article + \".\"",
"_js_name": "_obj562",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k95"] = _obj562;
allCommands.push(_obj562);
objectsNameMap["k95"] = _obj562;
_obj563 = {
"elementtype": "object",
"name": "Courtyard",
"type": "object",
"description": function() { OutputText ("<br/>You are lead into the Castle courtyard, the pale blue light in the East heralds that the arrival of dawn is nigh. You, the King and Dylan are led to platform and each tied to stake. You can't believe they are going to kill Dylan as well. <br/><br/>\"I'm so sorry\" says the King, \"I know you never wanted any part in the politics of the Kingdom, I'm sorry I brought you back here, I didn't know who else to send the letter to\"<br/><br/>\"That's OK Dad\", you reply.<br/><br/>The first rays of dawn hit the courtyard and make you blink in the light.<br/><br/>Facing you is a firing squad and General D'sarray, \"Silence traitors!\" barks the General.<br/><br/>\"Men on my mark take aim!\", \"Aim\", the squad raise their guns, \"Ready\", you brace yourself, at that moment the sky darkens, confused the General looks up, and is hit smack in the temple by what looks like a metal boomerang, he collapses to the floor like a sack of spuds. More boomerangs rain down on the firing squad.<br/><br/>Looking up you see it's Batbat! and who's is that riding on his back but Gerald! He's wearing some weird rubber suit with a red letter R on the front.<br/><br/>There is a thundering of hooves and the Loyal forces storm into the courtyard, rounding up the remaining soldiers.<br/><br/>\"You saved the Kingdom my child!\" says the King, \"You're welcome to it\" you reply, \"I'm off home to the North\", \"Come on Dylan, let's go!\", \"Thank fuck for that\" replies Dylan.<br/><br/>**************************************************************************<br/>Congratulations, you have completed The Bony King of Nowhere, thanks for playing!<br/><br/>The END<br/><br/>Credits:<br/><br/>Written and coded by Luke A. Jones (luke.jones@gmail.com), using the Quest text adventure engine (www.textadeventures.co.uk).<br/><br/>Thank you to Alex Dimmer for creating the artwork and to Jennifer Thompson and Joe Dillon for alpa and beta testing, and for their excellent suggestions for improvements.<br/><br/>Thanks also to the excellent support from the Quest forum members, a more friendly bunch of geeks you won't meet.<br/><br/>I was inspired to start writing text adventures after playing and testing the wonderful games by Robin Johnson, you should check them out: http://versificator.net/<br/><br/>The title of the game comes from a song in an episode of Bagpuss by Oliver Postgate<br/><br/>The pigeon was inspired by the twitter account @pigeonjohn<br/><br/>Be excellent to each other.<br/><br/>Luke");
finish(); },
"_js_name": "_obj563",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Courtyard"] = _obj563;
allObjects.push(_obj563);
objectsNameMap["Courtyard"] = _obj563;
_obj564 = {
"elementtype": "object",
"name": "Top Prison",
"type": "object",
"alias": "Prison Cell 37927",
"usedefaultprefix": false,
"look": function() { if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("19", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "19");
OutputText ("<br/>You slowly come round and realise you are in a dark and dank prison cell, it stinks in here. <br/><br/>Dylan is pawing at your chest, you sit up, with your head still spinning you hear a voice you've not heard in years, \"Hello my child\" says the Bony King. \"Hello Dad\", you reply.");}
else { OutputText ("<br/>A dark and dank prison cell, with filthy straw on the hard stone floor, the cell is in the form of an iron cage."); } },
"description": function() { if (GetBoolean(_obj564, "visited")) {
OutputText ("<br/>A dark and dank prison cell, with filthy straw on the hard stone floor, the walls of the cell is in the form of an iron cage.\"<br/>");
} },
"beforeenter": function() { ChangePOV (_obj573);
MoveObject (_obj573, _obj564);
MakeObjectInvisible (_obj358); },
"_js_name": "_obj564",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Top Prison"] = _obj564;
allObjects.push(_obj564);
objectsNameMap["Top Prison"] = _obj564;
_obj565 = {
"elementtype": "object",
"name": "Bony King",
"parent": _obj564,
"type": "object",
"alias": "Bony King",
"usedefaultprefix": false,
"prefix": "The",
"look": "The 'bony' king of Nowhere, stick thin, (you'd find more meat on a butchers pencil), his emaciated face is even more drawn than the last time you saw him. His regal red robes hang off him, he's sat uncomfortably on the straw.",
"speak": "\"Hello my child, its a joy to see you, even under such grim circumstances\"",
"ask": {"letter": function() { OutputText ("<br/>'I told the pigeon to drop it outside your home, there was never anything written inside it, was too risky\""); }, "jack": function() { OutputText ("<br/>\"Ah Jack, as loyal as is face is long, he's been keeping in touch with the troops still loyal to the crown\""); }, "mom mother mum": function() { OutputText ("<br/>\"I miss her too, you must get your love of the countryside from here, she was never truly happy in the city either\""); }, "general": function() { OutputText ("<br/>\"He's always been a hawk for conflict, but never thought he'd betray me, barks all the time, but he finally bit.\" \"His men only fear and don't love him though, his power base is weak.\""); }, "pigeon jon": function() { OutputText ("<br/>\"Ha, the wisest of Nowhere's citizens, not much gets past him, loyal as long as he's well fed\""); } },
"_js_name": "_obj565",
"_types": ["male", "defaultobject"],
"displayverbs": ["Look at", "Speak to"],
"gender": "he",
"article": "him",
"visible": true,
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Bony King"] = _obj565;
allObjects.push(_obj565);
objectsNameMap["Bony King"] = _obj565;
_obj566 = {
"elementtype": "object",
"name": "tunnel",
"parent": _obj564,
"type": "exit",
"alias": "down",
"visible": false,
"locked": false,
"runscript": true,
"script": function() { OutputText ("With a great deal of struggling, writhing and wriggling you manage to squeeze through the hole, your Father and Dylan have far less trouble and follow behind you.<br/><br/>You land on some filthy straw");
MoveObject (_obj573, _obj548);
MoveObject (_obj565, _obj548); },
"to": _obj548,
"_js_name": "_obj566",
"_types": ["downdirection", "defaultexit"],
"alt": ["d"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"],
"scenery": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0
};
elementsNameMap["tunnel"] = _obj566;
allExits.push(_obj566);
objectsNameMap["tunnel"] = _obj566;
_obj567 = {
"elementtype": "object",
"name": "floor",
"parent": _obj564,
"type": "object",
"scenery": true,
"look": function() { if (!(ListContains(ScopeVisible(), _obj568))) {
OutputText ("You examine the floor in desperation, moving aside the filthy straw reveals the stoney floor, but wait, one of the stones is loose!");
MakeObjectVisible (_obj568);
}
else if (ListContains(ScopeVisible(), _obj568)) {
OutputText ("The floor is made of closely fitting stones cemented together, one of the stones is loose");
}
else {

} },
"_js_name": "_obj567",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["floor"] = _obj567;
allObjects.push(_obj567);
objectsNameMap["floor"] = _obj567;
_obj568 = {
"elementtype": "object",
"name": "loose stone",
"parent": _obj564,
"type": "object",
"visible": false,
"scenery": false,
"take": true,
"takemsg": "You grab hold of the loose stone, with a great deal of wiggling you manage to remove it, after a lot of hard work you manage to remove a few more until eventually there is a hole barely big enough to fit through",
"ontake": function() { MakeExitVisible (_obj566);
RemoveObject (_obj568); },
"move": function() { OutputText ("You grab hold of the loose stone, with a great deal of wiggling you manage to remove it, after a lot of hard work you manage to remove a few more, until there is a hole barely big enough to fit through");
MakeExitVisible (_obj566);
MakeObjectInvisible (_obj568); },
"push": function() { OutputText ("You grab hold of the loose stone, with a great deal of wiggling you manage to remove it, after a lot of hard work you manage to remove a few more, until there is a hole barely big enough to fit through");
MakeExitVisible (_obj566);
MakeObjectInvisible (_obj568); },
"pull": function() { OutputText ("You grab hold of the loose stone, with a great deal of wiggling you manage to remove it, after a lot of hard work you manage to remove a few more, until there is a hole barely big enough to fit through");
MakeExitVisible (_obj566);
MakeObjectInvisible (_obj568); },
"grab": function() { OutputText ("You grab hold of the loose stone, with a great deal of wiggling you manage to remove it, after a lot of hard work you manage to remove a few more, until there is a hole barely big enough to fit through");
MakeExitVisible (_obj566);
MakeObjectInvisible (_obj568); },
"_js_name": "_obj568",
"_types": ["defaultobject"],
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["loose stone"] = _obj568;
allObjects.push(_obj568);
objectsNameMap["loose stone"] = _obj568;
_obj569 = {
"elementtype": "object",
"name": "top straw",
"parent": _obj564,
"type": "object",
"alias": "filthy straw",
"scenery": true,
"look": "Blackened filthy straw, it stinks and is sticky to the touch",
"take": true,
"takemsg": "moving aside the filthy straw reveals the stoney floor, but wait, one of the stones is loose!",
"ontake": function() { MakeObjectVisible (_obj568);
MoveObjectHere (_obj569); },
"move": function() { OutputText ("Moving aside the filthy straw reveals the stoney floor, but wait one of the stones is loose!");
MakeObjectVisible (_obj568); },
"_js_name": "_obj569",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["top straw"] = _obj569;
allObjects.push(_obj569);
objectsNameMap["top straw"] = _obj569;
_obj570 = {
"elementtype": "object",
"name": "bars1",
"parent": _obj564,
"type": "object",
"alias": "bars",
"scenery": true,
"look": "Thick iron bars, it would take a month of Sundays to file your way though one of them, even if you had the tools",
"_js_name": "_obj570",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["bars1"] = _obj570;
allObjects.push(_obj570);
objectsNameMap["bars1"] = _obj570;
_obj571 = {
"elementtype": "object",
"name": "k96",
"type": "command",
"anonymous": true,
"property": "grab",
"isverb": true,
"pattern": "^grab (?<object>.*)$",
"defaultexpression": "\"You can't grab \" + object.article + \".\"",
"_js_name": "_obj571",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k96"] = _obj571;
allCommands.push(_obj571);
objectsNameMap["k96"] = _obj571;
_obj572 = {
"elementtype": "object",
"name": "Virgin Mary",
"type": "object",
"alias": "Pint Glass (containing Virgin Mary Cocktail)",
"feature_container": false,
"transparent": true,
"close": false,
"open": false,
"take": true,
"feature_usegive": true,
"alt": ["virgin mary", "pint", "cocktail", "drink"],
"displayverbs": ["Look at", "Take", "Open", "Close"],
"inventoryverbs": ["Look at", "Use", "Drop", "Open", "Close"],
"giveto": {"Hungover Cooper": function() { OutputText ("The Cooper steadies himself and with shaking hands his grips the glass and takes a sip of the drink, he grimaces and spits it out,<br/> <br/>\"That's not going to help me! I need something stronger than that!\""); } },
"_js_name": "_obj572",
"_types": ["container_open", "defaultobject"],
"isopen": true,
"container": true,
"visible": true,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Virgin Mary"] = _obj572;
allObjects.push(_obj572);
objectsNameMap["Virgin Mary"] = _obj572;
_obj573 = {
"elementtype": "object",
"name": "empty player",
"type": "object",
"feature_player": true,
"look": "You are thin and your skin is grimy, you are wearing ragged grey woollen clothing",
"_js_name": "_obj573",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["empty player"] = _obj573;
allObjects.push(_obj573);
objectsNameMap["empty player"] = _obj573;
_obj574 = {
"elementtype": "object",
"name": "cocktail",
"type": "turnscript",
"enabled": true,
"script": function() { if (Contains (_obj507,_obj523)) {
if (Contains (_obj507,_obj526)) {
if (Contains (_obj507,_obj521)) {
if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("20", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "20");
MakeObjectInvisible (_obj507);
AddToInventory (_obj572);}

}
}
} },
"_js_name": "_obj574",
"_types": []
};
elementsNameMap["cocktail"] = _obj574;
allTurnScripts.push(_obj574);
objectsNameMap["cocktail"] = _obj574;
_obj575 = {
"elementtype": "object",
"name": "final drink",
"type": "turnscript",
"enabled": true,
"script": function() { if (Contains (_obj572,_obj518)) {
if (!HasAttribute(GetObject("game"), "_firstTimeScriptsRun")) set (GetObject("game"), "_firstTimeScriptsRun", NewStringList());
if ($.inArray("21", GetObject("game")._firstTimeScriptsRun) == -1) {
listadd(GetObject("game")._firstTimeScriptsRun, "21");
RemoveObject (_obj572);
AddToInventory (_obj576);}

} },
"_js_name": "_obj575",
"_types": []
};
elementsNameMap["final drink"] = _obj575;
allTurnScripts.push(_obj575);
objectsNameMap["final drink"] = _obj575;
_obj576 = {
"elementtype": "object",
"name": "Bloody Mary Cocktail",
"type": "object",
"alias": "Pint glass (containing Bloody Mary Cocktail)",
"take": true,
"feature_container": false,
"open": false,
"close": false,
"transparent": true,
"feature_usegive": true,
"alt": ["bloody mary", "cocktail", "bloody mary cocktail", "pint", "drink"],
"displayverbs": ["Look at", "Take", "Open", "Close"],
"inventoryverbs": ["Look at", "Use", "Drop", "Open", "Close"],
"giveto": {"Hungover Cooper": function() { OutputText ("The Cooper steadies himself and with shaking hands his grips the glass and takes a sip of the drink, he grimaces then drains the lot, <br/>\"Ah, hair of the dog, always does the trick!\" \" Many thanks to you, here take this..\" He hands you a growler of Banks' Best Bitter.");
AddToInventory (_obj577);
MakeObjectInvisible (_obj510);
MakeObjectVisible (_obj513);
MakeObjectInvisible (_obj514);
MakeObjectVisible (_obj515);
MakeObjectInvisible (_obj576); } },
"_js_name": "_obj576",
"_types": ["container_open", "defaultobject"],
"isopen": true,
"container": true,
"visible": true,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Bloody Mary Cocktail"] = _obj576;
allObjects.push(_obj576);
objectsNameMap["Bloody Mary Cocktail"] = _obj576;
_obj577 = {
"elementtype": "object",
"name": "Growler",
"type": "object",
"take": true,
"feature_usegive": true,
"look": "A dark brown glass jug containing 3 and 1/3 pints of Bank's Beer, with a screw on metal cap.",
"giveto": {"City Guard": function() { UnlockExit (_obj532);
RemoveObject (_obj577);
OutputText ("<br/>The Guard snatches the jug from you, \"Trying to bribe an government official are we?\", \"Hanging offence that you know\". <br/><br/>The Guard looks at the label, \"Banks's, hmm, the good stuff, well I think I deserve a drink, this guard duty is damn tedious, not enough things to stab.\",<br/><br/>He reaches into his pocket, pulls out a key and unlocks the gate.<br/><br/> \"Go on, get going south before I change my mind\""); } },
"_js_name": "_obj577",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Growler"] = _obj577;
allObjects.push(_obj577);
objectsNameMap["Growler"] = _obj577;
_obj578 = {
"elementtype": "object",
"name": "giant rope",
"type": "object",
"look": "A long, thin and incredibly strong rope, made from Giant's hair.",
"_js_name": "_obj578",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["giant rope"] = _obj578;
allObjects.push(_obj578);
objectsNameMap["giant rope"] = _obj578;
_obj579 = {
"elementtype": "object",
"name": "k97",
"type": "command",
"anonymous": true,
"property": "make",
"isverb": true,
"pattern": "^make (?<object>.*)$",
"defaultexpression": "\"You can't make \" + object.article + \".\"",
"_js_name": "_obj579",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k97"] = _obj579;
allCommands.push(_obj579);
objectsNameMap["k97"] = _obj579;
_obj580 = {
"elementtype": "object",
"name": "k98",
"type": "command",
"anonymous": true,
"pattern": "^fuck off$",
"script": function(parameters) { OutputText ("Woah! You seem to be getting a bit frustrated, try taking a big breath and type 'hints' for some help"); },
"_js_name": "_obj580",
"_types": ["defaultcommand"]
};
elementsNameMap["k98"] = _obj580;
allCommands.push(_obj580);
objectsNameMap["k98"] = _obj580;
_obj581 = {
"elementtype": "object",
"name": "k99",
"type": "command",
"anonymous": true,
"pattern": "^fuck dog$|^fuck dylan$|^fuck miller$|^fuck wendy$|^fuck gnome$|^fuck gerald$|^fuck mouse$|^fuck general$|^fuck king$|^fuck bony king$|^fuck beppe$|^fuck cat$|^fuck bat$|^fuck jack$|^fuck landlord$|^fuck cooper$|^fuck pigeon$",
"script": function(parameters) { OutputText ("it's not that sort of game"); },
"_js_name": "_obj581",
"_types": ["defaultcommand"]
};
elementsNameMap["k99"] = _obj581;
allCommands.push(_obj581);
objectsNameMap["k99"] = _obj581;
_obj582 = {
"elementtype": "object",
"name": "k100",
"type": "command",
"anonymous": true,
"pattern": "^fuck$",
"script": function(parameters) { OutputText ("Woah there! You seem to be getting frustrated, have you tried taking deep breath and tying 'hints' for some help? Maybe a nice cup of tea would be a good idea."); },
"_js_name": "_obj582",
"_types": ["defaultcommand"]
};
elementsNameMap["k100"] = _obj582;
allCommands.push(_obj582);
objectsNameMap["k100"] = _obj582;
_obj583 = {
"elementtype": "object",
"name": "k101",
"type": "command",
"anonymous": true,
"property": "put",
"isverb": true,
"pattern": "^put (?<object>.*)$",
"defaultexpression": "\"You can't put \" + object.article + \".\"",
"_js_name": "_obj583",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k101"] = _obj583;
allCommands.push(_obj583);
objectsNameMap["k101"] = _obj583;
_obj584 = {
"elementtype": "object",
"name": "two darts",
"type": "object",
"drop": false,
"take": true,
"look": "Two darts, with a skull and crossbones design on the flights",
"usedefaultprefix": false,
"alt": [],
"_js_name": "_obj584",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"use": false,
"givesingle": false,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["two darts"] = _obj584;
allObjects.push(_obj584);
objectsNameMap["two darts"] = _obj584;
_obj585 = {
"elementtype": "object",
"name": "a dart",
"type": "object",
"look": "A dart with a skull and crossbones design on the flights",
"usedefaultprefix": false,
"alt": ["dart"],
"_js_name": "_obj585",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["a dart"] = _obj585;
allObjects.push(_obj585);
objectsNameMap["a dart"] = _obj585;
_obj586 = {
"elementtype": "object",
"name": "Three darts",
"type": "object",
"_js_name": "_obj586",
"_types": ["defaultobject"],
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} }
};
elementsNameMap["Three darts"] = _obj586;
allObjects.push(_obj586);
objectsNameMap["Three darts"] = _obj586;
_obj587 = {
"elementtype": "object",
"name": "k102",
"type": "command",
"anonymous": true,
"pattern": "^tie rope to logs$|^tie logs with rope$|^use rope to tie logs$|^use logs with rope$",
"script": function(parameters) { if (Got(_obj376)) {
if (Got(_obj317)) {
OutputText ("You lash the logs together with the rope, you now have what could very generously be described as a raft. Dylan eyes it suspiciously. ");
RemoveObject (_obj376);
RemoveObject (_obj317);
AddToInventory (_obj377);
}
else {
OutputText ("you're not carrying any logs");
}
}
else {
OutputText ("You're not carrying any rope");
} },
"_js_name": "_obj587",
"_types": ["defaultcommand"]
};
elementsNameMap["k102"] = _obj587;
allCommands.push(_obj587);
objectsNameMap["k102"] = _obj587;
_obj588 = {
"elementtype": "object",
"name": "k103",
"type": "command",
"anonymous": true,
"property": "repair",
"isverb": true,
"pattern": "^repair (?<object>.*)$",
"defaultexpression": "\"You can't repair \" + object.article + \".\"",
"_js_name": "_obj588",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k103"] = _obj588;
allCommands.push(_obj588);
objectsNameMap["k103"] = _obj588;
_obj589 = {
"elementtype": "object",
"name": "k104",
"type": "command",
"anonymous": true,
"property": "swim",
"isverb": true,
"pattern": "^swim (?<object>.*)$",
"defaultexpression": "\"You can't swim \" + object.article + \".\"",
"_js_name": "_obj589",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k104"] = _obj589;
allCommands.push(_obj589);
objectsNameMap["k104"] = _obj589;
_obj590 = {
"elementtype": "object",
"name": "k105",
"type": "command",
"anonymous": true,
"property": "dive",
"isverb": true,
"pattern": "^dive (?<object>.*)$",
"defaultexpression": "\"You can't dive \" + object.article + \".\"",
"_js_name": "_obj590",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k105"] = _obj590;
allCommands.push(_obj590);
objectsNameMap["k105"] = _obj590;
_obj591 = {
"elementtype": "object",
"name": "k106",
"type": "command",
"anonymous": true,
"property": "wade",
"isverb": true,
"pattern": "^wade (?<object>.*)$",
"defaultexpression": "\"You can't wade \" + object.article + \".\"",
"_js_name": "_obj591",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k106"] = _obj591;
allCommands.push(_obj591);
objectsNameMap["k106"] = _obj591;
_obj592 = {
"elementtype": "object",
"name": "k107",
"type": "command",
"anonymous": true,
"property": "wadeinto",
"isverb": true,
"pattern": "^wade into (?<object>.*)$",
"defaultexpression": "\"You can't wade into \" + object.article + \".\"",
"_js_name": "_obj592",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k107"] = _obj592;
allCommands.push(_obj592);
objectsNameMap["k107"] = _obj592;
_obj593 = {
"elementtype": "object",
"name": "k108",
"type": "command",
"anonymous": true,
"property": "swimacross",
"isverb": true,
"pattern": "^swim across (?<object>.*)$",
"defaultexpression": "\"You can't swim across \" + object.article + \".\"",
"_js_name": "_obj593",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k108"] = _obj593;
allCommands.push(_obj593);
objectsNameMap["k108"] = _obj593;
_obj594 = {
"elementtype": "object",
"name": "k109",
"type": "command",
"anonymous": true,
"property": "diveinto",
"isverb": true,
"pattern": "^dive into (?<object>.*)$",
"defaultexpression": "\"You can't dive into \" + object.article + \".\"",
"_js_name": "_obj594",
"_types": ["defaultverb", "defaultcommand"],
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function(parameters) { var object = parameters['object'];
if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} }
};
elementsNameMap["k109"] = _obj594;
allCommands.push(_obj594);
objectsNameMap["k109"] = _obj594;
_obj595 = {
"elementtype": "object",
"name": "k110",
"type": "command",
"anonymous": true,
"pattern": "^version$",
"script": function(parameters) { OutputText ("THE BONY KING OF NOWHERE<br/>Version " + _obj245.version + ""); },
"_js_name": "_obj595",
"_types": ["defaultcommand"]
};
elementsNameMap["k110"] = _obj595;
allCommands.push(_obj595);
objectsNameMap["k110"] = _obj595;
_obj596 = {
"elementtype": "type",
"name": "defaultverb",
"separator": "with; using",
"multiobjectmenu": "With which object?",
"multiobjectdefault": "That doesn't work.",
"multiobjectmenuempty": "There are no objects available to do that with.",
"script": function() { if (!(IsDefined("object2"))) {
var object2 = null;
}
switch (overloadedFunctions.TypeOf(object, this.property)) {
case "script":
if (object2 == null) {
runscriptattribute2 (object, this.property);
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "string":
if (object2 == null) {
OutputText (GetString(object, this.property));
}
else {
OutputText (this.multiobjectdefault);
}
break;
case "scriptdictionary":
if (object2 != null) {
HandleMultiVerb (object, this.property, object2, this.multiobjectdefault);
}
else {
var menu = NewStringDictionary();
var objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
if (ListCount(candidates) == 0) {
OutputText (this.multiobjectmenuempty);
}
else {
GenerateMenuChoices (menu, candidates);
set(_obj245.pov, "multiverb", this.property);
set(_obj245.pov, "multiverbobject", object);
set(_obj245.pov, "multiverbobjectdefault", this.multiobjectdefault);
ShowMenu (this.multiobjectmenu, menu, true, function (result) { if (result != null) {
HandleMultiVerb (_obj245.pov.multiverbobject, _obj245.pov.multiverb, GetObject(result), _obj245.pov.multiverbobjectdefault);
set(_obj245.pov, "multiverb", null);
set(_obj245.pov, "multiverbobject", null);
set(_obj245.pov, "multiverbobjectdefault", null);
} });
}
}
break;
case "null":
if (this.defaulttext != null) {
OutputText (this.defaulttext);
}
else if (this.defaulttemplate != null) {
OutputText (overloadedFunctions.DynamicTemplate(this.defaulttemplate, object));
}
else if (this.defaultexpression != null) {
var params = NewDictionary();
dictionaryadd (params, "object", object);
OutputText (overloadedFunctions.Eval(this.defaultexpression, params));
}
else {
error ("No verb response defined");
}
break;
default:
error ("No verb response defined");
} },
"_js_name": "_obj596",
"_types": []
};
elementsNameMap["defaultverb"] = _obj596;
allObjects.push(_obj596);
objectsNameMap["defaultverb"] = _obj596;
_obj597 = {
"elementtype": "type",
"name": "defaultgame",
"enablehyperlinks": true,
"echocommand": true,
"echohyperlinks": true,
"showdescriptiononenter": true,
"autodescription": true,
"defaultfont": "Georgia, serif",
"defaultfontsize": 12,
"defaultbackground": "White",
"defaultforeground": "Black",
"defaultlinkforeground": "Blue",
"backgroundimage": "",
"setbackgroundopacity": false,
"backgroundopacity": 0.5,
"menufont": "Arial",
"menufontsize": 9,
"menubackground": "White",
"menuforeground": "Black",
"menuhoverbackground": "LightGrey",
"menuhoverforeground": "Black",
"underlinehyperlinks": true,
"compassdirections": ["northwest", "north", "northeast", "west", "east", "southwest", "south", "southeast", "up", "down", "in", "out"],
"clearframe": true,
"timeelapsed": 0,
"appendobjectdescription": false,
"allobjects": ["all", "everything"],
"parserignoreprefixes": ["the", "a", "an"],
"displayroomdescriptiononstart": true,
"showpanes": true,
"showcommandbar": true,
"showlocation": true,
"setcustomwidth": false,
"customwidth": 950,
"setcustompadding": false,
"custompaddingtop": 30,
"custompaddingbottom": 0,
"custompaddingleft": 20,
"custompaddingright": 20,
"showborder": true,
"showscore": false,
"showhealth": false,
"showtitle": true,
"autodisplayverbs": true,
"autodescription_youarein": 1,
"autodescription_youcansee": 2,
"autodescription_youcango": 3,
"autodescription_description": 4,
"autodescription_youarein_useprefix": true,
"autodescription_youarein_newline": false,
"autodescription_youcansee_newline": false,
"autodescription_youcango_newline": false,
"autodescription_description_newline": false,
"changeroom_newline": true,
"command_newline": false,
"description": "",
"languageid": "en",
"gridmapdisabled": false,
"mapscale": 30,
"mapsize": 300,
"feature_lightdark": false,
"feature_pictureframe": false,
"feature_limitinventory": false,
"feature_asktell": false,
"deactivatecommandlinks": false,
"multiplecommands": false,
"publishfileextensions": "*.jpg;*.jpeg;*.png;*.gif;*.js;*.wav;*.mp3;*.htm;*.html;*.svg",
"changedpov": function(oldvalue) { InitPOV (oldvalue, _obj245.pov); },
"_js_name": "_obj597",
"_types": []
};
elementsNameMap["defaultgame"] = _obj597;
allObjects.push(_obj597);
objectsNameMap["defaultgame"] = _obj597;
_obj598 = {
"elementtype": "type",
"name": "theme_novella",
"setcustompadding": true,
"showborder": false,
"showpanes": false,
"showlocation": false,
"setcustomwidth": true,
"customwidth": 650,
"custompaddingtop": 60,
"_js_name": "_obj598",
"_types": []
};
elementsNameMap["theme_novella"] = _obj598;
allObjects.push(_obj598);
objectsNameMap["theme_novella"] = _obj598;
_obj599 = {
"elementtype": "type",
"name": "theme_retro",
"defaultbackground": "Black",
"defaultforeground": "White",
"defaultlinkforeground": "White",
"defaultfont": "'Lucida Console', Monaco, monospace",
"defaultwebfont": "Press Start 2P",
"menufontsize": 14,
"menufont": "'Lucida Console', Monaco, monospace",
"menubackground": "Black",
"menuforeground": "White",
"menuhoverbackground": "GreenYellow",
"_js_name": "_obj599",
"_types": []
};
elementsNameMap["theme_retro"] = _obj599;
allObjects.push(_obj599);
objectsNameMap["theme_retro"] = _obj599;
_obj600 = {
"elementtype": "type",
"name": "theme_typewriter",
"setcustompadding": true,
"showborder": false,
"showpanes": false,
"showlocation": false,
"setcustomwidth": true,
"customwidth": 650,
"custompaddingtop": 60,
"defaultfont": "'Courier New', Courier, monospace",
"defaultwebfont": "Special Elite",
"_js_name": "_obj600",
"_types": []
};
elementsNameMap["theme_typewriter"] = _obj600;
allObjects.push(_obj600);
objectsNameMap["theme_typewriter"] = _obj600;
_obj601 = {
"elementtype": "type",
"name": "theme_hotdogstand",
"defaultbackground": "Red",
"defaultforeground": "Yellow",
"defaultlinkforeground": "Yellow",
"defaultfont": "'Comic Sans MS', cursive, sans-serif",
"menufontsize": 14,
"menufont": "Impact, Charcoal, sans-serif",
"menubackground": "Red",
"menuforeground": "Yellow",
"menuhoverbackground": "Black",
"menuhoverforeground": "Yellow",
"_js_name": "_obj601",
"_types": []
};
elementsNameMap["theme_hotdogstand"] = _obj601;
allObjects.push(_obj601);
objectsNameMap["theme_hotdogstand"] = _obj601;
_obj602 = {
"elementtype": "type",
"name": "defaultobject",
"visible": true,
"displayverbs": ["Look at", "Take"],
"inventoryverbs": ["Look at", "Use", "Drop"],
"take": false,
"use": false,
"givesingle": false,
"drop": true,
"gender": "it",
"article": "it",
"isopen": false,
"open": false,
"close": false,
"container": false,
"descprefix": "You are in",
"objectslistprefix": "You can see",
"exitslistprefix": "You can go",
"contentsprefix": "containing",
"description": "",
"scenery": false,
"hidechildren": false,
"listchildren": false,
"usedefaultprefix": true,
"volume": 0,
"dark": false,
"lightstrength": "",
"darklevel": false,
"grid_width": 1,
"grid_length": 1,
"grid_fill": "White",
"grid_border": "Black",
"grid_borderwidth": 1,
"grid_bordersides": 15,
"grid_render": false,
"grid_label": "",
"grid_parent_offset_auto": true,
"grid_parent_offset_x": 0,
"grid_parent_offset_y": 0,
"pov_alias": "me",
"pov_alt": ["myself", "self"],
"pov_look": "Looking good.",
"pov_gender": "you",
"pov_article": "yourself",
"feature_usegive": false,
"feature_container": false,
"feature_switchable": false,
"feature_edible": false,
"feature_player": false,
"feature_lightdark": false,
"visited": false,
"changedparent": function(oldvalue) { if (_obj245.pov == this) {
if (IsDefined("oldvalue")) {
OnEnterRoom (oldvalue);
}
else {
OnEnterRoom (null);
}
if (_obj245.gridmap) {
MergePOVCoordinates();
}
} },
"changedisopen": function(oldvalue) { if (this.isopen && HasScript(this, "onopen")) {
runscriptattribute2 (this, "onopen");
}
if (!(this.isopen )&& HasScript(this, "onclose")) {
runscriptattribute2 (this, "onclose");
} },
"changedlocked": function(oldvalue) { if (this.locked && HasScript(this, "onlock")) {
runscriptattribute2 (this, "onlock");
}
if (!(this.locked )&& HasScript(this, "onunlock")) {
runscriptattribute2 (this, "onunlock");
} },
"changedswitchedon": function(oldvalue) { if (this.switchedon && HasScript(this, "onswitchon")) {
runscriptattribute2 (this, "onswitchon");
}
if (!(this.switchedon )&& HasScript(this, "onswitchoff")) {
runscriptattribute2 (this, "onswitchoff");
} },
"_js_name": "_obj602",
"_types": []
};
elementsNameMap["defaultobject"] = _obj602;
allObjects.push(_obj602);
objectsNameMap["defaultobject"] = _obj602;
_obj603 = {
"elementtype": "type",
"name": "defaultexit",
"displayverbs": ["Go to"],
"visible": true,
"scenery": false,
"locked": false,
"lockmessage": "That way is locked.",
"lookonly": false,
"runscript": false,
"lightstrength": "",
"grid_length": 1,
"grid_render": false,
"grid_offset_x": 0,
"grid_offset_y": 0,
"_js_name": "_obj603",
"_types": []
};
elementsNameMap["defaultexit"] = _obj603;
allObjects.push(_obj603);
objectsNameMap["defaultexit"] = _obj603;
_obj604 = {
"elementtype": "type",
"name": "direction",
"displayverbs": ["Go"],
"_js_name": "_obj604",
"_types": []
};
elementsNameMap["direction"] = _obj604;
allObjects.push(_obj604);
objectsNameMap["direction"] = _obj604;
_obj605 = {
"elementtype": "type",
"name": "compassdirection",
"prefix": "",
"suffix": "",
"_js_name": "_obj605",
"_types": ["direction"],
"displayverbs": ["Go"]
};
elementsNameMap["compassdirection"] = _obj605;
allObjects.push(_obj605);
objectsNameMap["compassdirection"] = _obj605;
_obj606 = {
"elementtype": "type",
"name": "updowndirection",
"prefix": "",
"suffix": "",
"_js_name": "_obj606",
"_types": ["direction"],
"displayverbs": ["Go"]
};
elementsNameMap["updowndirection"] = _obj606;
allObjects.push(_obj606);
objectsNameMap["updowndirection"] = _obj606;
_obj607 = {
"elementtype": "type",
"name": "inoutdirection",
"prefix": "",
"suffix": "",
"_js_name": "_obj607",
"_types": ["direction"],
"displayverbs": ["Go"]
};
elementsNameMap["inoutdirection"] = _obj607;
allObjects.push(_obj607);
objectsNameMap["inoutdirection"] = _obj607;
_obj608 = {
"elementtype": "type",
"name": "northwestdirection",
"alias": "northwest",
"alt": ["nw"],
"_js_name": "_obj608",
"_types": ["compassdirection"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"]
};
elementsNameMap["northwestdirection"] = _obj608;
allObjects.push(_obj608);
objectsNameMap["northwestdirection"] = _obj608;
_obj609 = {
"elementtype": "type",
"name": "northdirection",
"alias": "north",
"alt": ["n"],
"_js_name": "_obj609",
"_types": ["compassdirection"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"]
};
elementsNameMap["northdirection"] = _obj609;
allObjects.push(_obj609);
objectsNameMap["northdirection"] = _obj609;
_obj610 = {
"elementtype": "type",
"name": "northeastdirection",
"alias": "northeast",
"alt": ["ne"],
"_js_name": "_obj610",
"_types": ["compassdirection"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"]
};
elementsNameMap["northeastdirection"] = _obj610;
allObjects.push(_obj610);
objectsNameMap["northeastdirection"] = _obj610;
_obj611 = {
"elementtype": "type",
"name": "westdirection",
"alias": "west",
"alt": ["w"],
"_js_name": "_obj611",
"_types": ["compassdirection"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"]
};
elementsNameMap["westdirection"] = _obj611;
allObjects.push(_obj611);
objectsNameMap["westdirection"] = _obj611;
_obj612 = {
"elementtype": "type",
"name": "eastdirection",
"alias": "east",
"alt": ["e"],
"_js_name": "_obj612",
"_types": ["compassdirection"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"]
};
elementsNameMap["eastdirection"] = _obj612;
allObjects.push(_obj612);
objectsNameMap["eastdirection"] = _obj612;
_obj613 = {
"elementtype": "type",
"name": "southwestdirection",
"alias": "southwest",
"alt": ["sw"],
"_js_name": "_obj613",
"_types": ["compassdirection"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"]
};
elementsNameMap["southwestdirection"] = _obj613;
allObjects.push(_obj613);
objectsNameMap["southwestdirection"] = _obj613;
_obj614 = {
"elementtype": "type",
"name": "southdirection",
"alias": "south",
"alt": ["s"],
"_js_name": "_obj614",
"_types": ["compassdirection"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"]
};
elementsNameMap["southdirection"] = _obj614;
allObjects.push(_obj614);
objectsNameMap["southdirection"] = _obj614;
_obj615 = {
"elementtype": "type",
"name": "southeastdirection",
"alias": "southeast",
"alt": ["se"],
"_js_name": "_obj615",
"_types": ["compassdirection"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"]
};
elementsNameMap["southeastdirection"] = _obj615;
allObjects.push(_obj615);
objectsNameMap["southeastdirection"] = _obj615;
_obj616 = {
"elementtype": "type",
"name": "updirection",
"alias": "up",
"alt": ["u"],
"_js_name": "_obj616",
"_types": ["updowndirection"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"]
};
elementsNameMap["updirection"] = _obj616;
allObjects.push(_obj616);
objectsNameMap["updirection"] = _obj616;
_obj617 = {
"elementtype": "type",
"name": "downdirection",
"alias": "down",
"alt": ["d"],
"_js_name": "_obj617",
"_types": ["updowndirection"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"]
};
elementsNameMap["downdirection"] = _obj617;
allObjects.push(_obj617);
objectsNameMap["downdirection"] = _obj617;
_obj618 = {
"elementtype": "type",
"name": "indirection",
"alias": "in",
"alt": [""],
"_js_name": "_obj618",
"_types": ["inoutdirection"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"]
};
elementsNameMap["indirection"] = _obj618;
allObjects.push(_obj618);
objectsNameMap["indirection"] = _obj618;
_obj619 = {
"elementtype": "type",
"name": "outdirection",
"alias": "out",
"alt": ["o"],
"_js_name": "_obj619",
"_types": ["inoutdirection"],
"prefix": "",
"suffix": "",
"displayverbs": ["Go"]
};
elementsNameMap["outdirection"] = _obj619;
allObjects.push(_obj619);
objectsNameMap["outdirection"] = _obj619;
_obj620 = {
"elementtype": "type",
"name": "defaultcommand",
"pattern": "^$",
"_js_name": "_obj620",
"_types": []
};
elementsNameMap["defaultcommand"] = _obj620;
allObjects.push(_obj620);
objectsNameMap["defaultcommand"] = _obj620;
_obj621 = {
"elementtype": "type",
"name": "male",
"displayverbs": ["Look at", "Speak to"],
"gender": "he",
"article": "him",
"_js_name": "_obj621",
"_types": []
};
elementsNameMap["male"] = _obj621;
allObjects.push(_obj621);
objectsNameMap["male"] = _obj621;
_obj622 = {
"elementtype": "type",
"name": "namedmale",
"usedefaultprefix": false,
"_js_name": "_obj622",
"_types": ["male"],
"displayverbs": ["Look at", "Speak to"],
"gender": "he",
"article": "him"
};
elementsNameMap["namedmale"] = _obj622;
allObjects.push(_obj622);
objectsNameMap["namedmale"] = _obj622;
_obj623 = {
"elementtype": "type",
"name": "female",
"displayverbs": ["Look at", "Speak to"],
"gender": "she",
"article": "her",
"_js_name": "_obj623",
"_types": []
};
elementsNameMap["female"] = _obj623;
allObjects.push(_obj623);
objectsNameMap["female"] = _obj623;
_obj624 = {
"elementtype": "type",
"name": "namedfemale",
"usedefaultprefix": false,
"_js_name": "_obj624",
"_types": ["female"],
"displayverbs": ["Look at", "Speak to"],
"gender": "she",
"article": "her"
};
elementsNameMap["namedfemale"] = _obj624;
allObjects.push(_obj624);
objectsNameMap["namedfemale"] = _obj624;
_obj625 = {
"elementtype": "type",
"name": "plural",
"gender": "they",
"article": "them",
"_js_name": "_obj625",
"_types": []
};
elementsNameMap["plural"] = _obj625;
allObjects.push(_obj625);
objectsNameMap["plural"] = _obj625;
_obj626 = {
"elementtype": "type",
"name": "maleplural",
"displayverbs": ["Look at", "Speak to"],
"gender": "they",
"article": "them",
"_js_name": "_obj626",
"_types": []
};
elementsNameMap["maleplural"] = _obj626;
allObjects.push(_obj626);
objectsNameMap["maleplural"] = _obj626;
_obj627 = {
"elementtype": "type",
"name": "femaleplural",
"displayverbs": ["Look at", "Speak to"],
"gender": "they",
"article": "them",
"_js_name": "_obj627",
"_types": []
};
elementsNameMap["femaleplural"] = _obj627;
allObjects.push(_obj627);
objectsNameMap["femaleplural"] = _obj627;
_obj628 = {
"elementtype": "type",
"name": "openable",
"open": true,
"close": true,
"displayverbs": ["Open", "Close"],
"inventoryverbs": ["Open", "Close"],
"_js_name": "_obj628",
"_types": []
};
elementsNameMap["openable"] = _obj628;
allObjects.push(_obj628);
objectsNameMap["openable"] = _obj628;
_obj629 = {
"elementtype": "type",
"name": "container_base",
"container": true,
"_js_name": "_obj629",
"_types": []
};
elementsNameMap["container_base"] = _obj629;
allObjects.push(_obj629);
objectsNameMap["container_base"] = _obj629;
_obj630 = {
"elementtype": "type",
"name": "container_closed",
"open": true,
"close": true,
"displayverbs": ["Open", "Close"],
"inventoryverbs": ["Open", "Close"],
"_js_name": "_obj630",
"_types": ["container_base"],
"container": true
};
elementsNameMap["container_closed"] = _obj630;
allObjects.push(_obj630);
objectsNameMap["container_closed"] = _obj630;
_obj631 = {
"elementtype": "type",
"name": "container_open",
"isopen": true,
"open": true,
"close": true,
"displayverbs": ["Open", "Close"],
"inventoryverbs": ["Open", "Close"],
"_js_name": "_obj631",
"_types": ["container_base"],
"container": true
};
elementsNameMap["container_open"] = _obj631;
allObjects.push(_obj631);
objectsNameMap["container_open"] = _obj631;
_obj632 = {
"elementtype": "type",
"name": "surface",
"isopen": true,
"transparent": true,
"contentsprefix": "on which there is",
"_js_name": "_obj632",
"_types": ["container_base"],
"container": true
};
elementsNameMap["surface"] = _obj632;
allObjects.push(_obj632);
objectsNameMap["surface"] = _obj632;
_obj633 = {
"elementtype": "type",
"name": "container",
"displayverbs": ["Open", "Close"],
"inventoryverbs": ["Open", "Close"],
"_js_name": "_obj633",
"_types": ["container_open"],
"isopen": true,
"open": true,
"close": true,
"container": true
};
elementsNameMap["container"] = _obj633;
allObjects.push(_obj633);
objectsNameMap["container"] = _obj633;
_obj634 = {
"elementtype": "type",
"name": "container_limited",
"maxobjects": 1,
"maxvolume": 100,
"addscript": function() { var activecontainer = this;
var correct = true;
while (DoesInherit(activecontainer, "container_base")) {
if (HasInt(activecontainer, "maxvolume")) {
if (GetVolume(object, true) + GetVolume(activecontainer, false) > activecontainer.maxvolume) {
var correct = false;
if (HasString(this, "containerfullmessage")) {
var message = this.containerfullmessage;
}
else {
var message = overloadedFunctions.DynamicTemplate("ContainerFull", this);
}
}
}
var activecontainer = activecontainer.parent;
}
var children = GetDirectChildren(this);
if (listcount(children) >= this.maxobjects) {
var correct = false;
if (HasString(this, "containerfullmessage")) {
var message = this.containerfullmessage;
}
else {
var message = overloadedFunctions.DynamicTemplate("MaxObjectsInContainer", this);
}
}
if (correct == false) {
OutputText (message);
}
else {
set(object, "parent", this);
OutputText (Template("Done"));
} },
"displayverbs": ["Open", "Close"],
"inventoryverbs": ["Open", "Close"],
"_js_name": "_obj634",
"_types": ["container"],
"isopen": true,
"open": true,
"close": true,
"container": true
};
elementsNameMap["container_limited"] = _obj634;
allObjects.push(_obj634);
objectsNameMap["container_limited"] = _obj634;
_obj636 = {
"elementtype": "type",
"name": "container_lockable",
"locked": true,
"nokeymessage": "You do not have the key.",
"unlockmessage": "Unlocked.",
"lockmessage": "Locked.",
"canlockopen": false,
"autoopen": true,
"autounlock": true,
"openscript": function() { if (this.locked) {
if (this.autounlock && AllKeysAvailable(this)) {
runscriptattribute2 (this, "unlock");
if (!(this.isopen)) {
OpenObject (this);
}
}
else {
OutputText (overloadedFunctions.DynamicTemplate("LockedObject", this));
}
}
else {
OpenObject (this);
} },
"closescript": function() { if (this.locked) {
OutputText (overloadedFunctions.DynamicTemplate("LockedObject", this));
}
else {
CloseObject (this);
} },
"lock": function() { if (this.locked) {
OutputText (overloadedFunctions.DynamicTemplate("AlreadyLocked", this));
}
else if (this.isopen && !(this.canlockopen)) {
OutputText (overloadedFunctions.DynamicTemplate("CannotLockOpen", this));
}
else {
if (AllKeysAvailable(this)) {
OutputText (this.lockmessage);
set(this, "locked", true);
}
else {
OutputText (this.nokeymessage);
}
} },
"unlock": function() { if (!(this.locked)) {
OutputText (overloadedFunctions.DynamicTemplate("AlreadyUnlocked", this));
}
else {
if (AllKeysAvailable(this)) {
OutputText (this.unlockmessage);
set(this, "locked", false);
if (this.autoopen && !(this.isopen)) {
TryOpenClose (true, this);
}
}
else {
OutputText (this.nokeymessage);
}
} },
"_js_name": "_obj636",
"_types": []
};
elementsNameMap["container_lockable"] = _obj636;
allObjects.push(_obj636);
objectsNameMap["container_lockable"] = _obj636;
_obj637 = {
"elementtype": "type",
"name": "defaultplayer",
"_js_name": "_obj637",
"_types": []
};
elementsNameMap["defaultplayer"] = _obj637;
allObjects.push(_obj637);
objectsNameMap["defaultplayer"] = _obj637;
_obj638 = {
"elementtype": "type",
"name": "switchable",
"switchedon": false,
"turnon": function() { if (ListContains(ScopeReachable(), this)) {
if (this.switchedon) {
OutputText (overloadedFunctions.DynamicTemplate("AlreadySwitchedOn", this));
}
else {
if (HasString(this, "switchonmsg")) {
OutputText (this.switchonmsg);
}
else {
OutputText (overloadedFunctions.DynamicTemplate("SwitchedOn", this));
}
set(this, "switchedon", true);
}
}
else {
OutputText (overloadedFunctions.DynamicTemplate("DefaultTurnOn", this));
} },
"turnoff": function() { if (ListContains(ScopeReachable(), this)) {
if (!(this.switchedon)) {
OutputText (overloadedFunctions.DynamicTemplate("AlreadySwitchedOff", this));
}
else {
if (HasString(this, "switchoffmsg")) {
OutputText (this.switchoffmsg);
}
else {
OutputText (overloadedFunctions.DynamicTemplate("SwitchedOff", this));
}
set(this, "switchedon", false);
}
}
else {
OutputText (overloadedFunctions.DynamicTemplate("DefaultTurnOff", this));
} },
"displayverbs": ["Switch on", "Switch off"],
"inventoryverbs": ["Switch on", "Switch off"],
"_js_name": "_obj638",
"_types": []
};
elementsNameMap["switchable"] = _obj638;
allObjects.push(_obj638);
objectsNameMap["switchable"] = _obj638;
_obj639 = {
"elementtype": "type",
"name": "edible",
"eathealth": 0,
"eat": function() { if (HasString(this, "eatmsg")) {
OutputText (this.eatmsg);
}
else {
OutputText (overloadedFunctions.DynamicTemplate("Eaten", this));
}
if (HasInt(_obj245.pov, "health")) {
set(_obj245.pov, "health", _obj245.pov.health + this.eathealth);
}
destroy (this.name); },
"displayverbs": ["Eat"],
"inventoryverbs": ["Eat"],
"_js_name": "_obj639",
"_types": []
};
elementsNameMap["edible"] = _obj639;
allObjects.push(_obj639);
objectsNameMap["edible"] = _obj639;
_obj640 = {
"elementtype": "type",
"name": "gridborder_path_ew",
"grid_bordersides": 10,
"_js_name": "_obj640",
"_types": []
};
elementsNameMap["gridborder_path_ew"] = _obj640;
allObjects.push(_obj640);
objectsNameMap["gridborder_path_ew"] = _obj640;
_obj641 = {
"elementtype": "type",
"name": "gridborder_path_e",
"grid_bordersides": 11,
"_js_name": "_obj641",
"_types": []
};
elementsNameMap["gridborder_path_e"] = _obj641;
allObjects.push(_obj641);
objectsNameMap["gridborder_path_e"] = _obj641;
_obj642 = {
"elementtype": "type",
"name": "gridborder_path_w",
"grid_bordersides": 14,
"_js_name": "_obj642",
"_types": []
};
elementsNameMap["gridborder_path_w"] = _obj642;
allObjects.push(_obj642);
objectsNameMap["gridborder_path_w"] = _obj642;
_obj643 = {
"elementtype": "type",
"name": "gridborder_path_ns",
"grid_bordersides": 5,
"_js_name": "_obj643",
"_types": []
};
elementsNameMap["gridborder_path_ns"] = _obj643;
allObjects.push(_obj643);
objectsNameMap["gridborder_path_ns"] = _obj643;
_obj644 = {
"elementtype": "type",
"name": "gridborder_path_n",
"grid_bordersides": 7,
"_js_name": "_obj644",
"_types": []
};
elementsNameMap["gridborder_path_n"] = _obj644;
allObjects.push(_obj644);
objectsNameMap["gridborder_path_n"] = _obj644;
_obj645 = {
"elementtype": "type",
"name": "gridborder_path_s",
"grid_bordersides": 13,
"_js_name": "_obj645",
"_types": []
};
elementsNameMap["gridborder_path_s"] = _obj645;
allObjects.push(_obj645);
objectsNameMap["gridborder_path_s"] = _obj645;
function GetDefaultPrefix(obj)
{
if (Instr("aeiou", LCase(Left(GetDisplayAlias(obj), 1))) > 0) {
return ("an");
}
else {
return ("a");
}
}
function WriteVerb(obj, verb)
{
return (CapFirst(obj.gender) + " " + Conjugate(obj, verb));
}
function Conjugate(obj, verb)
{
var gender = obj.gender;
if (gender == "he" || gender == "she") {
var gender = "it";
}
switch (verb) {
case "be":
switch (gender) {
case "i":
return ("am");
break;
case "you":
return ("are");
break;
case "it":
return ("is");
break;
case "we":
return ("are");
break;
case "they":
return ("are");
break;
default:
return ("is");
}
break;
case "do":
switch (gender) {
case "i":
return ("do");
break;
case "you":
return ("do");
break;
case "it":
return ("does");
break;
case "we":
return ("do");
break;
case "they":
return ("do");
break;
default:
return ("do");
}
break;
default:
if (gender == "it") {
return (verb + "s");
}
else {
return (verb);
}
}
}
function ListObjectContents(object)
{
if (GetBoolean(object, "isopen") && GetBoolean(object, "listchildren")) {
if (GetBoolean(object, "hidechildren")) {
set(object, "hidechildren", false);
}
if (HasString(object, "listchildrenprefix")) {
var listprefix = object.listchildrenprefix;
}
else {
var listprefix = overloadedFunctions.DynamicTemplate("ObjectContains", object);
}
var list = FormatObjectList(listprefix, object, Template("And"), ".");
if (list != "") {
OutputText (list);
}
}
}
function DoTake(object, ismultiple)
{
var prefix = "";
if (ismultiple) {
var prefix = GetDisplayAlias(object) + ": ";
}
if (object.parent == _obj245.pov) {
OutputText (prefix + overloadedFunctions.DynamicTemplate("AlreadyTaken", object));
}
else if (!(ListContains(ScopeReachable(), object))) {
OutputText (prefix + overloadedFunctions.DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)));
}
else {
var volume = 0;
var variable_continue = true;
var list_obj = GetAllChildObjects(_obj245.pov);
var list_obj_isarray = (Object.prototype.toString.call(list_obj) === '[object Array]');
for (var iterator_obj in list_obj) {
var obj = list_obj_isarray ? list_obj[iterator_obj] : iterator_obj;
if (list_obj_isarray || iterator_obj!="__dummyKey") { if (HasInt(obj, "volume")) {
var volume = volume + obj.volume;
} }
}
if (!(Contains(_obj245.pov, object))) {
var volume = volume + GetVolume(object,true);
}
if (HasInt(_obj245.pov, "maxvolume")) {
if (volume > _obj245.pov.maxvolume) {
var variable_continue = false;
if (HasString(_obj245.pov, "containerfullmessage")) {
var message = prefix + _obj245.pov.containerfullmessage;
}
else {
var message = prefix + overloadedFunctions.DynamicTemplate("FullInventory", object);
}
}
}
var children = GetDirectChildren(_obj245.pov);
if (HasInt(_obj245.pov, "maxobjects")) {
if (_obj245.pov.maxobjects > 0) {
if (ListCount(children) >= _obj245.pov.maxobjects) {
var variable_continue = false;
if (HasString(_obj245.pov, "containermaxobjects")) {
var message = prefix + _obj245.pov.containermaxobjects;
}
else {
var message = prefix + overloadedFunctions.DynamicTemplate("MaxObjectsInInventory", object);
}
}
}
}
if (variable_continue == false) {
OutputText (message);
}
else {
var found = true;
var takemsg = object.takemsg;
switch (overloadedFunctions.TypeOf(object, "take")) {
case "script":
if (ismultiple) {
OutputTextNoBr (prefix);
}
runscriptattribute2 (object, "take");
var takemsg = "";
break;
case "boolean":
if (object.take == true) {
set(object, "parent", _obj245.pov);
if (takemsg == null) {
var takemsg = overloadedFunctions.DynamicTemplate("TakeSuccessful", object);
}
}
else {
var found = false;
}
break;
case "string":
set(object, "parent", _obj245.pov);
var takemsg = object.take;
break;
default:
var found = false;
}
if (!(found )&& takemsg == null) {
var takemsg = overloadedFunctions.DynamicTemplate("TakeUnsuccessful", object);
}
if (LengthOf(takemsg) > 0) {
OutputText (prefix + takemsg);
}
if (HasScript(object, "ontake")) {
runscriptattribute2 (object, "ontake");
}
if (found && GetBoolean (object, "scenery") && object.parent == _obj245.pov) {
set(object, "scenery", false);
}
}
}
}
function DoDrop(object, ismultiple)
{
var prefix = "";
if (ismultiple) {
var prefix = GetDisplayAlias(object) + ": ";
}
if (!(ListContains(ScopeInventory(), object))) {
OutputText (prefix + overloadedFunctions.DynamicTemplate("NotCarrying", object));
}
else if (!(ListContains(ScopeReachable(), object))) {
OutputText (prefix + overloadedFunctions.DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)));
}
else {
var found = true;
var dropmsg = object.dropmsg;
switch (overloadedFunctions.TypeOf(object, "drop")) {
case "script":
if (ismultiple) {
OutputTextNoBr (prefix);
}
runscriptattribute2 (object, "drop");
var dropmsg = "";
break;
case "boolean":
if (object.drop == true) {
set(object, "parent", _obj245.pov.parent);
if (dropmsg == null) {
var dropmsg = overloadedFunctions.DynamicTemplate("DropSuccessful", object);
}
}
else {
var found = false;
}
break;
case "string":
set(object, "parent", _obj245.pov.parent);
var dropmsg = object.drop;
break;
default:
var found = false;
}
if (!(found )&& dropmsg == null) {
var dropmsg = overloadedFunctions.DynamicTemplate("DropUnsuccessful", object);
}
if (LengthOf(dropmsg) > 0) {
OutputText (prefix + dropmsg);
}
if (HasScript(object, "ondrop")) {
runscriptattribute2 (object, "ondrop");
}
}
}
function CreateUseMenuList(object)
{
var objectlist = NewObjectList();
var objectlist = ScopeReachableInventory();
var objectlist = ListCombine (objectlist, ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = NewObjectList();
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
return (candidates);
}
function TryOpenClose(doopen, object)
{
if (doopen) {
var action = "open";
var scriptaction = "openscript";
}
else {
var action = "close";
var scriptaction = "closescript";
}
if (!(ListContains(ScopeReachable(), object))) {
OutputText (overloadedFunctions.DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)));
}
else {
var found = false;
if (GetBoolean(object, action)) {
if (doopen) {
if (object.isopen) {
OutputText (overloadedFunctions.DynamicTemplate("AlreadyOpen", object));
}
else {
if (HasScript(object, scriptaction)) {
runscriptattribute2 (object, scriptaction);
}
else {
OpenObject (object);
}
}
}
else {
if (!(object.isopen)) {
OutputText (overloadedFunctions.DynamicTemplate("AlreadyClosed", object));
}
else {
if (HasScript(object, scriptaction)) {
runscriptattribute2 (object, scriptaction);
}
else {
CloseObject (object);
}
}
}
}
else {
if (doopen) {
OutputText (overloadedFunctions.DynamicTemplate("CantOpen", object));
}
else {
OutputText (overloadedFunctions.DynamicTemplate("CantClose", object));
}
}
}
}
function OpenObject(object)
{
if (HasString(object, "openmsg")) {
OutputText (object.openmsg);
}
else {
OutputText (overloadedFunctions.DynamicTemplate("OpenSuccessful", object));
}
set(object, "isopen", true);
ListObjectContents (object);
}
function CloseObject(object)
{
if (HasString(object, "closemsg")) {
OutputText (object.closemsg);
}
else {
OutputText (overloadedFunctions.DynamicTemplate("CloseSuccessful", object));
}
set(object, "isopen", false);
}
function CreateGiveMenuList(object)
{
var objectlist = NewObjectList();
var objectlist = ScopeReachableInventory();
var objectlist = ListCombine (objectlist, ScopeReachableNotHeld());
var excludelist = NewObjectList();
listadd (excludelist, _obj245.pov);
listadd (excludelist, object);
var candidates = NewObjectList();
var candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist);
return (candidates);
}
function HandleGiveTo(object1, object2)
{
var handled = false;
if (HasString(object2, "give")) {
OutputText (object2.give);
var handled = true;
}
else if (overloadedFunctions.TypeOf(object2, "give") == "scriptdictionary") {
if (DictionaryContains(object2.give, object1.name)) {
var parameters = NewObjectDictionary();
dictionaryadd (parameters, "this", object2);
dictionaryadd (parameters, "object", object1);
invoke (ScriptDictionaryItem(object2.give, object1.name), parameters);
var handled = true;
}
if (!(handled)) {
if (HasScript(object2, "giveanything")) {
var parameters = NewObjectDictionary();
dictionaryadd (parameters, "object", object1);
runscriptattribute3 (object2, "giveanything", parameters);
var handled = true;
}
}
}
if (!(handled)) {
if (HasString(object1, "giveto")) {
OutputText (object1.giveto);
var handled = true;
}
else if (overloadedFunctions.TypeOf(object1, "giveto") == "scriptdictionary") {
if (DictionaryContains(object1.giveto, object2.name)) {
var parameters = NewObjectDictionary();
dictionaryadd (parameters, "this", object1);
dictionaryadd (parameters, "object", object2);
invoke (ScriptDictionaryItem(object1.giveto, object2.name), parameters);
var handled = true;
}
else {
if (HasScript(object1, "givetoanything")) {
var parameters = NewObjectDictionary();
dictionaryadd (parameters, "object", object2);
runscriptattribute3 (object1, "givetoanything", parameters);
var handled = true;
}
}
}
}
if (!(handled)) {
OutputText (overloadedFunctions.DynamicTemplate("DefaultGive", object2, object1));
}
}
function HandleUseOn(object1, object2)
{
var handled = false;
if (HasString(object2, "useon")) {
OutputText (object2.useon);
var handled = true;
}
else if (overloadedFunctions.TypeOf(object2, "useon") == "scriptdictionary") {
if (DictionaryContains(object2.useon, object1.name)) {
var parameters = NewObjectDictionary();
dictionaryadd (parameters, "this", object2);
dictionaryadd (parameters, "object", object1);
invoke (ScriptDictionaryItem(object2.useon, object1.name), parameters);
var handled = true;
}
else {
if (HasScript(object2, "useanything")) {
var parameters = NewObjectDictionary();
dictionaryadd (parameters, "object", object1);
runscriptattribute3 (object2, "useanything", parameters);
var handled = true;
}
}
}
if (!(handled)) {
if (HasString(object1, "selfuseon")) {
OutputText (object1.selfuseon);
var handled = true;
}
else if (overloadedFunctions.TypeOf(object1, "selfuseon") == "scriptdictionary") {
if (DictionaryContains(object1.selfuseon, object2.name)) {
var parameters = NewObjectDictionary();
dictionaryadd (parameters, "this", object1);
dictionaryadd (parameters, "object", object2);
invoke (ScriptDictionaryItem(object1.selfuseon, object2.name), parameters);
var handled = true;
}
else {
if (HasScript(object1, "selfuseanything")) {
var parameters = NewObjectDictionary();
dictionaryadd (parameters, "object", object2);
runscriptattribute3 (object1, "selfuseanything", parameters);
var handled = true;
}
}
}
}
if (!(handled)) {
OutputText (overloadedFunctions.DynamicTemplate("DefaultUseOn", object2, object1));
}
}
function DoAskTell(object, text, property, defaultscript, defaulttemplate)
{
var handled = false;
var maxstrength = 0;
var match = null;
var text = LCase(text);
if (overloadedFunctions.TypeOf(object, property) == "scriptdictionary") {
var dictionary = GetAttribute(object, property);
var dictionary_isarray = (Object.prototype.toString.call(dictionary) === '[object Array]');
for (var iterator_keywords in dictionary) {
var keywords = dictionary_isarray ? dictionary[iterator_keywords] : iterator_keywords;
if (dictionary_isarray || iterator_keywords!="__dummyKey") { var strength = GetKeywordsMatchStrength(LCase(keywords), text);
if (strength >= maxstrength && strength>0) {
var match = ScriptDictionaryItem(dictionary, keywords);
var maxstrength = strength;
} }
}
if (match != null) {
var parameters = NewObjectDictionary();
dictionaryadd (parameters, "this", object);
invoke (match, parameters);
var handled = true;
}
}
if (!(handled)) {
if (HasScript(object, defaultscript)) {
runscriptattribute2 (object, defaultscript);
}
else {
OutputText (overloadedFunctions.DynamicTemplate(defaulttemplate, object));
}
}
}
function GetKeywordsMatchStrength(keywords, input)
{
var keywordlist = Split(keywords, " ");
var inputlist = Split(input, " ");
var strength = 0;
var inputlist_isarray = (Object.prototype.toString.call(inputlist) === '[object Array]');
for (var iterator_word in inputlist) {
var word = inputlist_isarray ? inputlist[iterator_word] : iterator_word;
if (inputlist_isarray || iterator_word!="__dummyKey") { var keywordlist_isarray = (Object.prototype.toString.call(keywordlist) === '[object Array]');
for (var iterator_keyword in keywordlist) {
var keyword = keywordlist_isarray ? keywordlist[iterator_keyword] : iterator_keyword;
if (keywordlist_isarray || iterator_keyword!="__dummyKey") { if (StartsWith(word, keyword)) {
var strength = strength + LengthOf(keyword);
} }
} }
}
return (strength);
}
function CompareNames(name, value, obj, fullmatches, partialmatches)
{
if (name == value) {
if (!(ListContains(fullmatches, obj))) {
listadd (fullmatches, obj);
}
}
else {
if (StartsWith(name, value)) {
if (!(ListContains(partialmatches, obj))) {
listadd (partialmatches, obj);
}
}
else {
if (Instr(name, " " + value) > 0) {
if (!(ListContains(partialmatches, obj))) {
listadd (partialmatches, obj);
}
}
}
}
}
function GenerateMenuChoices(dictionary, objects)
{
var objects_isarray = (Object.prototype.toString.call(objects) === '[object Array]');
for (var iterator_obj in objects) {
var obj = objects_isarray ? objects[iterator_obj] : iterator_obj;
if (objects_isarray || iterator_obj!="__dummyKey") { if (!(DictionaryContains(dictionary, obj.name))) {
dictionaryadd (dictionary, obj.name, GetDisplayAlias(obj));
} }
}
}
function ResolveName(variable, value, objtype)
{
var found = false;
if (_obj245.pov.commandmetadata != null) {
if (DictionaryContains(_obj245.pov.commandmetadata, value)) {
var result = GetObject(StringDictionaryItem(_obj245.pov.commandmetadata, value));
if (result != null) {
if (ListContains(ScopeVisible(), result)) {
var found = true;
return (result);
}
}
}
}
if (!(found)) {
var value = LCase(value);
var result = ResolveNameInternal(variable, value, objtype);
if (result != null) {
return (result);
}
else {
var _obj245_parserignoreprefixes_isarray = (Object.prototype.toString.call(_obj245.parserignoreprefixes) === '[object Array]');
for (var iterator_prefix in _obj245.parserignoreprefixes) {
var prefix = _obj245_parserignoreprefixes_isarray ? _obj245.parserignoreprefixes[iterator_prefix] : iterator_prefix;
if (_obj245_parserignoreprefixes_isarray || iterator_prefix!="__dummyKey") { if (StartsWith(value, prefix + " ")) {
var result = ResolveNameInternal(variable, Mid(value, LengthOf(prefix) + 1), objtype);
} }
}
if (result == null && LengthOf(variable) == 0 && !(GetBoolean(_obj245.pov, "currentcommandmultiobjectpending"))) {
UnresolvedCommand (value, _obj245.pov.currentcommandpendingvariable);
}
return (result);
}
}
}
function ResolveNameInternal(variable, value, objtype)
{
var fullmatches = NewObjectList();
var partialmatches = NewObjectList();
set(_obj245.pov, "currentcommandmultiobjectpending", false);
if (objtype == "object") {
var scope = ScopeVisible();
}
else if (objtype == "exit") {
var scope = ScopeExits();
}
var value = Trim(value);
var scope_isarray = (Object.prototype.toString.call(scope) === '[object Array]');
for (var iterator_obj in scope) {
var obj = scope_isarray ? scope[iterator_obj] : iterator_obj;
if (scope_isarray || iterator_obj!="__dummyKey") { var name = LCase(GetDisplayAlias(obj));
CompareNames (name, value, obj, fullmatches, partialmatches);
if (obj.alt != null) {
var obj_alt_isarray = (Object.prototype.toString.call(obj.alt) === '[object Array]');
for (var iterator_altname in obj.alt) {
var altname = obj_alt_isarray ? obj.alt[iterator_altname] : iterator_altname;
if (obj_alt_isarray || iterator_altname!="__dummyKey") { CompareNames (LCase(altname), value, obj, fullmatches, partialmatches); }
}
} }
}
if (objtype == "object" && _obj245.lastobjects != null) {
var _obj245_lastobjects_isarray = (Object.prototype.toString.call(_obj245.lastobjects) === '[object Array]');
for (var iterator_obj in _obj245.lastobjects) {
var obj = _obj245_lastobjects_isarray ? _obj245.lastobjects[iterator_obj] : iterator_obj;
if (_obj245_lastobjects_isarray || iterator_obj!="__dummyKey") { CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches);
CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches); }
}
}
if (ListCount(fullmatches) == 1) {
return (ListItem(fullmatches, 0));
}
else if (ListCount(fullmatches) == 0 && ListCount(partialmatches) == 1) {
return (ListItem(partialmatches, 0));
}
else if (ListCount(fullmatches) + ListCount(partialmatches) == 0) {
return (null);
}
else {
var menu = NewStringDictionary();
GenerateMenuChoices (menu, fullmatches);
GenerateMenuChoices (menu, partialmatches);
if (LengthOf(variable) > 0) {
set(_obj245.pov, "currentcommandpendingvariable", variable);
ShowMenu (overloadedFunctions.DynamicTemplate("DisambiguateMenu", value), menu, true, function (result) { var varname = _obj245.pov.currentcommandpendingvariable;
set(_obj245.pov, "currentcommandpendingvariable", null);
if (result != null) {
AddToResolvedNames (varname, GetObject(result));
} });
}
else {
set(_obj245.pov, "currentcommandmultiobjectpending", true);
ShowMenu (overloadedFunctions.DynamicTemplate("DisambiguateMenu", value), menu, true, function (result) { if (result != null) {
listadd (_obj245.pov.currentcommandpendingobjectlist, GetObject(result));
ResolveNextNameListItem();
} });
}
return (null);
}
}
function ResolveNameList(value, scope, objtype)
{
set(_obj245.pov, "currentcommandpendingobjectlist", NewObjectList());
set(_obj245.pov, "currentcommandpendingobjectlistunresolved", NewStringList());
set(_obj245.pov, "currentcommandpendingobjectscope", scope);
set(_obj245.pov, "currentcommandpendingobjecttype", objtype);
var inputlist = Split(value, ",");
var inputlist_isarray = (Object.prototype.toString.call(inputlist) === '[object Array]');
for (var iterator_inputbase in inputlist) {
var inputbase = inputlist_isarray ? inputlist[iterator_inputbase] : iterator_inputbase;
if (inputlist_isarray || iterator_inputbase!="__dummyKey") { var inputlist2 = Split(inputbase, " " + Template("And") + " ");
var inputlist2_isarray = (Object.prototype.toString.call(inputlist2) === '[object Array]');
for (var iterator_input in inputlist2) {
var input = inputlist2_isarray ? inputlist2[iterator_input] : iterator_input;
if (inputlist2_isarray || iterator_input!="__dummyKey") { listadd (_obj245.pov.currentcommandpendingobjectlistunresolved, input); }
} }
}
ResolveNextNameListItem();
}
function ResolveNextNameListItem()
{
var resolvedall = false;
if (overloadedFunctions.TypeOf(_obj245.pov, "currentcommandpendingobjectlistunresolved") == "stringlist") {
var queuelength = ListCount(_obj245.pov.currentcommandpendingobjectlistunresolved);
if (queuelength > 0) {
var thisitem = Trim(StringListItem(_obj245.pov.currentcommandpendingobjectlistunresolved, 0));
if (queuelength == 1) {
set(_obj245.pov, "currentcommandpendingobjectlistunresolved", null);
}
else {
var newqueue = NewStringList();
for (var i = 1; i <= queuelength - 1; i++) {
listadd (newqueue, StringListItem(_obj245.pov.currentcommandpendingobjectlistunresolved, i));
}
set(_obj245.pov, "currentcommandpendingobjectlistunresolved", newqueue);
}
ResolveNameListItem (Trim(thisitem));
}
else {
var resolvedall = true;
}
}
else {
var resolvedall = true;
}
if (resolvedall) {
ResolveNameListItemFinished (_obj245.pov.currentcommandpendingobjectlist);
}
}
function ResolveNameListItem(value)
{
if (ListContains(_obj245.allobjects, value)) {
if (!(DictionaryContains(_obj245.pov.currentcommandresolvedelements, "multiple"))) {
dictionaryadd (_obj245.pov.currentcommandresolvedelements, "multiple", true);
}
ResolveNameListItemFinished (_obj245.pov.currentcommandpendingobjectscope);
}
else {
var object = ResolveName("", value, _obj245.pov.currentcommandpendingobjecttype);
if (object != null) {
if (!(ListContains(_obj245.pov.currentcommandpendingobjectlist, object))) {
listadd (_obj245.pov.currentcommandpendingobjectlist, object);
}
ResolveNextNameListItem();
}
}
}
function ResolveNameListItemFinished(result)
{
if (ListCount(result) > 1) {
if (!(DictionaryContains(_obj245.pov.currentcommandresolvedelements, "multiple"))) {
dictionaryadd (_obj245.pov.currentcommandresolvedelements, "multiple", true);
}
}
AddToResolvedNames (_obj245.pov.currentcommandpendingvariable, result);
}
function HandleCommand(command, metadata)
{
var handled = false;
if (_obj245.menucallback != null) {
if (HandleMenuTextResponse(command)) {
var handled = true;
}
else {
if (_obj245.menuallowcancel) {
ClearMenu();
}
else {
var handled = true;
}
}
}
if (!(handled)) {
StartTurnOutputSection();
if (StartsWith (command, "*")) {
OutputText ("");
OutputText (SafeXML (command));
}
else {
var shownlink = false;
if (_obj245.echocommand) {
if (metadata != null && _obj245.enablehyperlinks && _obj245.echohyperlinks) {
var metadata_isarray = (Object.prototype.toString.call(metadata) === '[object Array]');
for (var iterator_key in metadata) {
var key = metadata_isarray ? metadata[iterator_key] : iterator_key;
if (metadata_isarray || iterator_key!="__dummyKey") { if (EndsWith(command, key)) {
var objectname = StringDictionaryItem(metadata, key);
var object = GetObject(objectname);
if (object != null) {
OutputText ("");
OutputText ("&gt; " + Left(command, LengthOf(command) - LengthOf(key)) + "{object:" + object.name + "}");
var shownlink = true;
}
} }
}
}
if (!(shownlink)) {
OutputText ("");
OutputTextRaw ("&gt; " + SafeXML(command));
}
}
if (_obj245.command_newline) {
OutputText ("");
}
set(_obj245.pov, "commandmetadata", metadata);
if (_obj245.multiplecommands) {
var commands = Split(command, ".");
if (ListCount(commands) == 1) {
set(_obj245.pov, "commandqueue", null);
HandleSingleCommand (Trim(command));
}
else {
set(_obj245.pov, "commandqueue", commands);
HandleNextCommandQueueItem();
}
}
else {
set(_obj245.pov, "commandqueue", null);
HandleSingleCommand (Trim(command));
}
}
}
}
function HandleNextCommandQueueItem()
{
if (overloadedFunctions.TypeOf(_obj245.pov, "commandqueue") == "stringlist") {
var queuelength = ListCount(_obj245.pov.commandqueue);
if (queuelength > 0) {
var thiscommand = Trim(StringListItem(_obj245.pov.commandqueue, 0));
if (queuelength == 1) {
set(_obj245.pov, "commandqueue", null);
}
else {
var newqueue = NewStringList();
for (var i = 1; i <= queuelength - 1; i++) {
listadd (newqueue, StringListItem(_obj245.pov.commandqueue, i));
}
set(_obj245.pov, "commandqueue", newqueue);
}
if (LengthOf(thiscommand) > 0) {
HandleSingleCommand (thiscommand);
}
else {
HandleNextCommandQueueItem();
}
}
}
}
function HandleSingleCommand(command)
{
var candidates = NewObjectList();
var list_cmd = ScopeCommands();
var list_cmd_isarray = (Object.prototype.toString.call(list_cmd) === '[object Array]');
for (var iterator_cmd in list_cmd) {
var cmd = list_cmd_isarray ? list_cmd[iterator_cmd] : iterator_cmd;
if (list_cmd_isarray || iterator_cmd!="__dummyKey") { if (IsRegexMatch(cmd.pattern, command, cmd.name)) {
listadd (candidates, cmd);
} }
}
var maxstrength = -1;
var thiscommand = null;
var candidates_isarray = (Object.prototype.toString.call(candidates) === '[object Array]');
for (var iterator_candidate in candidates) {
var candidate = candidates_isarray ? candidates[iterator_candidate] : iterator_candidate;
if (candidates_isarray || iterator_candidate!="__dummyKey") { var strength = GetMatchStrength(candidate.pattern, command, candidate.name);
if (strength >= maxstrength) {
var skip = false;
if (thiscommand != null) {
if (thiscommand.parent != null && candidate.parent == null) {
var skip = true;
}
}
if (!(skip)) {
var thiscommand = candidate;
var maxstrength = strength;
}
} }
}
if (thiscommand == null) {
if (HasScript(_obj245, "unresolvedcommandhandler")) {
var params = NewDictionary();
dictionaryadd (params, "command", command);
runscriptattribute3 (_obj245, "unresolvedcommandhandler", params);
}
else {
OutputText (Template("UnrecognisedCommand"));
}
HandleNextCommandQueueItem();
}
else {
var varlist = Populate(thiscommand.pattern, command, thiscommand.name);
HandleSingleCommandPattern (command, thiscommand, varlist);
}
}
function FinishTurn()
{
RunTurnScripts();
UpdateStatusAttributes();
CheckDarkness();
UpdateObjectLinks();
}
function HandleSingleCommandPattern(command, thiscommand, varlist)
{
set(_obj245.pov, "currentcommand", command);
set(_obj245.pov, "currentcommandpattern", thiscommand);
set(_obj245.pov, "currentcommandvarlist", varlist);
set(_obj245.pov, "currentcommandvarlistqueue", NewStringList());
var varlist_isarray = (Object.prototype.toString.call(varlist) === '[object Array]');
for (var iterator_key in varlist) {
var key = varlist_isarray ? varlist[iterator_key] : iterator_key;
if (varlist_isarray || iterator_key!="__dummyKey") { listadd (_obj245.pov.currentcommandvarlistqueue, key); }
}
set(_obj245.pov, "currentcommandresolvedelements", NewDictionary());
set(_obj245.pov, "currentcommandresolvedobjects", NewObjectList());
set(_obj245.pov, "currentcommandunresolvedobject", null);
set(_obj245.pov, "currentcommandpendingvariable", null);
ResolveNextName();
}
function ResolveNextName()
{
var resolvedall = false;
var queuetype = overloadedFunctions.TypeOf(_obj245.pov, "currentcommandvarlistqueue");
if (queuetype == "stringlist") {
var queuelength = ListCount(_obj245.pov.currentcommandvarlistqueue);
if (queuelength > 0) {
var variable_var = StringListItem(_obj245.pov.currentcommandvarlistqueue, 0);
if (queuelength == 1) {
set(_obj245.pov, "currentcommandvarlistqueue", null);
}
else {
var newqueue = NewStringList();
for (var i = 1; i <= queuelength - 1; i++) {
listadd (newqueue, StringListItem(_obj245.pov.currentcommandvarlistqueue, i));
}
set(_obj245.pov, "currentcommandvarlistqueue", newqueue);
}
var value = StringDictionaryItem(_obj245.pov.currentcommandvarlist, variable_var);
if (value != "") {
var result = null;
var resolvinglist = false;
if (StartsWith(variable_var, "object")) {
if (HasDelegateImplementation(_obj245.pov.currentcommandpattern, "multiple")) {
set(_obj245.pov, "currentcommandpendingobjectlist", NewObjectList());
set(_obj245.pov, "currentcommandpendingvariable", variable_var);
ResolveNameList (value, RunDelegateFunction(_obj245.pov.currentcommandpattern, "multiple"), "object");
var resolvinglist = true;
}
else {
var result = ResolveName(variable_var, value, "object");
}
}
else if (StartsWith(variable_var, "exit")) {
var result = ResolveName(variable_var, value, "exit");
}
else if (StartsWith(variable_var, "text")) {
var result = StringDictionaryItem(_obj245.pov.currentcommandvarlist, variable_var);
}
else {
error ("Unhandled command variable '" + variable_var + "' - command variable names must begin with 'object', 'exit' or 'text'");
}
if (result == null) {
if ((!resolvinglist) && LengthOf(GetString(_obj245.pov, "currentcommandpendingvariable")) == 0) {
UnresolvedCommand (value, variable_var);
}
}
else {
AddToResolvedNames (variable_var, result);
}
}
else {
ResolveNextName();
}
}
else {
var resolvedall = true;
}
}
else if (queuetype == "null") {
var resolvedall = true;
}
else {
error ("Invalid queue type");
}
if (resolvedall) {
set(_obj245, "lastobjects", _obj245.pov.currentcommandresolvedobjects);
if (!(DictionaryContains(_obj245.pov.currentcommandresolvedelements, "multiple"))) {
dictionaryadd (_obj245.pov.currentcommandresolvedelements, "multiple", false);
}
if (!(GetBoolean(_obj245.pov.currentcommandpattern, "isundo"))) {
if (LengthOf(_obj245.pov.currentcommand) > 0) {
starttransaction (_obj245.pov.currentcommand);
}
}
if (!(GetBoolean(_obj245.pov.currentcommandpattern, "isoops"))) {
set(_obj245, "unresolvedcommand", null);
set(_obj245, "unresolvedcommandvarlist", null);
set(_obj245, "unresolvedcommandkey", null);
}
if (HasScript(_obj245.pov.currentcommandpattern, "script")) {
runscriptattribute3 (_obj245.pov.currentcommandpattern, "script", _obj245.pov.currentcommandresolvedelements);
}
HandleNextCommandQueueItem();
}
}
function AddToResolvedNames(variable_var, result)
{
if (overloadedFunctions.TypeOf(result) == "object") {
if (result.type == "object") {
listadd (_obj245.pov.currentcommandresolvedobjects, result);
}
}
else if (overloadedFunctions.TypeOf(result) == "objectlist") {
var result_isarray = (Object.prototype.toString.call(result) === '[object Array]');
for (var iterator_obj in result) {
var obj = result_isarray ? result[iterator_obj] : iterator_obj;
if (result_isarray || iterator_obj!="__dummyKey") { if (obj.type == "object") {
listadd (_obj245.pov.currentcommandresolvedobjects, obj);
} }
}
}
dictionaryadd (_obj245.pov.currentcommandresolvedelements, variable_var, result);
ResolveNextName();
}
function UnresolvedCommand(objectname, varname)
{
var unresolvedobject = objectname;
var unresolvedkey = varname;
if (HasString(_obj245.pov.currentcommandpattern, "unresolved")) {
if (ListCount(_obj245.pov.currentcommandvarlist) > 1) {
OutputText (_obj245.pov.currentcommandpattern.unresolved + " (" + unresolvedobject + ")");
}
else {
OutputText (_obj245.pov.currentcommandpattern.unresolved);
}
}
else {
if (ListCount(_obj245.pov.currentcommandvarlist) > 1) {
OutputText (Template("UnresolvedObject") + " (" + unresolvedobject + ")");
}
else {
OutputText (Template("UnresolvedObject"));
}
}
set(_obj245, "unresolvedcommand", _obj245.pov.currentcommandpattern);
set(_obj245, "unresolvedcommandvarlist", _obj245.pov.currentcommandvarlist);
set(_obj245, "unresolvedcommandkey", unresolvedkey);
}
function HandleMultiVerb(object, property, object2, variable_default)
{
var dictionary = GetAttribute(object, property);
if (DictionaryContains(dictionary, object2.name)) {
var parameters = NewDictionary();
dictionaryadd (parameters, "this", object);
dictionaryadd (parameters, "object", object2);
invoke (ScriptDictionaryItem(dictionary, object2.name), parameters);
}
else {
var parameters = NewDictionary();
dictionaryadd (parameters, "this", object);
dictionaryadd (parameters, "object", object2);
if (DictionaryContains(dictionary, "default")) {
invoke (ScriptDictionaryItem(dictionary, "default"), parameters);
}
else {
OutputText (variable_default);
}
}
}
function GetPlacesObjectsList()
{
return (ListExclude(ScopeVisibleNotHeldNotScenery(), _obj245.pov));
}
function GetExitsList()
{
return (RemoveLookOnlyExits(RemoveSceneryObjects(ScopeExits())));
}
function ScopeInventory()
{
var result = NewObjectList();
var list_obj = GetAllChildObjects(_obj245.pov);
var list_obj_isarray = (Object.prototype.toString.call(list_obj) === '[object Array]');
for (var iterator_obj in list_obj) {
var obj = list_obj_isarray ? list_obj[iterator_obj] : iterator_obj;
if (list_obj_isarray || iterator_obj!="__dummyKey") { if (ContainsVisible(_obj245.pov, obj)) {
listadd (result, obj);
} }
}
return (result);
}
function ScopeReachableInventory()
{
var result = NewObjectList();
var list_obj = GetAllChildObjects(_obj245.pov);
var list_obj_isarray = (Object.prototype.toString.call(list_obj) === '[object Array]');
for (var iterator_obj in list_obj) {
var obj = list_obj_isarray ? list_obj[iterator_obj] : iterator_obj;
if (list_obj_isarray || iterator_obj!="__dummyKey") { if (ContainsReachable(_obj245.pov, obj)) {
listadd (result, obj);
} }
}
return (result);
}
function ScopeVisibleNotHeld()
{
return (ScopeVisibleNotHeldForRoom(_obj245.pov.parent));
}
function ScopeVisibleNotHeldForRoom(room)
{
if (room == _obj245.pov.parent) {
var result = ListCombine(ScopeReachableNotHeldForRoom(room), ScopeVisibleNotReachableForRoom(room));
listadd (result, _obj245.pov);
return (result);
}
else {
return (ListCombine(ScopeReachableNotHeldForRoom(room), ScopeVisibleNotReachableForRoom(room)));
}
}
function ScopeVisibleNotHeldNotScenery()
{
return (ScopeVisibleNotHeldNotSceneryForRoom(_obj245.pov.parent));
}
function ScopeVisibleNotHeldNotSceneryForRoom(room)
{
return (RemoveSceneryObjects(ScopeVisibleNotHeldForRoom(room)));
}
function ScopeReachable()
{
return (ScopeReachableForRoom(_obj245.pov.parent));
}
function ScopeReachableForRoom(room)
{
if (room == _obj245.pov.parent) {
var result = ListCombine(ScopeReachableNotHeldForRoom(room), ScopeReachableInventory());
listadd (result, _obj245.pov);
}
else {
var result = ScopeReachableNotHeldForRoom(room);
}
return (result);
}
function ScopeVisibleNotReachable()
{
return (ScopeVisibleNotReachableForRoom(_obj245.pov.parent));
}
function ScopeVisibleNotReachableForRoom(room)
{
var result = NewObjectList();
var exclude = ScopeReachableForRoom(room);
listadd (exclude, _obj245.pov);
var newParent = GetNonTransparentParent(room);
var list_obj = GetAllChildObjects(newParent);
var list_obj_isarray = (Object.prototype.toString.call(list_obj) === '[object Array]');
for (var iterator_obj in list_obj) {
var obj = list_obj_isarray ? list_obj[iterator_obj] : iterator_obj;
if (list_obj_isarray || iterator_obj!="__dummyKey") { if (ContainsVisible(newParent, obj) && !(ListContains(exclude, obj))) {
listadd (result, obj);
} }
}
return (result);
}
function GetNonTransparentParent(room)
{
if (GetBoolean(room, "transparent")) {
if (room.parent == null) {
return (room);
}
else {
return (GetNonTransparentParent(room.parent));
}
}
else {
return (room);
}
}
function ScopeReachableNotHeld()
{
return (ScopeReachableNotHeldForRoom(_obj245.pov.parent));
}
function ScopeVisibleLightsource(lightstrength)
{
var result = ScopeVisible();
var lightobjects = NewObjectList();
var result_isarray = (Object.prototype.toString.call(result) === '[object Array]');
for (var iterator_obj in result) {
var obj = result_isarray ? result[iterator_obj] : iterator_obj;
if (result_isarray || iterator_obj!="__dummyKey") { if (GetBoolean(obj, "lightsource") && GetString(obj, "lightstrength") == lightstrength) {
listadd (lightobjects, obj);
} }
}
var exits = ScopeExits();
var exits_isarray = (Object.prototype.toString.call(exits) === '[object Array]');
for (var iterator_obj in exits) {
var obj = exits_isarray ? exits[iterator_obj] : iterator_obj;
if (exits_isarray || iterator_obj!="__dummyKey") { if (GetBoolean(obj, "lightsource") && GetString(obj, "lightstrength") == lightstrength) {
listadd (lightobjects, obj);
} }
}
return (lightobjects);
}
function ScopeReachableNotHeldForRoom(room)
{
var result = NewObjectList();
var list_obj = GetAllChildObjects(room);
var list_obj_isarray = (Object.prototype.toString.call(list_obj) === '[object Array]');
for (var iterator_obj in list_obj) {
var obj = list_obj_isarray ? list_obj[iterator_obj] : iterator_obj;
if (list_obj_isarray || iterator_obj!="__dummyKey") { if (ContainsReachable(room, obj) && obj != _obj245.pov && !(Contains(_obj245.pov, obj))) {
listadd (result, obj);
} }
}
return (result);
}
function ScopeVisible()
{
return (ScopeVisibleForRoom(_obj245.pov.parent));
}
function ScopeVisibleForRoom(room)
{
if (room == _obj245.pov.parent) {
return (ListCombine(ScopeVisibleNotHeldForRoom(room), ScopeInventory()));
}
else {
return (ScopeVisibleNotHeldForRoom(room));
}
}
function ScopeExits()
{
return (ScopeExitsForRoom(_obj245.pov.parent));
}
function ScopeExitsForRoom(room)
{
var result = NewObjectList();
var list_exit = AllExits();
var list_exit_isarray = (Object.prototype.toString.call(list_exit) === '[object Array]');
for (var iterator_exit in list_exit) {
var exit = list_exit_isarray ? list_exit[iterator_exit] : iterator_exit;
if (list_exit_isarray || iterator_exit!="__dummyKey") { if (exit.parent == room) {
if (exit.visible) {
if (GetBoolean(room, "darklevel")) {
if (GetBoolean(exit, "lightsource")) {
listadd (result, exit);
}
}
else {
listadd (result, exit);
}
}
} }
}
return (result);
}
function ScopeCommands()
{
var result = NewObjectList();
var list_command = AllCommands();
var list_command_isarray = (Object.prototype.toString.call(list_command) === '[object Array]');
for (var iterator_command in list_command) {
var command = list_command_isarray ? list_command[iterator_command] : iterator_command;
if (list_command_isarray || iterator_command!="__dummyKey") { if (command.parent == null || command.parent == _obj245.pov.parent) {
listadd (result, command);
} }
}
return (result);
}
function GetBlockingObject(obj)
{
var result = null;
var list_obj = ListParents(obj);
var list_obj_isarray = (Object.prototype.toString.call(list_obj) === '[object Array]');
for (var iterator_obj in list_obj) {
var obj = list_obj_isarray ? list_obj[iterator_obj] : iterator_obj;
if (list_obj_isarray || iterator_obj!="__dummyKey") { if (result == null && !(CanReachThrough(obj))) {
var result = obj;
} }
}
return (result);
}
function ListParents(obj)
{
var result = NewObjectList();
if (obj.parent != null) {
var parent_as_list = NewObjectList();
listadd (parent_as_list, obj.parent);
var result = ListCombine(parent_as_list, ListParents(obj.parent));
}
return (result);
}
function ContainsVisible(parentObj, searchObj)
{
return (ContainsAccessible(parentObj, searchObj, false));
}
function ContainsReachable(parentObj, searchObj)
{
return (ContainsAccessible(parentObj, searchObj, true));
}
function ContainsAccessible(parentObj, searchObj, onlyReachable)
{
if (!(HasObject(searchObj, "parent"))) {
return (false);
}
else if (!(searchObj.visible)) {
return (false);
}
else if (GetBoolean(parentObj, "darklevel") && !(GetBoolean(searchObj, "lightsource"))) {
return (false);
}
else {
if (searchObj.parent == null) {
return (false);
}
else if (searchObj.parent == parentObj) {
return (true);
}
else {
if (onlyReachable) {
var canAdd = CanReachThrough(searchObj.parent);
}
else {
var canAdd = CanSeeThrough(searchObj.parent);
}
if (canAdd) {
return (ContainsAccessible(parentObj, searchObj.parent, onlyReachable));
}
else {
return (false);
}
}
}
}
function GetVolume(obj, allinclusive)
{
var result = 0;
var list_object = GetAllChildObjects ( obj );
var list_object_isarray = (Object.prototype.toString.call(list_object) === '[object Array]');
for (var iterator_object in list_object) {
var object = list_object_isarray ? list_object[iterator_object] : iterator_object;
if (list_object_isarray || iterator_object!="__dummyKey") { if (HasInt(object, "volume")) {
var result = result + object.volume;
} }
}
if (allinclusive && HasInt(obj, "volume")) {
var result = result + obj.volume;
}
return (result);
}
function CanSeeThrough(obj)
{
return ((GetBoolean(obj, "transparent") || CanReachThrough(obj)) && !(GetBoolean(obj, "hidechildren")));
}
function CanReachThrough(obj)
{
return (GetBoolean(obj, "isopen") && !(GetBoolean(obj, "hidechildren")));
}
function Got(obj)
{
return (ListContains(ScopeInventory(), obj));
}
function UpdateObjectLinks()
{
if (_obj245.enablehyperlinks) {
var data = NewStringDictionary();
var list_object = ScopeVisible();
var list_object_isarray = (Object.prototype.toString.call(list_object) === '[object Array]');
for (var iterator_object in list_object) {
var object = list_object_isarray ? list_object[iterator_object] : iterator_object;
if (list_object_isarray || iterator_object!="__dummyKey") { dictionaryadd (data, object.name, Join(GetDisplayVerbs(object), "/")); }
}
updateObjectLinks (data)
var exits = NewStringList();
var list_exit = ScopeExits();
var list_exit_isarray = (Object.prototype.toString.call(list_exit) === '[object Array]');
for (var iterator_exit in list_exit) {
var exit = list_exit_isarray ? list_exit[iterator_exit] : iterator_exit;
if (list_exit_isarray || iterator_exit!="__dummyKey") { listadd (exits, exit.name); }
}
updateExitLinks (exits)
var commands = NewStringList();
var list_cmd = ScopeCommands();
var list_cmd_isarray = (Object.prototype.toString.call(list_cmd) === '[object Array]');
for (var iterator_cmd in list_cmd) {
var cmd = list_cmd_isarray ? list_cmd[iterator_cmd] : iterator_cmd;
if (list_cmd_isarray || iterator_cmd!="__dummyKey") { listadd (commands, cmd.name); }
}
updateCommandLinks (commands)
}
}
function ShowRoomDescription()
{
var isDark = CheckDarkness();
if (isDark) {
var descriptionfield = "darkroomdescription";
}
else {
var descriptionfield = "description";
}
if (_obj245.autodescription) {
var desc = "";
for (var i = 1; i <= 4; i++) {
if (i == _obj245.autodescription_youarein) {
if (_obj245.autodescription_youarein_useprefix) {
var youarein = _obj245.pov.parent.descprefix;
var desc = AddDescriptionLine (desc, youarein + " " + GetDisplayName(_obj245.pov.parent) + ".");
}
else {
var desc = AddDescriptionLine (desc, "<b>" + CapFirst(GetDisplayName(_obj245.pov.parent)) + "</b>");
}
if (_obj245.autodescription_youarein_newline) {
OutputText (desc + "<br/>");
var desc = "";
}
}
if (i == _obj245.autodescription_youcansee) {
var objects = FormatObjectList(_obj245.pov.parent.objectslistprefix, GetNonTransparentParent(_obj245.pov.parent), Template("And"), ".");
var desc = AddDescriptionLine(desc, objects);
if (_obj245.autodescription_youcansee_newline) {
OutputText (desc + "<br/>");
var desc = "";
}
}
if (i == _obj245.autodescription_youcango) {
var exits = FormatExitList(_obj245.pov.parent.exitslistprefix, GetExitsList(), Template("Or"), ".");
var desc = AddDescriptionLine(desc, exits);
if (_obj245.autodescription_youcango_newline) {
OutputText (desc + "<br/>");
var desc = "";
}
}
if (i == _obj245.autodescription_description) {
if (HasScript(_obj245.pov.parent, descriptionfield)) {
if (LengthOf(desc) > 0) {
OutputText (desc);
var desc = "";
}
runscriptattribute2 (_obj245.pov.parent, descriptionfield);
if (_obj245.autodescription_description_newline) {
OutputText ("");
}
}
else {
var desc = AddDescriptionLine(desc, GetRoomDescription());
if (_obj245.autodescription_description_newline) {
OutputText (desc + "<br/>");
var desc = "";
}
}
}
}
if (LengthOf(desc) > 0) {
OutputText (desc);
}
}
else {
if (HasScript(_obj245.pov.parent, descriptionfield)) {
runscriptattribute2 (_obj245.pov.parent, descriptionfield);
}
else {
var fulldesc = GetRoomDescription();
if (LengthOf(fulldesc) > 0) {
OutputText (fulldesc);
}
}
}
}
function AddDescriptionLine(desc, line)
{
if (LengthOf(line) > 0) {
if (LengthOf(desc) > 0) {
OutputText (desc);
var desc = "";
}
var desc = desc + line;
}
return (desc);
}
function GetRoomDescription()
{
var fulldesc = "";
if (CheckDarkness()) {
if (HasString(_obj245.pov.parent, "darkroomdescription")) {
if (LengthOf(_obj245.pov.parent.darkroomdescription) > 0) {
var fulldesc = _obj245.pov.parent.darkroomdescription;
}
}
}
else {
if (HasString(_obj245.pov.parent, "description")) {
if (LengthOf(_obj245.pov.parent.description) > 0) {
var fulldesc = _obj245.pov.parent.description;
}
}
}
if (_obj245.appendobjectdescription) {
var list_val = ScopeVisibleNotHeld();
var list_val_isarray = (Object.prototype.toString.call(list_val) === '[object Array]');
for (var iterator_val in list_val) {
var val = list_val_isarray ? list_val[iterator_val] : iterator_val;
if (list_val_isarray || iterator_val!="__dummyKey") { if (HasString(val, "inroomdescription")) {
if (LengthOf(val.inroomdescription) > 0 && val != _obj245.pov) {
var fulldesc = fulldesc + " " + val.inroomdescription;
}
} }
}
}
return (Trim(fulldesc));
}
function OnEnterRoom(oldRoom)
{
set(_obj245, "displayroomdescriptiononstart", false);
if (IsDefined("oldRoom")) {
if (oldRoom != null) {
if (HasScript(oldRoom, "onexit")) {
runscriptattribute2 (oldRoom, "onexit");
}
}
}
on_ready (function() { if ((!GetBoolean(_obj245.pov.parent, "visited")) && HasScript(_obj245.pov.parent, "beforefirstenter")) {
runscriptattribute2 (_obj245.pov.parent, "beforefirstenter");
}
on_ready (function() { if (HasScript(_obj245.pov.parent, "beforeenter")) {
runscriptattribute2 (_obj245.pov.parent, "beforeenter");
}
on_ready (function() { if (_obj245.gridmap) {
Grid_CalculateMapCoordinates (_obj245.pov.parent, _obj245.pov);
Grid_DrawPlayerInRoom (_obj245.pov.parent);
}
if (IsDefined("oldRoom")) {
if (oldRoom != null && _obj245.changeroom_newline && !(_obj245.command_newline)) {
OutputText ("");
}
}
request ("UpdateLocation", CapFirst(GetDisplayName(_obj245.pov.parent)));
var roomFrameExists = false;
if (HasString(_obj245.pov.parent, "picture")) {
if (LengthOf(_obj245.pov.parent.picture) > 0) {
var roomFrameExists = true;
SetFramePicture (_obj245.pov.parent.picture);
}
}
if (_obj245.clearframe && !(roomFrameExists)) {
ClearFramePicture();
}
if (_obj245.showdescriptiononenter) {
ShowRoomDescription();
}
if (HasScript( _obj245, "roomenter")) {
runscriptattribute2 (_obj245, "roomenter");
}
on_ready (function() { if ((!GetBoolean(_obj245.pov.parent, "visited")) && HasScript(_obj245.pov.parent, "firstenter")) {
runscriptattribute2 (_obj245.pov.parent, "firstenter");
}
on_ready (function() { if (HasScript(_obj245.pov.parent, "enter")) {
runscriptattribute2 (_obj245.pov.parent, "enter");
} });
set (_obj245.pov.parent, "visited", true); }); }); }); });
}
function FormatObjectList(preList, parent, preFinal, postList)
{
var result = "";
var count = 0;
var list = RemoveSceneryObjects(GetDirectChildren(parent));
if (CheckDarkness()) {
var list = RemoveDarkObjects(list);
}
var listLength = ListCount(list);
var list_isarray = (Object.prototype.toString.call(list) === '[object Array]');
for (var iterator_item in list) {
var item = list_isarray ? list[iterator_item] : iterator_item;
if (list_isarray || iterator_item!="__dummyKey") { if (LengthOf(result) == 0) {
var result = preList + " ";
}
var result = result + GetDisplayNameLink(item, "object");
if (CanSeeThrough(item)) {
var result = result + FormatObjectList(" (" + item.contentsprefix, item, preFinal, ")");
}
var count = count + 1;
if (count == listLength - 1) {
var result = result + " " + preFinal + " ";
}
else if (count < listLength) {
var result = result + ", ";
}
else {
var result = result + postList;
} }
}
return (result);
}
function RemoveSceneryObjects(list)
{
var result = NewObjectList();
var list_isarray = (Object.prototype.toString.call(list) === '[object Array]');
for (var iterator_obj in list) {
var obj = list_isarray ? list[iterator_obj] : iterator_obj;
if (list_isarray || iterator_obj!="__dummyKey") { if (!(obj.scenery )&& obj != _obj245.pov && obj.visible) {
listadd (result, obj);
} }
}
return (result);
}
function RemoveLookOnlyExits(list)
{
var result = NewObjectList();
var list_isarray = (Object.prototype.toString.call(list) === '[object Array]');
for (var iterator_obj in list) {
var obj = list_isarray ? list[iterator_obj] : iterator_obj;
if (list_isarray || iterator_obj!="__dummyKey") { if (!(obj.lookonly)) {
listadd (result, obj);
} }
}
return (result);
}
function RemoveDarkObjects(list)
{
var result = NewObjectList();
var list_isarray = (Object.prototype.toString.call(list) === '[object Array]');
for (var iterator_obj in list) {
var obj = list_isarray ? list[iterator_obj] : iterator_obj;
if (list_isarray || iterator_obj!="__dummyKey") { if (GetBoolean(obj, "lightsource") || obj.parent == _obj245.pov) {
listadd (result, obj);
} }
}
return (result);
}
function FormatExitList(preList, list, preFinal, postList)
{
var result = "";
var listLength = ListCount(list);
if (listLength > 0) {
var count = 0;
var result = preList + " ";
var list_isarray = (Object.prototype.toString.call(list) === '[object Array]');
for (var iterator_item in list) {
var item = list_isarray ? list[iterator_item] : iterator_item;
if (list_isarray || iterator_item!="__dummyKey") { var result = result + GetDisplayNameLink(item, "exit");
var count = count + 1;
if (count == listLength - 1) {
var result = result + " " + preFinal + " ";
}
else if (count < listLength) {
var result = result + ", ";
} }
}
var result = result + postList;
}
return (result);
}
function GetDisplayAlias(obj)
{
if (HasString(obj, "alias")) {
var result = obj.alias;
}
else {
var result = obj.name;
}
return (result);
}
function GetDisplayName(obj)
{
return (GetDisplayNameLink(obj, ""));
}
function GetDisplayNameLink(obj, type)
{
var verbs = GetDisplayVerbs(obj);
if (verbs != null) {
var verbCount = ListCount(verbs);
}
else {
var verbCount = 0;
}
if (type == "exit" && verbCount == 1) {
if (!(_obj245.enablehyperlinks)) {
var result = GetDisplayAlias(obj);
}
else {
var result = "{exit:" + obj.name + "}";
}
}
else if (type == "") {
var result = GetDisplayAlias(obj);
}
else {
var result = "{object:" + obj.name + "}";
}
if (!(GetBoolean(obj, "usedefaultprefix"))) {
if (obj.prefix == null) {
var prefix = "";
}
else {
var prefix = obj.prefix;
}
}
else if (type == "exit") {
var prefix = "";
}
else {
var prefix = GetDefaultPrefix(obj);
}
if (LengthOf(prefix) > 0) {
var prefix = prefix + " ";
}
var result = prefix + result;
if (!(GetBoolean(obj, "usedefaultprefix") )&& HasString(obj, "suffix")) {
if (LengthOf(obj.suffix) > 0) {
var result = result + " " + obj.suffix;
}
}
return (result);
}
function ObjectLink(obj)
{
return ("{object:" + obj.name + "}");
}
function GetListDisplayAlias(obj)
{
if (HasString(obj, "listalias")) {
var result = obj.listalias;
}
else {
var result = GetDisplayAlias(obj);
}
return (result);
}
function CheckDarkness()
{
var roomCheckDarkness = true;
if (GetBoolean(_obj245.pov.parent, "dark")) {
if (ListCount(ScopeVisibleLightsource("strong")) > 0) {
var roomCheckDarkness = false;
}
}
else {
var roomCheckDarkness = false;
}
set(_obj245.pov.parent, "darklevel", roomCheckDarkness);
return (roomCheckDarkness);
}
function EnableTimer(timer)
{
set(timer, "enabled", true);
set(timer, "trigger", _obj245.timeelapsed + timer.interval);
}
function DisableTimer(timer)
{
set(timer, "enabled", false);
}
function SetTimerInterval(timer, interval)
{
set(timer, "interval", interval);
}
function SetTimerScript(timer, script)
{
set(timer, "script", script);
}
function SetTimeout(interval, script)
{
SetTimeoutID (interval, "", script);
}
function SetTimeoutID(interval, name, script)
{
var timername = "";
if (name == "") {
var timername = GetUniqueElementName("timeout");
}
else {
if (GetTimer(name) == null && GetObject(name) == null) {
var timername = name;
}
else {
error ("Error creating timer: There is already an existing object named " + name);
}
}
if (!(timername == "")) {
createtimer (timername);
var timer = GetTimer(timername);
SetTimerInterval (timer, interval);
set(timer, "timeoutscript", script);
SetTimerScript (timer, function (result) { set(this, "enabled", false);
invoke (this.timeoutscript);
destroy (this.name); });
EnableTimer (timer);
}
}
function Pause(interval)
{
request ("Pause", ToString(interval * 1000));
}
function RunTurnScripts()
{
if (IsGameRunning()) {
if (_obj245.menucallback == null) {
var list_turnscript = AllTurnScripts();
var list_turnscript_isarray = (Object.prototype.toString.call(list_turnscript) === '[object Array]');
for (var iterator_turnscript in list_turnscript) {
var turnscript = list_turnscript_isarray ? list_turnscript[iterator_turnscript] : iterator_turnscript;
if (list_turnscript_isarray || iterator_turnscript!="__dummyKey") { if (GetBoolean(turnscript, "enabled")) {
var inscope = false;
if (turnscript.parent == _obj245 || turnscript.parent == null) {
var inscope = true;
}
else {
if (Contains(turnscript.parent, _obj245.pov)) {
var inscope = true;
}
}
if (inscope) {
runscriptattribute2 (turnscript, "script");
}
} }
}
}
}
}
function EnableTurnScript(turnscript)
{
set(turnscript, "enabled", true);
}
function DisableTurnScript(turnscript)
{
set(turnscript, "enabled", false);
}
function SetTurnScript(turnscript, script)
{
set(turnscript, "script", script);
}
function SetTurnTimeout(turncount, script)
{
SetTurnTimeoutID (turncount, "", script);
}
function SetTurnTimeoutID(turncount, name, script)
{
var turnscriptname = "";
if (name == "") {
var turnscriptname = GetUniqueElementName("turnscript");
}
else {
if (GetObject(name) == null && GetTimer(name) == null) {
var turnscriptname = name;
}
else {
error ("Error creating turnscript: There is already an existing object named " + name);
}
}
if (!(turnscriptname=="")) {
createturnscript (turnscriptname);
var turnscript = GetObject(turnscriptname);
set(turnscript, "turncount", 0);
set(turnscript, "triggerturncount", turncount);
set(turnscript, "timeoutscript", script);
SetTurnScript (turnscript, function (result) { set(this, "turncount", this.turncount + 1);
if (this.turncount >= this.triggerturncount) {
set(this, "enabled", false);
invoke (this.timeoutscript);
destroy (this.name);
} });
EnableTurnScript (turnscript);
}
}
function UpdateStatusAttributes()
{
var status = AddStatusAttributesForElement("", _obj245, _obj245.statusattributes);
var status = AddStatusAttributesForElement(status, _obj245.pov, _obj245.povstatusattributes);
var status = AddStatusAttributesForElement(status, _obj245.pov, _obj245.pov.statusattributes);
request ("SetStatus", status);
}
function AddStatusAttributesForElement(status, element, statusAttributes)
{
if (statusAttributes != null) {
var statusAttributes_isarray = (Object.prototype.toString.call(statusAttributes) === '[object Array]');
for (var iterator_attr in statusAttributes) {
var attr = statusAttributes_isarray ? statusAttributes[iterator_attr] : iterator_attr;
if (statusAttributes_isarray || iterator_attr!="__dummyKey") { if (LengthOf(status) > 0) {
var status = status + "\n";
}
var status = status + FormatStatusAttribute(attr, GetAttribute(element, attr), StringDictionaryItem(statusAttributes, attr)); }
}
}
return (status);
}
function FormatStatusAttribute(attr, value, format)
{
if (LengthOf(format) == 0) {
return (CapFirst(attr) + ": " + value);
}
else {
if (overloadedFunctions.TypeOf(value) == "int" || overloadedFunctions.TypeOf(value) == "double") {
var value = ToString(value);
}
if (overloadedFunctions.TypeOf(value) == "null") {
var value = "";
}
return (Replace(format, "!", value));
}
}
function InitStatusAttributes()
{
if (_obj245.showscore) {
set(_obj245, "score", 0);
if (_obj245.statusattributes == null) {
set(_obj245, "statusattributes", NewStringDictionary());
}
dictionaryadd (_obj245.statusattributes, "score", "Score: !");
}
if (_obj245.showhealth) {
if (_obj245.povstatusattributes == null) {
set(_obj245, "povstatusattributes", NewStringDictionary());
}
dictionaryadd (_obj245.povstatusattributes, "health", "Health: !%");
}
}
function IncreaseScore(amount)
{
if (!(HasInt(_obj245, "score"))) {
error ("Score is not configured. To enable score, go to 'game' and tick 'Show score' on the Player tab.");
}
set(_obj245, "score", _obj245.score + amount);
}
function DecreaseScore(amount)
{
if (!(HasInt(_obj245, "score"))) {
error ("Score is not configured. To enable score, go to 'game' and tick 'Show score' on the Player tab.");
}
set(_obj245, "score", _obj245.score - amount);
}
function IncreaseHealth(amount)
{
if (!(HasInt(_obj245.pov, "health"))) {
error ("Health is not configured. To enable health, go to 'game' and tick 'Show health' on the Player tab.");
}
set(_obj245.pov, "health", _obj245.pov.health + amount);
}
function DecreaseHealth(amount)
{
if (!(HasInt(_obj245.pov, "health"))) {
error ("Health is not configured. To enable health, go to 'game' and tick 'Show health' on the Player tab.");
}
set(_obj245.pov, "health", _obj245.pov.health - amount);
}
function OutputText(text)
{
var data = NewDictionary();
dictionaryadd (data, "fulltext", text);
var text = ProcessTextSection(text, data);
OutputTextRaw (text);
}
function OutputTextRaw(text)
{
var format = GetCurrentTextFormat("");
addText ("<span style=\"" + format + "\">" + text + "</span><br/>")
if (GetString(_obj245, "commandbarformat") != format) {
ResetCommandBarFormat();
}
request ("Speak", text);
}
function ResetCommandBarFormat()
{
var format = GetCurrentTextFormat("") + ";background:" + _obj245.defaultbackground;
set(_obj245, "commandbarformat", format);
setCommandBarStyle (format)
}
function OutputTextNoBr(text)
{
var data = NewDictionary();
dictionaryadd (data, "fulltext", text);
var text = ProcessTextSection(text, data);
OutputTextRawNoBr (text);
}
function OutputTextRawNoBr(text)
{
addText ("<span style=\"" + GetCurrentTextFormat("") + "\">" + text + "</span>")
request ("Speak", text);
}
function GetCurrentTextFormat(colour)
{
var style = "";
if (UIOptionUseGameFont()) {
var font = GetCurrentFontFamily();
}
else {
var font = GetUIOption("OverrideFontName");
}
if (LengthOf(font) > 0) {
var style = style + "font-family:" + font + ";";
}
if (LengthOf(colour) == 0) {
if (UIOptionUseGameColours()) {
var colour = _obj245.defaultforeground;
}
else {
var colour = GetUIOption("OverrideForeground");
}
}
if (LengthOf(colour) > 0) {
var style = style + "color:" + colour + ";";
}
if (UIOptionUseGameFont()) {
var size = _obj245.defaultfontsize;
}
else {
var size = ToDouble(GetUIOption("OverrideFontSize"));
}
if (size > 0) {
var style = style + "font-size:" + ToString(size) + "pt;";
}
return (style);
}
function GetCurrentLinkTextFormat()
{
return (GetCurrentTextFormat(GetLinkTextColour()));
}
function UIOptionUseGameFont()
{
var value = GetUIOption("UseGameFont");
if (value == null || value == "true") {
return (true);
}
else {
return (false);
}
}
function UIOptionUseGameColours()
{
var value = GetUIOption("UseGameColours");
if (value == null || value == "true") {
return (true);
}
else {
return (false);
}
}
function GetLinkTextColour()
{
if (UIOptionUseGameColours()) {
return (_obj245.defaultlinkforeground);
}
else {
return (GetUIOption("OverrideLinkForeground"));
}
}
function ProcessTextSection(text, data)
{
var containsUnprocessedSection = false;
var open = Instr(text, "{");
if (open > 0) {
var nestCount = 1;
var searchStart = open + 1;
var finished = false;
while (!(finished)) {
var nextOpen = Instr(searchStart, text, "{");
var nextClose = Instr(searchStart, text, "}");
if (nextClose > 0) {
if (nextOpen > 0 && nextOpen < nextClose) {
var nestCount = nestCount + 1;
var searchStart = nextOpen + 1;
}
else {
var nestCount = nestCount - 1;
var searchStart = nextClose + 1;
if (nestCount == 0) {
var close = nextClose;
var containsUnprocessedSection = true;
var finished = true;
}
}
}
else {
var finished = true;
}
}
}
if (containsUnprocessedSection) {
var section = Mid(text, open + 1, close - open - 1);
var value = ProcessTextCommand(section, data);
var text = Left(text, open - 1) + value + ProcessTextSection(Mid(text, close + 1), data);
}
return (text);
}
function ProcessTextCommand(section, data)
{
if (StartsWith(section, "if ")) {
return (ProcessTextCommand_If(section, data));
}
else if (StartsWith(section, "object:")) {
return (ProcessTextCommand_Object(section, data));
}
else if (StartsWith(section, "command:")) {
return (ProcessTextCommand_Command(Mid(section, 9), data));
}
else if (StartsWith(section, "page:")) {
return (ProcessTextCommand_Command(Mid(section, 6), data));
}
else if (StartsWith(section, "exit:")) {
return (ProcessTextCommand_Exit(section, data));
}
else if (StartsWith(section, "once:")) {
return (ProcessTextCommand_Once(section, data));
}
else if (StartsWith(section, "notfirst:")) {
return (ProcessTextCommand_NotFirst(section, data));
}
else if (StartsWith(section, "random:")) {
return (ProcessTextCommand_Random(section, data));
}
else if (StartsWith(section, "rndalt:")) {
return (ProcessTextCommand_RandomAlias(section, data));
}
else if (StartsWith(section, "img:")) {
return (ProcessTextCommand_Img(section, data));
}
else if (StartsWith(section, "counter:")) {
return (ProcessTextCommand_Counter(Mid(section, 9), data));
}
else if (StartsWith(section, "select:")) {
return (ProcessTextCommand_Select(section, data));
}
else {
var dot = Instr(section, ".");
if (dot == 0) {
return ("{" + ProcessTextSection(section, data) + "}");
}
else {
var objectname = Left(section, dot - 1);
var attributename = Mid(section, dot + 1);
var object = GetObject(objectname);
if (object == null) {
return ("{" + ProcessTextSection(section, data) + "}");
}
else {
if (HasAttribute(object, attributename)) {
var type = overloadedFunctions.TypeOf(object, attributename);
switch (type) {
case "string":
case "int":
case "double":
return (ToString(GetAttribute(object, attributename)));
break;
case "boolean":
var result = GetAttribute(object, attributename);
if (result) {
return ("true");
}
else {
return ("false");
}
break;
default:
return ("(" + type + ")");
}
}
else {
return ("");
}
}
}
}
}
function ProcessTextCommand_Object(section, data)
{
var objectname = Mid(section, 8);
var text = "";
var colon = Instr(objectname, ":");
if (colon > 0) {
var text = Mid(objectname, colon + 1);
var objectname = Left(objectname, colon - 1);
}
var object = GetObject(objectname);
if (object == null) {
return ("{" + ProcessTextSection(section, data) + "}");
}
else {
if (LengthOf(text) == 0) {
var text = SafeXML(GetDisplayAlias(object));
}
if (_obj245.enablehyperlinks) {
var linkid = ProcessTextCommand_GetNextLinkId();
var colour = "";
if (HasString(object, "linkcolour") && GetUIOption("UseGameColours") == "true") {
var colour = object.linkcolour;
}
else {
var colour = GetLinkTextColour();
}
var style = GetCurrentTextFormat(colour);
return ("<a id=\"" + linkid + "\" style=\"" + style + "\" class=\"cmdlink elementmenu\" data-elementid=\"" + object.name + "\">" + text + "</a>");
}
else {
return (text);
}
}
}
function ProcessTextCommand_GetNextLinkId()
{
if (!(HasInt(_obj245, "lastlinkid"))) {
set(_obj245, "lastlinkid", 0);
}
set(_obj245, "lastlinkid", _obj245.lastlinkid + 1);
return ("verblink" + _obj245.lastlinkid);
}
function ProcessTextCommand_Command(command, data)
{
var text = command;
var colon = Instr(command, ":");
if (colon > 0) {
var text = Mid(command, colon + 1);
var command = Left(command, colon - 1);
}
var style = GetCurrentLinkTextFormat();
var candidates = NewObjectList();
var list_cmd = ScopeCommands();
var list_cmd_isarray = (Object.prototype.toString.call(list_cmd) === '[object Array]');
for (var iterator_cmd in list_cmd) {
var cmd = list_cmd_isarray ? list_cmd[iterator_cmd] : iterator_cmd;
if (list_cmd_isarray || iterator_cmd!="__dummyKey") { if (IsRegexMatch(cmd.pattern, command, cmd.name)) {
listadd (candidates, cmd);
} }
}
var elementid = "";
if (ListCount(candidates) == 1) {
var cmd = ObjectListItem(candidates, 0);
var elementid = cmd.name;
}
var linkid = ProcessTextCommand_GetNextLinkId();
var dataattrs = "";
if (_obj245.deactivatecommandlinks) {
var dataattrs = dataattrs + "data-deactivateonclick=\"true\" ";
}
var dataattrs = dataattrs + "data-command=\"" + command + "\"";
return ("<a id=\"" + linkid + "\" style=\"" + style + "\" class=\"cmdlink commandlink\" data-elementid=\"" + elementid + "\" " + dataattrs + ">" + ProcessTextSection(text, data) + "</a>");
}
function ProcessTextCommand_Exit(section, data)
{
var exitname = Mid(section, 6);
var exit = GetObject(exitname);
if (exit == null) {
return ("{" + ProcessTextSection(section, data) + "}");
}
else {
var verbs = GetDisplayVerbs(exit);
var alias = GetDisplayAlias(exit);
var command = LCase(StringListItem(verbs, 0)) + " " + alias;
var style = GetCurrentLinkTextFormat();
return ("<a style=\"" + style + "\" class=\"cmdlink exitlink\" data-elementid=\"" + exit.name + "\" data-command=\"" + command + "\">" + alias + "</a>");
}
}
function ProcessTextCommand_Once(section, data)
{
if (!(HasAttribute(_obj245, "textprocessor_seen"))) {
set(_obj245, "textprocessor_seen", NewDictionary());
}
var fulltext = StringDictionaryItem(data, "fulltext");
if (!(DictionaryContains(_obj245.textprocessor_seen, fulltext))) {
var onceSectionsInThisText = NewList();
dictionaryadd (_obj245.textprocessor_seen, fulltext, onceSectionsInThisText);
}
else {
var onceSectionsInThisText = DictionaryItem(_obj245.textprocessor_seen, fulltext);
}
if (!(ListContains(onceSectionsInThisText, section))) {
listadd (onceSectionsInThisText, section);
return (ProcessTextSection(Mid(section, 6), data));
}
else {
return ("");
}
}
function ProcessTextCommand_NotFirst(section, data)
{
if (!(HasAttribute(_obj245, "textprocessor_seen"))) {
set(_obj245, "textprocessor_seen", NewDictionary());
}
var fulltext = StringDictionaryItem(data, "fulltext");
if (!(DictionaryContains(_obj245.textprocessor_seen, fulltext))) {
var onceSectionsInThisText = NewList();
dictionaryadd (_obj245.textprocessor_seen, fulltext, onceSectionsInThisText);
}
else {
var onceSectionsInThisText = DictionaryItem(_obj245.textprocessor_seen, fulltext);
}
if (!(ListContains(onceSectionsInThisText, section))) {
listadd (onceSectionsInThisText, section);
return ("");
}
else {
return (ProcessTextSection(Mid(section, 10), data));
}
}
function ProcessTextCommand_Random(section, data)
{
var elements = Mid(section, 8);
var elementslist = Tsplit(elements);
var index = GetRandomInt(0, ListCount(elementslist) - 1);
return (ProcessTextSection(ListItem(elementslist, index), data));
}
function Tsplit(splittext)
{
var itemlist = NewStringList();
var sections = 0;
var startpos = 1;
for (var i = 1; i <= LengthOf(splittext); i++) {
if (Mid(splittext, i, 1) == "{") {
var sections = sections + 1;
}
if (Mid(splittext, i, 1) == "}") {
var sections = sections - 1;
}
if (Mid(splittext, i, 1) == ":" && 0 >= sections) {
var item = Mid(splittext, startpos, i - startpos);
listadd (itemlist, item);
var startpos = i + 1;
}
}
var item = Mid(splittext, startpos);
listadd (itemlist, item);
return (itemlist);
}
function ProcessTextCommand_RandomAlias(section, data)
{
var objectname = Mid(section, 8);
var object = GetObject(objectname);
if (object == null) {
return ("{" + ProcessTextSection(section, data) + "}");
}
else {
var count = ListCount(object.alt);
if (count > 0) {
return (ListItem(object.alt, GetRandomInt(0, count - 1)));
}
else {
return ("");
}
}
}
function ProcessTextCommand_If(section, data)
{
var command = Mid(section, 4);
var colon = Instr(command, ":");
if (colon == 0) {
return ("{if " + command + "}");
}
else {
var text = Mid(command, colon + 1);
var condition = Left(command, colon - 1);
var operator = Instr(condition, "<=");
if (operator != 0) {
var operatorlength = 2;
}
if (operator == 0) {
var operator = Instr(condition, ">=");
if (operator != 0) {
var operatorlength = 2;
}
}
if (operator == 0) {
var operator = Instr(condition, "<>");
if (operator != 0) {
var operatorlength = 2;
}
}
if (operator == 0) {
var operator = Instr(condition, "<");
if (operator != 0) {
var operatorlength = 1;
}
}
if (operator == 0) {
var operator = Instr(condition, ">");
if (operator != 0) {
var operatorlength = 1;
}
}
if (operator == 0) {
var operator = Instr(condition, "=");
if (operator != 0) {
var operatorlength = 1;
}
}
if (operator == 0) {
var checkfor = true;
if (StartsWith(condition, "not ")) {
var checkfor = false;
var condition = Mid(condition, 5);
}
var dot = Instr(condition, ".");
if (dot == 0) {
var result = GetBoolean(_obj245, condition);
}
else {
var objectname = Left(condition, dot - 1);
var attributename = Mid(condition, dot + 1);
var object = GetObject(objectname);
if (object == null) {
var result = false;
}
else {
var result = GetBoolean(object, attributename);
}
}
if (result == checkfor) {
return (ProcessTextSection(text, data));
}
else {
return ("");
}
}
else {
var lhs = Left(condition, operator - 1);
var rhs = Mid(condition, operator + operatorlength);
var op = Mid(condition, operator, operatorlength);
var dot = Instr(lhs, ".");
if (dot == 0) {
var objectname = "";
var attributename = "";
if (HasInt(_obj245, lhs)) {
var objectname = "game";
var attributename = lhs;
}
else {
return ("{if " + command + "}");
}
}
else {
var objectname = Left(lhs, dot - 1);
var attributename = Mid(lhs, dot + 1);
}
var object = GetObject(objectname);
if (object == null) {
return ("{if " + command + "}");
}
else {
var value = GetAttribute(object, attributename);
if (overloadedFunctions.TypeOf(value) == "object") {
var value = value.name;
}
if (op == "=") {
if (ToString(value) == rhs) {
return (ProcessTextSection(text, data));
}
else {
return ("");
}
}
else if (op == "<>") {
if (!(ToString(value) == rhs)) {
return (ProcessTextSection(text, data));
}
else {
return ("");
}
}
else if (op == ">") {
if (ToDouble(ToString(value)) > ToDouble(rhs)) {
return (ProcessTextSection(text, data));
}
else {
return ("");
}
}
else if (op == "<") {
if (ToDouble(ToString(value)) < ToDouble(rhs)) {
return (ProcessTextSection(text, data));
}
else {
return ("");
}
}
else if (op == ">=") {
if (ToDouble(ToString(value)) >= ToDouble(rhs)) {
return (ProcessTextSection(text, data));
}
else {
return ("");
}
}
else if (op == "<=") {
if (ToDouble(ToString(value)) <= ToDouble(rhs)) {
return (ProcessTextSection(text, data));
}
else {
return ("");
}
}
}
}
}
}
function ProcessTextCommand_Img(section, data)
{
var filename = Mid(section, 5);
return ("<img src=\"" + GetFileURL(filename) + "\" />");
}
function ProcessTextCommand_Counter(section, data)
{
if (HasAttribute(_obj245, section)) {
return (ToString(GetAttribute(_obj245, section)));
}
else {
return ("0");
}
}
function ProcessTextCommand_Select(section, data)
{
var elements = Mid(section, 8);
var elementslist = Split(elements, ":");
var objectandatt = StringListItem (elementslist, 0);
listremove (elementslist, objectandatt);
var objectandattlist = Split(objectandatt, ".");
if (!(ListCount (objectandattlist) == 2)) {
return ("{" + ProcessTextSection(section, data) + "}");
}
else {
var object = GetObject(StringListItem(objectandattlist, 0));
if (object == null) {
return ("{" + ProcessTextSection(section, data) + "}");
}
else if (!(HasInt (object, StringListItem(objectandattlist, 1)))) {
return ("{" + ProcessTextSection(section, data) + "}");
}
else {
var index = GetInt(object, StringListItem(objectandattlist, 1));
if ((0 > index) || (index >= Listcount(elementslist))) {
return ("{" + ProcessTextSection(section, data) + "}");
}
else {
return (ProcessTextSection(ListItem(elementslist, index), data));
}
}
}
}
function SetFramePicture(filename)
{
request ("SetPanelContents", "<img src=\"" + GetFileURL(filename) + "\" onload=\"setPanelHeight()\"/>");
set(_obj245, "panelcontents", filename);
}
function ClearFramePicture()
{
request ("SetPanelContents", "");
set(_obj245, "panelcontents", null);
}
function ClearScreen()
{
request ("ClearScreen", "");
}
function SetForegroundColour(colour)
{
request ("Foreground", colour);
set(_obj245, "defaultforeground", colour);
}
function SetBackgroundColour(colour)
{
request ("Background", colour);
set(_obj245, "defaultbackground", colour);
}
function SetFontName(font)
{
set(_obj245, "defaultfont", font);
set(_obj245, "defaultwebfont", "");
}
function SetWebFontName(font)
{
AddExternalStylesheet ("https://fonts.googleapis.com/css?family=" + Replace(font, " ", "+"));
set(_obj245, "defaultwebfont", font);
}
function AddExternalStylesheet(stylesheet)
{
if (_obj245.externalstylesheets == null) {
set(_obj245, "externalstylesheets", NewStringList());
}
if (!(ListContains(_obj245.externalstylesheets, stylesheet))) {
listadd (_obj245.externalstylesheets, stylesheet);
addExternalStylesheet (stylesheet)
}
}
function SetFontSize(size)
{
set(_obj245, "defaultfontsize", size);
}
function PrintCentered(text)
{
SetAlignment ("center");
OutputText (text);
SetAlignment ("left");
}
function ShowYouTube(id)
{
AddYouTube (id)
}
function ShowVimeo(id)
{
AddVimeo (id)
}
function WaitForKeyPress()
{
request ("Wait", "");
}
function DisplayHttpLink(text, url, https)
{
var pos = Instr(url, "://");
if (pos > 0) {
var url = Mid(url, pos + 3);
}
if (https) {
var url = "https://" + url;
}
else {
var url = "http://" + url;
}
OutputText ("<a style=\"" + GetCurrentLinkTextFormat() + "\" href=\"" + url + "\">" + text + "</a>");
}
function DisplayMailtoLink(text, url)
{
if (Instr(url, "mailto:") == 0) {
var url = "mailto:" + url;
}
OutputText ("<a style=\"" + GetCurrentLinkTextFormat() + "\" href=\"" + url + "\">" + text + "</a>");
}
function CommandLink(cmd, text)
{
return ("{command:" + cmd + ":" + text + "}");
}
function Log(text)
{
request ("Log", text);
}
function SetBackgroundImage(filename)
{
SetBackgroundImage (GetFileURL(filename))
set(_obj245, "backgroundimage", filename);
}
function SetBackgroundOpacity(opacity)
{
SetBackgroundOpacity (opacity)
set(_obj245, "backgroundopacity", opacity);
set(_obj245, "setbackgroundopacity", true);
}
function DisplayList(list, numbers)
{
if (numbers) {
var result = "<ol>";
}
else {
var result = "<ul>";
}
var list_isarray = (Object.prototype.toString.call(list) === '[object Array]');
for (var iterator_item in list) {
var item = list_isarray ? list[iterator_item] : iterator_item;
if (list_isarray || iterator_item!="__dummyKey") { var result = result + "<li>" + item + "</li>"; }
}
if (numbers) {
var result = result + "</ol>";
}
else {
var result = result + "</ul>";
}
OutputText (result);
}
function SetAlignment(align)
{
createNewDiv (align)
}
function GetCurrentFontFamily()
{
if (_obj245.defaultwebfont == null) {
return (_obj245.defaultfont);
}
else {
if (_obj245.defaultwebfont == "") {
return (_obj245.defaultfont);
}
else {
return ("'" + _obj245.defaultwebfont + "', " + _obj245.defaultfont);
}
}
}
function Grid_SetScale(scale)
{
Grid_SetScale (scale)
}
function Grid_CalculateMapCoordinates(room, playerobject)
{
if (room.parent != null) {
if (room.grid_parent_offset_auto) {
set(room, "grid_parent_offset_x", (room.parent.grid_width - room.grid_width) /2.0);
set(room, "grid_parent_offset_y", (room.parent.grid_length - room.grid_length) /2.0);
}
Grid_SetGridCoordinateForPlayer (playerobject, room.parent, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") - room.grid_parent_offset_x);
Grid_SetGridCoordinateForPlayer (playerobject, room.parent, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") - room.grid_parent_offset_y);
Grid_SetGridCoordinateForPlayer (playerobject, room.parent, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"));
set(room.parent, "grid_render", true);
Grid_CalculateMapCoordinates (room.parent, playerobject);
}
var list_exit = AllExits();
var list_exit_isarray = (Object.prototype.toString.call(list_exit) === '[object Array]');
for (var iterator_exit in list_exit) {
var exit = list_exit_isarray ? list_exit[iterator_exit] : iterator_exit;
if (list_exit_isarray || iterator_exit!="__dummyKey") { if (exit.parent == room && !(GetBoolean(exit, "lookonly"))) {
if (DoesInherit(exit, "northdirection")) {
Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 + exit.grid_offset_x);
Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + exit.grid_offset_y);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width/2.0);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length) - exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"));
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x"));
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.grid_length);
set(exit, "grid_render", true);
set(exit.to, "grid_render", true);
}
else if (DoesInherit(exit, "eastdirection")) {
Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width + exit.grid_offset_x);
Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 + exit.grid_offset_y);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length/2.0);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"));
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y"));
set(exit, "grid_render", true);
set(exit.to, "grid_render", true);
}
else if (DoesInherit(exit, "southdirection")) {
Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 + exit.grid_offset_x);
Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length + exit.grid_offset_y);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width/2.0);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"));
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x"));
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length);
set(exit, "grid_render", true);
set(exit.to, "grid_render", true);
}
else if (DoesInherit(exit, "westdirection")) {
Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + exit.grid_offset_x);
Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 + exit.grid_offset_y);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width) - exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length/2.0);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"));
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y"));
set(exit, "grid_render", true);
set(exit.to, "grid_render", true);
}
else if (DoesInherit(exit, "northwestdirection")) {
Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + exit.grid_offset_x);
Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + exit.grid_offset_y);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width) - exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length) - exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"));
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.grid_length);
set(exit, "grid_render", true);
set(exit.to, "grid_render", true);
}
else if (DoesInherit(exit, "northeastdirection")) {
Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width + exit.grid_offset_x);
Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + exit.grid_offset_y);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length) - exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"));
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.grid_length);
set(exit, "grid_render", true);
set(exit.to, "grid_render", true);
}
else if (DoesInherit(exit, "southwestdirection")) {
Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + exit.grid_offset_x);
Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length + exit.grid_offset_y);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width) - exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"));
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length);
set(exit, "grid_render", true);
set(exit.to, "grid_render", true);
}
else if (DoesInherit(exit, "southeastdirection")) {
Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width + exit.grid_offset_x);
Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length + exit.grid_offset_y);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"));
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length);
Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length);
set(exit, "grid_render", true);
set(exit.to, "grid_render", true);
}
else if (DoesInherit(exit, "updirection")) {
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 - exit.to.grid_width/2.0 + exit.grid_offset_x);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 - exit.to.grid_length/2.0 + exit.grid_offset_y);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z") + exit.grid_length);
set(exit, "grid_render", false);
set(exit.to, "grid_render", true);
}
else if (DoesInherit(exit, "downdirection")) {
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 - exit.to.grid_width/2.0 + exit.grid_offset_x);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 - exit.to.grid_length/2.0 + exit.grid_offset_y);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z") - exit.grid_length);
set(exit, "grid_render", false);
set(exit.to, "grid_render", true);
}
else if (DoesInherit(exit, "indirection") || DoesInherit(exit, "outdirection")) {
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 - exit.to.grid_width/2.0 + exit.grid_offset_x);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 - exit.to.grid_length/2.0 + exit.grid_offset_y);
Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"));
set(exit, "grid_render", false);
set(exit.to, "grid_render", true);
}
} }
}
}
function Grid_DrawPlayerInRoom(room)
{
if (room.grid_render) {
Grid_DrawRoom (room, false, _obj245.pov);
var player_x = Grid_GetGridCoordinateForPlayer(_obj245.pov, room, "x") + room.grid_width/2.0;
var player_y = Grid_GetGridCoordinateForPlayer(_obj245.pov, room, "y") + room.grid_length/2.0;
var player_z = Grid_GetGridCoordinateForPlayer(_obj245.pov, room, "z");
Grid_DrawPlayer (player_x, player_y, player_z, 5, "black", 2, "yellow")
}
}
function Grid_DrawRoom(room, redraw, playerobject)
{
if (room.grid_render) {
if (redraw || !(Grid_GetRoomBooleanForPlayer(playerobject, room, "grid_isdrawn"))) {
if (room.parent != null) {
Grid_DrawRoom (room.parent, redraw, playerobject);
}
Grid_DrawBox (Grid_GetGridCoordinateForPlayer(_obj245.pov, room, "x"), Grid_GetGridCoordinateForPlayer(_obj245.pov, room, "y"), Grid_GetGridCoordinateForPlayer(_obj245.pov, room, "z"), room.grid_width, room.grid_length, room.grid_border, room.grid_borderwidth, room.grid_fill, room.grid_bordersides)
if (LengthOf(room.grid_label) > 0) {
var label_x = Grid_GetGridCoordinateForPlayer(_obj245.pov, room, "x") + room.grid_width/2.0;
var label_y = (Grid_GetGridCoordinateForPlayer(_obj245.pov, room, "y") + room.grid_length/2.0) - 0.5;
Grid_DrawLabel (label_x, label_y, Grid_GetGridCoordinateForPlayer(_obj245.pov, room, "z"), room.grid_label)
}
var list_exit = AllExits();
var list_exit_isarray = (Object.prototype.toString.call(list_exit) === '[object Array]');
for (var iterator_exit in list_exit) {
var exit = list_exit_isarray ? list_exit[iterator_exit] : iterator_exit;
if (list_exit_isarray || iterator_exit!="__dummyKey") { if (exit.grid_render && exit.parent == room && exit.grid_length > 0) {
Grid_DrawLine (Grid_GetGridCoordinateForPlayer(_obj245.pov, exit, "x"), Grid_GetGridCoordinateForPlayer(_obj245.pov, exit, "y"), Grid_GetGridCoordinateForPlayer(_obj245.pov, exit, "end_x"), Grid_GetGridCoordinateForPlayer(_obj245.pov, exit, "end_y"), "black", 1);
} }
}
Grid_SetRoomBooleanForPlayer (playerobject, room, "grid_isdrawn", true);
}
}
}
function Grid_ShowCustomLayer(visible)
{
if (visible) {
Grid_ShowCustomLayer (true)
}
else {
Grid_ShowCustomLayer (false)
}
}
function Grid_ClearCustomLayer()
{
Grid_ClearCustomLayer ()
}
function Grid_DrawLine(x1, y1, x2, y2, border, borderWidth)
{
Grid_DrawLine (x1, y1, x2, y2, border, borderWidth)
}
function Grid_DrawArrow(id, x1, y1, x2, y2, border, borderWidth)
{
Grid_DrawArrow (id, x1, y1, x2, y2, border, borderWidth)
}
function Grid_DrawGridLines(x1, y1, x2, y2, border)
{
Grid_DrawGridLines (x1, y1, x2, y2, border)
}
function Grid_SetCentre(x, y)
{
Grid_SetCentre (x, y)
}
function Grid_DrawSquare(id, x, y, width, height, text, fill)
{
Grid_DrawSquare (id, x, y, width, height, text, fill)
}
function Grid_LoadSvg(data, id)
{
Grid_LoadSvg (data, id)
}
function Grid_DrawSvg(id, symbolid, x, y, width, height)
{
Grid_DrawSvg (id, symbolid, x, y, width, height)
}
function Grid_DrawImage(id, url, x, y, width, height)
{
Grid_DrawImage (id, url, x, y, width, height)
}
function Grid_AddNewShapePoint(x, y)
{
Grid_AddNewShapePoint (x, y)
}
function Grid_DrawShape(id, border, fill, opacity)
{
Grid_DrawShape (id, border, fill, opacity)
}
function JS_GridSquareClick(parameterstring)
{
var parameters = Split(parameterstring, ";");
var x = ToInt(StringListItem(parameters, 0));
var y = ToInt(StringListItem(parameters, 1));
GridSquareClick (x, y);
}
function GridSquareClick(x, y)
{

}
function Grid_Redraw()
{
var list_object = AllObjects();
var list_object_isarray = (Object.prototype.toString.call(list_object) === '[object Array]');
for (var iterator_object in list_object) {
var object = list_object_isarray ? list_object[iterator_object] : iterator_object;
if (list_object_isarray || iterator_object!="__dummyKey") { if (Grid_GetRoomBooleanForPlayer(_obj245.pov, object, "grid_isdrawn")) {
Grid_DrawRoom (object, true, _obj245.pov);
} }
}
}
function Grid_SetGridCoordinateForPlayer(playerobject, room, coordinate, value)
{
var coordinates = Grid_GetPlayerCoordinatesForRoom(playerobject, room);
if (DictionaryContains(coordinates, coordinate)) {
dictionaryremove (coordinates, coordinate);
}
dictionaryadd (coordinates, coordinate, value * 1.0);
}
function Grid_GetGridCoordinateForPlayer(playerobject, room, coordinate)
{
var coordinates = Grid_GetPlayerCoordinatesForRoom(playerobject, room);
return (DictionaryItem(coordinates, coordinate));
}
function Grid_SetRoomBooleanForPlayer(playerobject, room, coordinate, value)
{
var datadictionary = Grid_GetPlayerCoordinatesForRoom(playerobject, room);
if (DictionaryContains(datadictionary, coordinate)) {
dictionaryremove (datadictionary, coordinate);
}
dictionaryadd (datadictionary, coordinate, value);
}
function Grid_GetRoomBooleanForPlayer(playerobject, room, attribute)
{
var coordinatedata = Grid_GetPlayerCoordinateDictionary(playerobject);
if (!(DictionaryContains(coordinatedata, room.name))) {
return (false);
}
else {
var datadictionary = Grid_GetPlayerCoordinatesForRoom(playerobject, room);
if (DictionaryContains(datadictionary, attribute)) {
return (DictionaryItem(datadictionary, attribute));
}
else {
return (false);
}
}
}
function Grid_GetPlayerCoordinateDictionary(playerobject)
{
if (HasAttribute(playerobject, "grid_coordinates_delegate")) {
return (Grid_GetPlayerCoordinateDictionary(playerobject.grid_coordinates_delegate));
}
else {
if (!(HasAttribute(playerobject, "grid_coordinates"))) {
set(playerobject, "grid_coordinates", NewDictionary());
Grid_SetGridCoordinateForPlayer (playerobject, playerobject.parent, "x", 0);
Grid_SetGridCoordinateForPlayer (playerobject, playerobject.parent, "y", 0);
Grid_SetGridCoordinateForPlayer (playerobject, playerobject.parent, "z", 0);
set(playerobject.parent, "grid_render", true);
Grid_CalculateMapCoordinates (playerobject.parent, playerobject);
}
return (playerobject.grid_coordinates);
}
}
function Grid_GetPlayerCoordinatesForRoom(playerobject, room)
{
var coordinatedata = Grid_GetPlayerCoordinateDictionary(playerobject);
if (!(DictionaryContains(coordinatedata, room.name))) {
dictionaryadd (coordinatedata, room.name, NewDictionary());
}
return (DictionaryItem(coordinatedata, room.name));
}
function MergePOVCoordinates()
{
var coordinateowner = GetCoordinateOwner(_obj245.pov);
var list_obj = GetDirectChildren(_obj245.pov.parent);
var list_obj_isarray = (Object.prototype.toString.call(list_obj) === '[object Array]');
for (var iterator_obj in list_obj) {
var obj = list_obj_isarray ? list_obj[iterator_obj] : iterator_obj;
if (list_obj_isarray || iterator_obj!="__dummyKey") { if (obj != _obj245.pov && HasAttribute(obj, "grid_coordinates")) {
var objcoordinateowner = GetCoordinateOwner(obj);
if (coordinateowner != objcoordinateowner) {
MapPOVCoordinates (objcoordinateowner, coordinateowner);
}
} }
}
}
function GetCoordinateOwner(playerobject)
{
if (HasAttribute(playerobject, "grid_coordinates_delegate")) {
return (GetCoordinateOwner(playerobject.grid_coordinates_delegate));
}
else {
return (playerobject);
}
}
function MapPOVCoordinates(source, target)
{
var sourcecoordinates = Grid_GetPlayerCoordinateDictionary(source);
var targetcoordinates = Grid_GetPlayerCoordinateDictionary(target);
var xoffset = Grid_GetGridCoordinateForPlayer(target, _obj245.pov.parent, "x") - Grid_GetGridCoordinateForPlayer(source, _obj245.pov.parent, "x");
var yoffset = Grid_GetGridCoordinateForPlayer(target, _obj245.pov.parent, "y") - Grid_GetGridCoordinateForPlayer(source, _obj245.pov.parent, "y");
var zoffset = Grid_GetGridCoordinateForPlayer(target, _obj245.pov.parent, "z") - Grid_GetGridCoordinateForPlayer(source, _obj245.pov.parent, "z");
var sourcecoordinates_isarray = (Object.prototype.toString.call(sourcecoordinates) === '[object Array]');
for (var iterator_roomname in sourcecoordinates) {
var roomname = sourcecoordinates_isarray ? sourcecoordinates[iterator_roomname] : iterator_roomname;
if (sourcecoordinates_isarray || iterator_roomname!="__dummyKey") { var coordinatedata = DictionaryItem(sourcecoordinates, roomname);
if (!(DictionaryContains(targetcoordinates, roomname))) {
var newroomdata = NewDictionary();
dictionaryadd (targetcoordinates, roomname, newroomdata);
MapPOVCoordinate (coordinatedata, newroomdata, "x", xoffset);
MapPOVCoordinate (coordinatedata, newroomdata, "y", yoffset);
MapPOVCoordinate (coordinatedata, newroomdata, "z", zoffset);
MapPOVCoordinate (coordinatedata, newroomdata, "end_x", xoffset);
MapPOVCoordinate (coordinatedata, newroomdata, "end_y", yoffset);
}
else {
var newroomdata = DictionaryItem(targetcoordinates, roomname);
}
if (DictionaryContains(coordinatedata, "grid_isdrawn")) {
if (DictionaryContains(newroomdata, "grid_isdrawn")) {
dictionaryremove (newroomdata, "grid_isdrawn");
}
dictionaryadd (newroomdata, "grid_isdrawn", DictionaryItem(coordinatedata, "grid_isdrawn"));
} }
}
set(source, "grid_coordinates_delegate", target);
Grid_Redraw();
Grid_DrawPlayerInRoom (_obj245.pov.parent);
}
function MapPOVCoordinate(sourcedata, targetdata, name, offset)
{
if (DictionaryContains(sourcedata, name)) {
var value = DictionaryItem(sourcedata, name);
dictionaryadd (targetdata, name, value + offset);
}
}
function DiceRoll(dicetype)
{
var dpos = Instr(dicetype, "d");
if (dpos == 0) {
error ("Invalid dice type: " + dicetype);
}
else {
var number_string = Left(dicetype, dpos - 1);
var sides_string = Mid(dicetype, dpos + 1);
if (!((IsNumeric(number_string) )&& IsNumeric(sides_string))) {
error ("Invalid dice type: " + dicetype);
}
else {
var number = ToInt(number_string);
var sides = ToInt(sides_string);
var total = 0;
for (var i = 1; i <= number; i++) {
var total = total + GetRandomInt(1, sides);
}
return (total);
}
}
}
function TextFX_Typewriter(text, speed)
{
TextFX_Typewriter_Internal (text, speed, GetCurrentFontFamily(), _obj245.defaultforeground, _obj245.defaultfontsize);
}
function TextFX_Typewriter_Internal(text, speed, font, color, size)
{
TextFX.Typewriter (text, speed, font, color, size)
}
function TextFX_Unscramble(text, speed, reveal)
{
TextFX_Unscramble_Internal (text, speed, reveal, GetCurrentFontFamily(), _obj245.defaultforeground, _obj245.defaultfontsize);
}
function TextFX_Unscramble_Internal(text, speed, reveal, font, color, size)
{
TextFX.Unscramble (text, speed, reveal, font, color, size)
}
function InitInterface()
{
if (_obj245.setcustomwidth) {
setGameWidth (_obj245.customwidth)
}
if (!(_obj245.showborder)) {
hideBorder ()
}
if (_obj245.setcustompadding) {
setGamePadding (_obj245.custompaddingtop, _obj245.custompaddingbottom, _obj245.custompaddingleft, _obj245.custompaddingright)
}
if (_obj245.externalstylesheets != null) {
var _obj245_externalstylesheets_isarray = (Object.prototype.toString.call(_obj245.externalstylesheets) === '[object Array]');
for (var iterator_stylesheet in _obj245.externalstylesheets) {
var stylesheet = _obj245_externalstylesheets_isarray ? _obj245.externalstylesheets[iterator_stylesheet] : iterator_stylesheet;
if (_obj245_externalstylesheets_isarray || iterator_stylesheet!="__dummyKey") { addExternalStylesheet (stylesheet) }
}
}
if (_obj245.setbackgroundopacity) {
SetBackgroundOpacity (_obj245.backgroundopacity);
}
request ("Background", _obj245.defaultbackground);
request ("Foreground", _obj245.defaultforeground);
request ("LinkForeground", _obj245.defaultlinkforeground);
if (LengthOf(_obj245.backgroundimage) > 0) {
SetBackgroundImage (_obj245.backgroundimage);
}
request ("SetCompassDirections", Join(_obj245.compassdirections, ";"));
request ("SetInterfaceString", "InventoryLabel=Inventory");
request ("SetInterfaceString", "StatusLabel=Status");
request ("SetInterfaceString", "PlacesObjectsLabel=Places and Objects");
request ("SetInterfaceString", "CompassLabel=Compass");
request ("SetInterfaceString", "InButtonLabel=in");
request ("SetInterfaceString", "OutButtonLabel=out");
request ("SetInterfaceString", "EmptyListLabel=(empty)");
request ("SetInterfaceString", "NothingSelectedLabel=(nothing selected)");
request ("SetInterfaceString", "TypeHereLabel=Type here...");
request ("SetInterfaceString", "ContinueLabel=Continue...");
SetMenuBackground (_obj245.menubackground)
SetMenuForeground (_obj245.menuforeground)
SetMenuHoverBackground (_obj245.menuhoverbackground)
SetMenuHoverForeground (_obj245.menuhoverforeground)
SetMenuFontName (_obj245.menufont)
SetMenuFontSize (_obj245.menufontsize + "pt")
if (!(_obj245.underlinehyperlinks)) {
TurnOffHyperlinksUnderline ()
}
if (_obj245.showpanes) {
request ("Show", "Panes");
}
else {
request ("Hide", "Panes");
}
ResetCommandBarFormat();
if (_obj245.showcommandbar) {
request ("Show", "Command");
}
else {
request ("Hide", "Command");
}
if (_obj245.showlocation) {
request ("Show", "Location");
}
else {
request ("Hide", "Location");
}
if (HasString(_obj245, "panelcontents")) {
SetFramePicture (_obj245.panelcontents);
}
if (_obj245.gridmap) {
ShowGrid (_obj245.mapsize)
Grid_SetScale (_obj245.mapscale);
if (_obj245.pov != null) {
if (_obj245.pov.parent != null) {
Grid_Redraw();
Grid_DrawPlayerInRoom (_obj245.pov.parent);
}
}
}
InitUserInterface();
}
function InitUserInterface()
{

}
function StartGame()
{
StartTurnOutputSection();
if (_obj245.showtitle) {
JsStartOutputSection ("title")
PrintCentered ("<span style=\"font-size:260%\">" + _obj245.gamename + "</span>");
if (_obj245.subtitle != null) {
if (LengthOf(_obj245.subtitle) > 0) {
PrintCentered ("<span style=\"font-size:130%\">" + _obj245.subtitle + "</span>");
}
}
if (_obj245.author != null) {
if (LengthOf(_obj245.author) > 0) {
PrintCentered ("<br/><span style=\"font-size:140%\">by " + _obj245.author + "</span>");
}
}
OutputText ("<div style=\"margin-top:20px\"></div>");
JsEndOutputSection ("title")
}
if (_obj245.pov == null) {
var playerObject = GetObject("player");
if (playerObject == null) {
if (ListCount(AllObjects()) > 0) {
var firstRoom = ObjectListItem(AllObjects(), 0);
}
else {
create ("room");
var firstRoom = room;
}
create ("player");
set(_obj358, "parent", firstRoom);
}
set(_obj245, "pov", _obj358);
}
else {
InitPOV (null, _obj245.pov);
}
InitStatusAttributes();
UpdateStatusAttributes();
InitVerbsList();
if (HasScript(_obj245, "start")) {
runscriptattribute2 (_obj245, "start");
}
UpdateStatusAttributes();
UpdateObjectLinks();
on_ready (function() { if (_obj245.gridmap) {
Grid_DrawPlayerInRoom (_obj245.pov.parent);
}
if (_obj245.displayroomdescriptiononstart) {
OnEnterRoom (null);
}
UpdateStatusAttributes();
UpdateObjectLinks(); });
}
function RandomChance(percentile)
{
return (GetRandomInt(1,100) <= percentile);
}
function SetObjectFlagOn(object, flag)
{
set (object, flag, true);
}
function SetObjectFlagOff(object, flag)
{
set (object, flag, false);
}
function IncreaseObjectCounter(object, counter)
{
if (!(HasInt(object, counter))) {
set (object, counter, 0);
}
set (object, counter, GetInt(object, counter) + 1);
}
function DecreaseObjectCounter(object, counter)
{
if (!(HasInt(object, counter))) {
set (object, counter, 0);
}
set (object, counter, GetInt(object, counter) - 1);
}
function IsSwitchedOn(object)
{
return (GetBoolean(object, "switchedon"));
}
function AddToInventory(object)
{
set(object, "parent", _obj245.pov);
}
function MoveObject(object, parent)
{
set(object, "parent", parent);
}
function MoveObjectHere(object)
{
set(object, "parent", _obj245.pov.parent);
}
function RemoveObject(object)
{
set(object, "parent", null);
}
function MakeObjectVisible(object)
{
set(object, "visible", true);
}
function MakeObjectInvisible(object)
{
set(object, "visible", false);
}
function MakeExitVisible(object)
{
set(object, "visible", true);
}
function MakeExitInvisible(object)
{
set(object, "visible", false);
}
function HelperOpenObject(object)
{
set(object, "isopen", true);
}
function HelperCloseObject(object)
{
set(object, "isopen", false);
}
function CloneObject(object)
{
var newobject = Clone(object);
if (!(HasString(object, "alias"))) {
set(newobject, "alias", object.name);
}
return (newobject);
}
function CloneObjectAndMove(object, newparent)
{
var newobject = CloneObject(object);
set(newobject, "parent", newparent);
return (newobject);
}
function LockExit(exit)
{
set(exit, "locked", true);
}
function UnlockExit(exit)
{
set(exit, "locked", false);
}
function SwitchOn(object)
{
set(object, "switchedon", true);
}
function SwitchOff(object)
{
set(object, "switchedon", false);
}
function SetDark(object)
{
set(object, "dark", true);
}
function SetLight(object)
{
set(object, "dark", false);
}
function SetObjectLightstrength(object, strength)
{
if (LengthOf(strength) == 0) {
set(object, "lightsource", false);
}
else {
set(object, "lightsource", true);
}
set(object, "lightstrength", strength);
}
function SetExitLightstrength(exit, strength)
{
if (LengthOf(strength) == 0) {
set(exit, "lightsource", false);
}
else {
set(exit, "lightsource", true);
}
set(exit, "lightstrength", strength);
}
function ChangePOV(object)
{
if (_obj245.pov != object) {
set(_obj245, "pov", object);
if (_obj245.gridmap) {
Grid_ClearAllLayers ()
Grid_Redraw();
}
OnEnterRoom (null);
}
}
function InitPOV(oldPOV, newPOV)
{
if (oldPOV != null) {
set(oldPOV, "alias", oldPOV.external_alias);
set(oldPOV, "alt", oldPOV.external_alt);
set(oldPOV, "look", oldPOV.external_look);
set(oldPOV, "gender", oldPOV.external_gender);
set(oldPOV, "article", oldPOV.external_article);
}
set(newPOV, "external_alias", newPOV.alias);
set(newPOV, "external_alt", newPOV.alt);
set(newPOV, "external_look", newPOV.look);
set(newPOV, "external_gender", newPOV.gender);
set(newPOV, "external_article", newPOV.article);
if (!(GetBoolean(newPOV, "pov_used"))) {
if (newPOV.alt == null) {
set(newPOV, "pov_alt", newPOV.pov_alt);
}
else {
set(newPOV, "pov_alt", ListCombine(newPOV.alt, newPOV.pov_alt));
}
if (newPOV.alias != null) {
listadd (newPOV.pov_alt, newPOV.alias);
}
if (_obj245.showhealth) {
set(newPOV, "health", 100);
set(newPOV, "changedhealth", function() { if (this.health > 100) {
set(this, "health", 100);
}
else if (this.health == 0) {
if (HasScript(_obj245, "onhealthzero")) {
runscriptattribute2 (_obj245, "onhealthzero");
}
}
else if (this.health < 0) {
set(this, "health", 0);
} });
}
set(newPOV, "pov_used", true);
}
set(newPOV, "alias", newPOV.pov_alias);
set(newPOV, "alt", newPOV.pov_alt);
set(newPOV, "look", newPOV.pov_look);
set(newPOV, "gender", newPOV.pov_gender);
set(newPOV, "article", newPOV.pov_article);
}
function InitVerbsList()
{
set(_obj245, "verbattributes", NewStringList());
set(_obj245, "verbattributeslookup", NewObjectDictionary());
var list_cmd = AllCommands();
var list_cmd_isarray = (Object.prototype.toString.call(list_cmd) === '[object Array]');
for (var iterator_cmd in list_cmd) {
var cmd = list_cmd_isarray ? list_cmd[iterator_cmd] : iterator_cmd;
if (list_cmd_isarray || iterator_cmd!="__dummyKey") { if (HasString(cmd, "property")) {
listadd (_obj245.verbattributes, cmd.property);
dictionaryadd (_obj245.verbattributeslookup, cmd.property, cmd);
} }
}
}
function GetDisplayVerbs(object)
{
if (Contains(_obj245.pov, object)) {
var baselist = object.inventoryverbs;
}
else {
var baselist = object.displayverbs;
}
if (!(_obj245.autodisplayverbs )|| GetBoolean(object, "usestandardverblist")) {
return (baselist);
}
else {
if (HasAttribute(object, "generatedverbslist")) {
var verbs = object.generatedverbslist;
}
else {
var verbs = NewStringList();
var list_attr = GetAttributeNames(object, false);
var list_attr_isarray = (Object.prototype.toString.call(list_attr) === '[object Array]');
for (var iterator_attr in list_attr) {
var attr = list_attr_isarray ? list_attr[iterator_attr] : iterator_attr;
if (list_attr_isarray || iterator_attr!="__dummyKey") { if (ListContains(_obj245.verbattributes, attr)) {
var cmd = ObjectDictionaryItem(_obj245.verbattributeslookup, attr);
if (HasString(cmd, "displayverb")) {
var displayverb = CapFirst(cmd.displayverb);
}
else {
var displayverb = CapFirst(attr);
}
if (!(ListContains(baselist, displayverb))) {
listadd (verbs, displayverb);
}
} }
}
set(object, "generatedverbslist", verbs);
}
if (GetBoolean(object, "useindividualverblist")) {
return (verbs);
}
else {
return (ListCombine(baselist, verbs));
}
}
}
function ShowMenu(caption, options, allowCancel, callback)
{
var outputsection = StartNewOutputSection();
OutputText (caption);
var count = 0;
set(_obj245, "menuoptionskeys", NewStringList());
var options_isarray = (Object.prototype.toString.call(options) === '[object Array]');
for (var iterator_option in options) {
var option = options_isarray ? options[iterator_option] : iterator_option;
if (options_isarray || iterator_option!="__dummyKey") { listadd (_obj245.menuoptionskeys, option);
var count = count + 1;
if (overloadedFunctions.TypeOf(options) == "stringlist") {
var optionText = option;
}
else {
var optionText = StringDictionaryItem(options, option);
}
OutputText (count + ": <a class=\"cmdlink\" style=\"" + GetCurrentLinkTextFormat() + "\" onclick=\"ASLEvent('ShowMenuResponse','" + option + "')\">" + optionText + "</a>"); }
}
EndOutputSection (outputsection);
set(_obj245, "menuoptions", options);
set(_obj245, "menuallowcancel", allowCancel);
set(_obj245, "menucallback", callback);
set(_obj245, "menuoutputsection", outputsection);
}
function ShowMenuResponse(option)
{
if (_obj245.menucallback == null) {
error ("Unexpected menu response");
}
else {
var parameters = NewStringDictionary();
dictionaryadd (parameters, "result", option);
var script = _obj245.menucallback;
ClearMenu();
invoke (script, parameters);
}
}
function HandleMenuTextResponse(input)
{
var handled = false;
if (IsInt(input)) {
var number = ToInt(input);
if (number > 0 && number <= ListCount(_obj245.menuoptionskeys)) {
var handled = true;
ShowMenuResponse (StringListItem(_obj245.menuoptionskeys, number - 1));
}
}
return (handled);
}
function ClearMenu()
{
HideOutputSection (_obj245.menuoutputsection);
set(_obj245, "menuoutputsection", null);
set(_obj245, "menuoptions", null);
set(_obj245, "menucallback", null);
}
function StartNewOutputSection()
{
if (!(HasInt(_obj245, "lastoutputsection"))) {
set(_obj245, "lastoutputsection", 0);
}
set(_obj245, "lastoutputsection", _obj245.lastoutputsection + 1);
var name = "section" + _obj245.lastoutputsection;
JsStartOutputSection (name)
return (name);
}
function EndOutputSection(name)
{
JsEndOutputSection (name)
}
function HideOutputSection(name)
{
JsHideOutputSection (name)
}
function StartTurnOutputSection()
{
if (HasString(_obj245, "currentturnoutputsection")) {
set(_obj245, "lastturnoutputsection", _obj245.currentturnoutputsection);
EndOutputSection (_obj245.currentturnoutputsection);
}
set(_obj245, "currentturnoutputsection", StartNewOutputSection());
}
function HidePreviousTurnOutput()
{
if (HasString(_obj245, "lastturnoutputsection")) {
HideOutputSection (_obj245.lastturnoutputsection);
}
}
function Ask(question, callback)
{
var options = NewStringList();
listadd (options, "Yes");
listadd (options, "No");
set(_obj245, "askcallback", callback);
ShowMenu (question, options, false, function (result) { var parameters = NewDictionary();
if (result == "Yes") {
var boolresult = true;
}
else {
var boolresult = false;
}
dictionaryadd (parameters, "result", boolresult);
var callback = _obj245.askcallback;
set(_obj245, "askcallback", null);
invoke (callback, parameters); });
}
function AllKeysAvailable(object)
{
if (HasObject(object, "key")) {
if (!(HasInt(object,"keycount"))) {
set(object, "keycount", 1);
set(object, "key1", object.key);
}
if (!(HasObject(object, "key1"))) {
set(object, "key1", object.key);
}
}
for (var x = 1; x <= object.keycount; x++) {
var keyname = "key" + ToString(x);
if (HasObject(object, keyname)) {
if (!(ListContains(ScopeInventory(), GetAttribute(object, keyname)))) {
return (false);
}
}
}
return (true);
}
